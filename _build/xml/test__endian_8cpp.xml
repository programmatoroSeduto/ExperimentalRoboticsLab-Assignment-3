<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__endian_8cpp" kind="file" language="C++">
    <compoundname>test_endian.cpp</compoundname>
    <includes refid="conversion_8hpp" local="yes">boost/endian/conversion.hpp</includes>
    <includes local="no">boost/make_shared.hpp</includes>
    <includes refid="cv__bridge_8h" local="no">cv_bridge/cv_bridge.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="14">
        <label>boost/predef/os/ios.h</label>
        <link refid="ios_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>ros/static_assert.h</label>
      </node>
      <node id="19">
        <label>boost/predef/os/bsd/open.h</label>
        <link refid="open_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>boost/predef/detail/_cassert.h</label>
        <link refid="__cassert_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>assert.h</label>
      </node>
      <node id="25">
        <label>boost/core/scoped_enum.hpp</label>
        <link refid="scoped__enum_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>cv_bridge/cv_bridge.h</label>
        <link refid="cv__bridge_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>boost/predef/architecture.h</label>
      </node>
      <node id="26">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="38">
        <label>stdexcept</label>
      </node>
      <node id="35">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="31">
        <label>sensor_msgs/Image.h</label>
      </node>
      <node id="9">
        <label>boost/predef/library/c/gnu.h</label>
        <link refid="gnu_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>boost/predef/make.h</label>
        <link refid="make_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>boost/predef/detail/endian_compat.h</label>
        <link refid="endian__compat_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>boost/predef/os/bsd.h</label>
        <link refid="bsd_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>boost/predef/os/bsd/free.h</label>
        <link refid="free_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>boost/endian/detail/intrinsic.hpp</label>
        <link refid="intrinsic_8hpp"/>
      </node>
      <node id="23">
        <label>boost/cstdint.hpp</label>
      </node>
      <node id="33">
        <label>sensor_msgs/image_encodings.h</label>
      </node>
      <node id="37">
        <label>opencv2/imgproc/types_c.h</label>
      </node>
      <node id="16">
        <label>boost/predef/os/bsd/bsdi.h</label>
        <link refid="bsdi_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="20">
        <label>boost/predef/os/bsd/net.h</label>
        <link refid="net_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/test/test_endian.cpp</label>
        <link refid="test__endian_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>boost/predef/other/endian.h</label>
        <link refid="endian_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>gtest/gtest.h</label>
      </node>
      <node id="21">
        <label>boost/predef/os/android.h</label>
        <link refid="android_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>boost/endian/conversion.hpp</label>
        <link refid="conversion_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>boost/predef/os/macos.h</label>
        <link refid="macos_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>boost/config.hpp</label>
      </node>
      <node id="6">
        <label>boost/predef/version_number.h</label>
        <link refid="version__number_8h"/>
      </node>
      <node id="10">
        <label>boost/predef/library/c/_prefix.h</label>
        <link refid="__prefix_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/predef/detail/test.h</label>
        <link refid="test_8h"/>
      </node>
      <node id="32">
        <label>sensor_msgs/CompressedImage.h</label>
      </node>
      <node id="29">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="27">
        <label>algorithm</label>
      </node>
      <node id="28">
        <label>cstring</label>
      </node>
      <node id="17">
        <label>boost/predef/os/bsd/dragonfly.h</label>
        <link refid="dragonfly_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__endian_8cpp_1a645cd0f54caa88cd6172fff415d1eb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CvBridgeTest, endianness)</argsstring>
        <name>TEST</name>
        <param>
          <type>CvBridgeTest</type>
        </param>
        <param>
          <type>endianness</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/test_endian.cpp" line="6" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/test_endian.cpp" bodystart="6" bodyend="38"/>
        <references refid="namespaceboost_1_1endian_1a0a885a71d7b5f0c6e6d6b67b67a8c1d5" compoundref="conversion_8hpp" startline="293" endline="300">boost::endian::native_to_big</references>
        <references refid="namespaceboost_1_1endian_1a4540ff464f1b77d7d06dc48641f43fc3" compoundref="conversion_8hpp" startline="313" endline="320">boost::endian::native_to_little</references>
        <references refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" compoundref="cv__bridge_8cpp" startline="439" endline="443">cv_bridge::toCvShare</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="conversion_8hpp" kindref="compound">boost/endian/conversion.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/make_shared.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cv__bridge_8h" kindref="compound">cv_bridge/cv_bridge.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="test__endian_8cpp_1a645cd0f54caa88cd6172fff415d1eb50" refkind="member"><highlight class="normal"><ref refid="test__endian_8cpp_1a645cd0f54caa88cd6172fff415d1eb50" kindref="member">TEST</ref>(CvBridgeTest,<sp/>endianness)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost_1_1endian" kindref="compound">boost::endian</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>image<sp/>of<sp/>the<sp/>type<sp/>opposite<sp/>to<sp/>the<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>sensor_msgs::Image<sp/>msg;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>msg.height<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>msg.width<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>msg.encoding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;32SC2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>msg.step<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>msg.data.resize(msg.step);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>int32_t*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;msg.data[0]);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>1<sp/>and<sp/>2<sp/>in<sp/>order,<sp/>but<sp/>with<sp/>an<sp/>endianness<sp/>opposite<sp/>to<sp/>the<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order::native<sp/>==<sp/>order::little)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.is_bigendian<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>*(data++)<sp/>=<sp/><ref refid="namespaceboost_1_1endian_1a0a885a71d7b5f0c6e6d6b67b67a8c1d5" kindref="member">native_to_big</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>*data<sp/>=<sp/><ref refid="namespaceboost_1_1endian_1a0a885a71d7b5f0c6e6d6b67b67a8c1d5" kindref="member">native_to_big</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.is_bigendian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>*(data++)<sp/>=<sp/><ref refid="namespaceboost_1_1endian_1a4540ff464f1b77d7d06dc48641f43fc3" kindref="member">native_to_little</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>*data<sp/>=<sp/><ref refid="namespaceboost_1_1endian_1a4540ff464f1b77d7d06dc48641f43fc3" kindref="member">native_to_little</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>values<sp/>are<sp/>still<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">cv_bridge::CvImageConstPtr</ref><sp/>img<sp/>=<sp/><ref refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" kindref="member">cv_bridge::toCvShare</ref>(boost::make_shared&lt;sensor_msgs::Image&gt;(msg));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>EXPECT_EQ(img-&gt;image.at&lt;cv::Vec2i&gt;(0,<sp/>0)[0],<sp/>1);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>EXPECT_EQ(img-&gt;image.at&lt;cv::Vec2i&gt;(0,<sp/>0)[1],<sp/>2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>cannot<sp/>share<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_NE(img-&gt;image.data,<sp/>&amp;msg.data[0]);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/test_endian.cpp"/>
  </compounddef>
</doxygen>
