<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcv__bridge_1_1core_1_1_cv_bridge" kind="class" language="Python" prot="public">
    <compoundname>cv_bridge::core::CvBridge</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classcv__bridge_1_1core_1_1_cv_bridge_1a9d4435c4b35ea7795c325d5e8e97c4a4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>cv_bridge.core.CvBridge::cvtype_to_name</definition>
        <argsstring></argsstring>
        <name>cvtype_to_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="68" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="68" bodyend="-1"/>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8f6dae8fb32dbcffe9b7c2ea0d4f86fb" compoundref="core_8py" startline="229" endline="274">cv_bridge.core.CvBridge.cv2_to_imgmsg</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classcv__bridge_1_1core_1_1_cv_bridge_1ae8187c3ae68f22615b1b387a225ce3c1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>cv_bridge.core.CvBridge::cvdepth_to_numpy_depth</definition>
        <argsstring></argsstring>
        <name>cvdepth_to_numpy_depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="69" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="69" bodyend="-1"/>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a421cf0c5b17751fa2cd5624e8880afe4" compoundref="core_8py" startline="86" endline="89">cv_bridge.core.CvBridge.cvtype2_to_dtype_with_channels</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classcv__bridge_1_1core_1_1_cv_bridge_1a98af25a76a84f39e31fea92a0597de0e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>cv_bridge.core.CvBridge::numpy_type_to_cvtype</definition>
        <argsstring></argsstring>
        <name>numpy_type_to_cvtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="78" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="78" bodyend="-1"/>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a25b485400efb3625a727355bde8f2383" compoundref="core_8py" startline="83" endline="85">cv_bridge.core.CvBridge.dtype_with_channels_to_cvtype2</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a98f819c0f592dd95a6e1aad9bead967f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.__init__</definition>
        <argsstring>(self)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="66" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="66" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a25b485400efb3625a727355bde8f2383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.dtype_with_channels_to_cvtype2</definition>
        <argsstring>(self, dtype, n_channels)</argsstring>
        <name>dtype_with_channels_to_cvtype2</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>dtype</type>
          <defname>dtype</defname>
        </param>
        <param>
          <type>n_channels</type>
          <defname>n_channels</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="83" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="83" bodyend="85"/>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a98af25a76a84f39e31fea92a0597de0e" compoundref="core_8py" startline="78">cv_bridge.core.CvBridge.numpy_type_to_cvtype</references>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8f6dae8fb32dbcffe9b7c2ea0d4f86fb" compoundref="core_8py" startline="229" endline="274">cv_bridge.core.CvBridge.cv2_to_imgmsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a421cf0c5b17751fa2cd5624e8880afe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.cvtype2_to_dtype_with_channels</definition>
        <argsstring>(self, cvtype)</argsstring>
        <name>cvtype2_to_dtype_with_channels</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>cvtype</type>
          <defname>cvtype</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="86" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="86" bodyend="89"/>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1ae8187c3ae68f22615b1b387a225ce3c1" compoundref="core_8py" startline="69">cv_bridge.core.CvBridge.cvdepth_to_numpy_depth</references>
        <references refid="module_8cpp_1a874189b278582e249cc976047eed5fd6" compoundref="module_8cpp" startline="83" endline="85">CV_MAT_DEPTHWrap</references>
        <references refid="module_8cpp_1a383cca781ddc8c10da434d9654bc1f6e" compoundref="module_8cpp" startline="79" endline="81">CV_MAT_CNWrap</references>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a637323536c77d1ac3456048d27790743" compoundref="core_8py" startline="98" endline="100">cv_bridge.core.CvBridge.encoding_to_dtype_with_channels</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a8a6e497ee5a2fadae34d47d227bce7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.encoding_to_cvtype2</definition>
        <argsstring>(self, encoding)</argsstring>
        <name>encoding_to_cvtype2</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>encoding</type>
          <defname>encoding</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="90" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="90" bodyend="97"/>
        <references refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" compoundref="cv__bridge_8cpp" startline="105" endline="146">cv_bridge::getCvType</references>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a637323536c77d1ac3456048d27790743" compoundref="core_8py" startline="98" endline="100">cv_bridge.core.CvBridge.encoding_to_dtype_with_channels</referencedby>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8f6dae8fb32dbcffe9b7c2ea0d4f86fb" compoundref="core_8py" startline="229" endline="274">cv_bridge.core.CvBridge.cv2_to_imgmsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a637323536c77d1ac3456048d27790743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.encoding_to_dtype_with_channels</definition>
        <argsstring>(self, encoding)</argsstring>
        <name>encoding_to_dtype_with_channels</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>encoding</type>
          <defname>encoding</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="98" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="98" bodyend="100"/>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a421cf0c5b17751fa2cd5624e8880afe4" compoundref="core_8py" startline="86" endline="89">cv_bridge.core.CvBridge.cvtype2_to_dtype_with_channels</references>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8a6e497ee5a2fadae34d47d227bce7cf" compoundref="core_8py" startline="90" endline="97">cv_bridge.core.CvBridge.encoding_to_cvtype2</references>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1ab58916630b2fa89a3b511814b10c2a44" compoundref="core_8py" startline="141" endline="191">cv_bridge.core.CvBridge.imgmsg_to_cv2</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1abf1b79984d47ab54e6dff9ed98bc6fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.compressed_imgmsg_to_cv2</definition>
        <argsstring>(self, cmprs_img_msg, desired_encoding=&quot;passthrough&quot;)</argsstring>
        <name>compressed_imgmsg_to_cv2</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>cmprs_img_msg</type>
          <defname>cmprs_img_msg</defname>
        </param>
        <param>
          <type>desired_encoding</type>
          <defname>desired_encoding</defname>
          <defval>&quot;passthrough&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert a sensor_msgs::CompressedImage message to an OpenCV :cpp:type:`cv::Mat`.

:param cmprs_img_msg:   A :cpp:type:`sensor_msgs::CompressedImage` message
:param desired_encoding:  The encoding of the image data, one of the following strings:

   * ``&quot;passthrough&quot;``
   * one of the standard strings in sensor_msgs/image_encodings.h

:rtype: :cpp:type:`cv::Mat`
:raises CvBridgeError: when conversion is not possible.

If desired_encoding is ``&quot;passthrough&quot;``, then the returned image has the same format as img_msg.
Otherwise desired_encoding must be one of the standard image encodings

This function returns an OpenCV :cpp:type:`cv::Mat` message on success, or raises :exc:`cv_bridge.CvBridgeError` on failure.

If the image only has one channel, the shape has size 2 (width and height)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="101" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="101" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1ab58916630b2fa89a3b511814b10c2a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.imgmsg_to_cv2</definition>
        <argsstring>(self, img_msg, desired_encoding=&quot;passthrough&quot;)</argsstring>
        <name>imgmsg_to_cv2</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>img_msg</type>
          <defname>img_msg</defname>
        </param>
        <param>
          <type>desired_encoding</type>
          <defname>desired_encoding</defname>
          <defval>&quot;passthrough&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert a sensor_msgs::Image message to an OpenCV :cpp:type:`cv::Mat`.

:param img_msg:   A :cpp:type:`sensor_msgs::Image` message
:param desired_encoding:  The encoding of the image data, one of the following strings:

   * ``&quot;passthrough&quot;``
   * one of the standard strings in sensor_msgs/image_encodings.h

:rtype: :cpp:type:`cv::Mat`
:raises CvBridgeError: when conversion is not possible.

If desired_encoding is ``&quot;passthrough&quot;``, then the returned image has the same format as img_msg.
Otherwise desired_encoding must be one of the standard image encodings

This function returns an OpenCV :cpp:type:`cv::Mat` message on success, or raises :exc:`cv_bridge.CvBridgeError` on failure.

If the image only has one channel, the shape has size 2 (width and height)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="141" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="141" bodyend="191"/>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a637323536c77d1ac3456048d27790743" compoundref="core_8py" startline="98" endline="100">cv_bridge.core.CvBridge.encoding_to_dtype_with_channels</references>
        <references refid="examples__tools_8md_8txt_1ab7ba283e106143c7b2f5dbb2b4147982" compoundref="examples__tools_8md_8txt" startline="62" endline="66">if</references>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a09d0680988bbc4127cbfa7c02b57c0b8" compoundref="erl2-oracle-user-manual_8md_8txt" startline="126">type</references>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a2c90b46df3b7b86bdb682dbd1e7de176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.cv2_to_compressed_imgmsg</definition>
        <argsstring>(self, cvim, dst_format=&quot;jpg&quot;)</argsstring>
        <name>cv2_to_compressed_imgmsg</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>cvim</type>
          <defname>cvim</defname>
        </param>
        <param>
          <type>dst_format</type>
          <defname>dst_format</defname>
          <defval>&quot;jpg&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert an OpenCV :cpp:type:`cv::Mat` type to a ROS sensor_msgs::CompressedImage message.

:param cvim:      An OpenCV :cpp:type:`cv::Mat`
:param dst_format:  The format of the image data, one of the following strings:

   * from http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html
   * from http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html#Mat imread(const string&amp; filename, int flags)
   * bmp, dib
   * jpeg, jpg, jpe
   * jp2
   * png
   * pbm, pgm, ppm
   * sr, ras
   * tiff, tif

:rtype:           A sensor_msgs.msg.CompressedImage message
:raises CvBridgeError: when the ``cvim`` has a type that is incompatible with ``format``


This function returns a sensor_msgs::Image message on success, or raises :exc:`cv_bridge.CvBridgeError` on failure.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="192" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="192" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classcv__bridge_1_1core_1_1_cv_bridge_1a8f6dae8fb32dbcffe9b7c2ea0d4f86fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def cv_bridge.core.CvBridge.cv2_to_imgmsg</definition>
        <argsstring>(self, cvim, encoding=&quot;passthrough&quot;, header=None)</argsstring>
        <name>cv2_to_imgmsg</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>cvim</type>
          <defname>cvim</defname>
        </param>
        <param>
          <type>encoding</type>
          <defname>encoding</defname>
          <defval>&quot;passthrough&quot;</defval>
        </param>
        <param>
          <type>header</type>
          <defname>header</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert an OpenCV :cpp:type:`cv::Mat` type to a ROS sensor_msgs::Image message.

:param cvim:      An OpenCV :cpp:type:`cv::Mat`
:param encoding:  The encoding of the image data, one of the following strings:

   * ``&quot;passthrough&quot;``
   * one of the standard strings in sensor_msgs/image_encodings.h
:param header:    A std_msgs.msg.Header message

:rtype:           A sensor_msgs.msg.Image message
:raises CvBridgeError: when the ``cvim`` has a type that is incompatible with ``encoding``

If encoding is ``&quot;passthrough&quot;``, then the message has the same encoding as the image&apos;s OpenCV type.
Otherwise desired_encoding must be one of the standard image encodings

This function returns a sensor_msgs::Image message on success, or raises :exc:`cv_bridge.CvBridgeError` on failure.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="229" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="229" bodyend="274"/>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a25b485400efb3625a727355bde8f2383" compoundref="core_8py" startline="83" endline="85">cv_bridge.core.CvBridge.dtype_with_channels_to_cvtype2</references>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a9d4435c4b35ea7795c325d5e8e97c4a4" compoundref="core_8py" startline="68">cv_bridge.core.CvBridge.cvtype_to_name</references>
        <references refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8a6e497ee5a2fadae34d47d227bce7cf" compoundref="core_8py" startline="90" endline="97">cv_bridge.core.CvBridge.encoding_to_cvtype2</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>The CvBridge is an object that converts between OpenCV Images and ROS Image messages.

   .. doctest::
       :options: -ELLIPSIS, +NORMALIZE_WHITESPACE

       &gt;&gt;&gt; import cv2
       &gt;&gt;&gt; import numpy as np
       &gt;&gt;&gt; from cv_bridge import CvBridge
       &gt;&gt;&gt; br = CvBridge()
       &gt;&gt;&gt; dtype, n_channels = br.encoding_as_cvtype2(&apos;8UC3&apos;)
       &gt;&gt;&gt; im = np.ndarray(shape=(480, 640, n_channels), dtype=dtype)
       &gt;&gt;&gt; msg = br.cv2_to_imgmsg(im)  # Convert the image to a message
       &gt;&gt;&gt; im2 = br.imgmsg_to_cv2(msg) # Convert the message to a new image
       &gt;&gt;&gt; cmprsmsg = br.cv2_to_compressed_imgmsg(im)  # Convert the image to a compress message
       &gt;&gt;&gt; im22 = br.compressed_imgmsg_to_cv2(msg) # Convert the compress message to a new image
       &gt;&gt;&gt; cv2.imwrite(&quot;this_was_a_message_briefly.png&quot;, im2)</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>cv_bridge.core.CvBridge</label>
        <link refid="classcv__bridge_1_1core_1_1_cv_bridge"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>cv_bridge.core.CvBridge</label>
        <link refid="classcv__bridge_1_1core_1_1_cv_bridge"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" line="45" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/python/cv_bridge/core.py" bodystart="45" bodyend="274"/>
    <listofallmembers>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a98f819c0f592dd95a6e1aad9bead967f" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>__init__</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1abf1b79984d47ab54e6dff9ed98bc6fdd" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>compressed_imgmsg_to_cv2</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a2c90b46df3b7b86bdb682dbd1e7de176" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>cv2_to_compressed_imgmsg</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8f6dae8fb32dbcffe9b7c2ea0d4f86fb" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>cv2_to_imgmsg</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1ae8187c3ae68f22615b1b387a225ce3c1" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>cvdepth_to_numpy_depth</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a421cf0c5b17751fa2cd5624e8880afe4" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>cvtype2_to_dtype_with_channels</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a9d4435c4b35ea7795c325d5e8e97c4a4" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>cvtype_to_name</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a25b485400efb3625a727355bde8f2383" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>dtype_with_channels_to_cvtype2</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8a6e497ee5a2fadae34d47d227bce7cf" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>encoding_to_cvtype2</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a637323536c77d1ac3456048d27790743" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>encoding_to_dtype_with_channels</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1ab58916630b2fa89a3b511814b10c2a44" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>imgmsg_to_cv2</name></member>
      <member refid="classcv__bridge_1_1core_1_1_cv_bridge_1a98af25a76a84f39e31fea92a0597de0e" prot="public" virt="non-virtual"><scope>cv_bridge::core::CvBridge</scope><name>numpy_type_to_cvtype</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
