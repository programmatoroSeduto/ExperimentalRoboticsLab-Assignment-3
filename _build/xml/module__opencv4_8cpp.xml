<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="module__opencv4_8cpp" kind="file" language="C++">
    <compoundname>module_opencv4.cpp</compoundname>
    <includes refid="module_8hpp" local="yes">module.hpp</includes>
    <includes local="yes">opencv2/core/types_c.h</includes>
    <includes local="yes">opencv2/opencv_modules.hpp</includes>
    <includes refid="pycompat_8hpp" local="yes">pycompat.hpp</includes>
    <incdepgraph>
      <node id="9">
        <label>ros/static_assert.h</label>
      </node>
      <node id="13">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="6">
        <label>sensor_msgs/Image.h</label>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp</label>
        <link refid="module__opencv4_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sensor_msgs/image_encodings.h</label>
      </node>
      <node id="12">
        <label>opencv2/imgproc/types_c.h</label>
      </node>
      <node id="11">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="4">
        <label>boost/python.hpp</label>
      </node>
      <node id="14">
        <label>Python.h</label>
      </node>
      <node id="16">
        <label>opencv2/core/types_c.h</label>
      </node>
      <node id="18">
        <label>pycompat.hpp</label>
        <link refid="pycompat_8hpp"/>
      </node>
      <node id="5">
        <label>cv_bridge/cv_bridge.h</label>
        <link refid="cv__bridge_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>module.hpp</label>
        <link refid="module_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="17">
        <label>opencv2/opencv_modules.hpp</label>
      </node>
      <node id="7">
        <label>sensor_msgs/CompressedImage.h</label>
      </node>
      <node id="15">
        <label>numpy/ndarrayobject.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_arg_info" prot="public">ArgInfo</innerclass>
    <innerclass refid="class_py_allow_threads" prot="public">PyAllowThreads</innerclass>
    <innerclass refid="class_py_ensure_g_i_l" prot="public">PyEnsureGIL</innerclass>
    <innerclass refid="class_numpy_allocator" prot="public">NumpyAllocator</innerclass>
    <innernamespace refid="namespacecv">cv</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="module__opencv4_8cpp_1a1dbb0f1a245a4dc0666126cbfec04739" prot="public" static="no">
        <name>ERRWRAP2</name>
        <param><defname>expr</defname></param>
        <initializer>try \
{ \
    <ref refid="class_py_allow_threads" kindref="compound">PyAllowThreads</ref> allowThreads; \
    expr; \
} \
catch (const cv::Exception &amp;e) \
{ \
    PyErr_SetString(opencv_error, e.what()); \
    return 0; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="64" column="9" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba987f8fc7b774aef0a635c58ae03258c9" prot="public">
          <name>ARG_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba488ac161a725fd1030b77836236cb472" prot="public">
          <name>ARG_MAT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba8011cdcdc74b9f9d7e69eb374f2a0ede" prot="public">
          <name>ARG_SCALAR</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="172" column="6" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="172" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="module__opencv4_8cpp_1ab392ffad793f38f4b2c143cbf1a8bad9" prot="public" static="yes" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* opencv_error</definition>
        <argsstring></argsstring>
        <name>opencv_error</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="11" column="17" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" prot="public" static="no" mutable="no">
        <type><ref refid="class_numpy_allocator" kindref="compound">NumpyAllocator</ref></type>
        <definition>NumpyAllocator g_numpyAllocator</definition>
        <argsstring></argsstring>
        <name>g_numpyAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="163" column="16" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="163" bodyend="-1"/>
        <referencedby refid="module__opencv4_8cpp_1a888bf745b252653ccb533a0bbc6b3785" compoundref="module__opencv4_8cpp" startline="352" endline="366">pyopencv_from</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="module__opencv4_8cpp_1a84ace95ce7aa56bc22642dfaaaa41b25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int failmsg</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>failmsg</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="13" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="13" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1adfbbd05a0a9f73a8dfe4ed2d690d6e5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* failmsgp</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>failmsgp</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="78" column="17" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1a0e46a43061fabe4916befb2d82594621" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool pyopencv_to</definition>
        <argsstring>(PyObject *obj, T &amp;p, const char *name=&quot;&lt;unknown&gt;&quot;)</argsstring>
        <name>pyopencv_to</name>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;&lt;unknown&gt;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="167" column="6" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1a0d36fe38aaea64587fa3ff1ef0c8102c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>PyObject *</type>
        <definition>static PyObject* pyopencv_from</definition>
        <argsstring>(const T &amp;src)</argsstring>
        <name>pyopencv_from</name>
        <param>
          <type>const T &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="170" column="10" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" declline="170" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1a9647e4d6de858ec0a148a48fbeaf643b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool pyopencv_to</definition>
        <argsstring>(PyObject *o, Mat &amp;m, const ArgInfo info)</argsstring>
        <name>pyopencv_to</name>
        <param>
          <type>PyObject *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="struct_arg_info" kindref="compound">ArgInfo</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="175" column="13" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="175" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool pyopencv_to</definition>
        <argsstring>(PyObject *o, Mat &amp;m, const char *name)</argsstring>
        <name>pyopencv_to</name>
        <param>
          <type>PyObject *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="347" column="6" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="347" bodyend="350"/>
        <referencedby refid="module__opencv4_8cpp_1a6c0555e5d855fc3500098940533b8207" compoundref="module__opencv4_8cpp" startline="368" endline="372">convert_to_CvMat2</referencedby>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1a888bf745b252653ccb533a0bbc6b3785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* pyopencv_from</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>pyopencv_from</name>
        <param>
          <type>const Mat &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="352" column="10" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="352" bodyend="366"/>
        <references refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" compoundref="module__opencv4_8cpp" startline="163">g_numpyAllocator</references>
        <references refid="module__opencv4_8cpp_1a1dbb0f1a245a4dc0666126cbfec04739" compoundref="module__opencv4_8cpp" startline="64">ERRWRAP2</references>
      </memberdef>
      <memberdef kind="function" id="module__opencv4_8cpp_1a6c0555e5d855fc3500098940533b8207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int convert_to_CvMat2</definition>
        <argsstring>(const PyObject *o, cv::Mat &amp;m)</argsstring>
        <name>convert_to_CvMat2</name>
        <param>
          <type>const PyObject *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" line="368" column="5" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp" bodystart="368" bodyend="372"/>
        <references refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" compoundref="module__opencv4_8cpp" startline="347" endline="350">pyopencv_to</references>
        <referencedby refid="module_8cpp_1a8c7ec70176ea133aefcb8643f6609953" compoundref="module_8cpp" startline="40" endline="51">cvtColor2Wrap</referencedby>
        <referencedby refid="module_8cpp_1aa9d810d7cb2ab2982c77d0b44a4b13f3" compoundref="module_8cpp" startline="54" endline="75">cvtColorForDisplayWrap</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Taken<sp/>from<sp/>opencv/modules/python/src2/cv2.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="module_8hpp" kindref="compound">module.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opencv2/core/types_c.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opencv2/opencv_modules.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pycompat_8hpp" kindref="compound">pycompat.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>opencv_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failmsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[1000];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>vsnprintf(str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(str),<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>str);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="struct_arg_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_arg_info" kindref="compound">ArgInfo</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28" refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="29" refid="struct_arg_info_1a39613ded16fd4a80668a82597cb1ca6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_arg_info_1a39613ded16fd4a80668a82597cb1ca6c" kindref="member">outputarg</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>fields<sp/>may<sp/>be<sp/>added<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="struct_arg_info_1ad4d6e1d1bc67a04e203df512876d300c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_arg_info_1ad4d6e1d1bc67a04e203df512876d300c" kindref="member">ArgInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>outputarg_)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>(name_)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="struct_arg_info_1a39613ded16fd4a80668a82597cb1ca6c" kindref="member">outputarg</ref>(outputarg_)<sp/>{}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>match<sp/>with<sp/>older<sp/>pyopencv_to<sp/>function<sp/>signature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="struct_arg_info_1aa27b904f8175629d2d34b4b778966ec1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="class_py_allow_threads" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_py_allow_threads" kindref="compound">PyAllowThreads</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43" refid="class_py_allow_threads_1aeba45516b34f2720108a829aa8ffb1e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_py_allow_threads_1aeba45516b34f2720108a829aa8ffb1e5" kindref="member">PyAllowThreads</ref>()<sp/>:<sp/>_state(PyEval_SaveThread())<sp/>{}</highlight></codeline>
<codeline lineno="44" refid="class_py_allow_threads_1a1bcfdfa506a171986a65f9c0b581c335" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_py_allow_threads_1a1bcfdfa506a171986a65f9c0b581c335" kindref="member">~PyAllowThreads</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyEval_RestoreThread(_state);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState*<sp/>_state;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_py_ensure_g_i_l" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_py_ensure_g_i_l" kindref="compound">PyEnsureGIL</ref></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55" refid="class_py_ensure_g_i_l_1a3c64c2b34c13f16157a79af74a436ad4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_py_ensure_g_i_l_1a3c64c2b34c13f16157a79af74a436ad4" kindref="member">PyEnsureGIL</ref>()<sp/>:<sp/>_state(PyGILState_Ensure())<sp/>{}</highlight></codeline>
<codeline lineno="56" refid="class_py_ensure_g_i_l_1ae1136b06138f0be45e42609afa08535e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_py_ensure_g_i_l_1ae1136b06138f0be45e42609afa08535e" kindref="member">~PyEnsureGIL</ref>()</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(_state);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>_state;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="module__opencv4_8cpp_1a1dbb0f1a245a4dc0666126cbfec04739" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRWRAP2(expr)<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor">try<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyAllowThreads<sp/>allowThreads;<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>expr;<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor">catch<sp/>(const<sp/>cv::Exception<sp/>&amp;e)<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyErr_SetString(opencv_error,<sp/>e.what());<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">cv;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>failmsgp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[1000];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>vsnprintf(str,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(str),<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>str);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_numpy_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_numpy_allocator" kindref="compound">NumpyAllocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatAllocator</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CV_MAJOR_VERSION<sp/>==<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AccessFlag;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99" refid="class_numpy_allocator_1ab3b00d82b77307073d36e8739738c126" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_numpy_allocator_1ab3b00d82b77307073d36e8739738c126" kindref="member">NumpyAllocator</ref>()<sp/>{<sp/>stdAllocator<sp/>=<sp/>Mat::getStdAllocator();<sp/>}</highlight></codeline>
<codeline lineno="100" refid="class_numpy_allocator_1ab4628f343d91ae7bca5645fbc36b4779" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_numpy_allocator_1ab4628f343d91ae7bca5645fbc36b4779" kindref="member">~NumpyAllocator</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="class_numpy_allocator_1a4b0b5445873d10d23190d8878fe7c6ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UMatData*<sp/><ref refid="class_numpy_allocator_1a4b0b5445873d10d23190d8878fe7c6ef" kindref="member">allocate</ref>(PyObject*<sp/>o,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dims,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sizes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>step)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="103"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UMatData*<sp/>u<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UMatData(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;data<sp/>=<sp/>u-&gt;origdata<sp/>=<sp/>(uchar*)PyArray_DATA((PyArrayObject*)<sp/>o);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npy_intp*<sp/>_strides<sp/>=<sp/>PyArray_STRIDES((PyArrayObject*)<sp/>o);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dims<sp/>-<sp/>1;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)_strides[i];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step[dims-1]<sp/>=<sp/>CV_ELEM_SIZE(<ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;size<sp/>=<sp/>sizes[0]*step[0];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;userdata<sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="class_numpy_allocator_1a72a6a1d57bf1ab257c75c1e52efcd51d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UMatData*<sp/><ref refid="class_numpy_allocator_1a72a6a1d57bf1ab257c75c1e52efcd51d" kindref="member">allocate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dims0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sizes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>step,<sp/>AccessFlag<sp/>flags,<sp/>UMatUsageFlags<sp/>usageFlags)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_Error(Error::StsAssert,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>data<sp/>should<sp/>normally<sp/>be<sp/>NULL!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>probably<sp/>this<sp/>is<sp/>safe<sp/>to<sp/>do<sp/>in<sp/>such<sp/>extreme<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdAllocator-&gt;allocate(dims0,<sp/>sizes,<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/>data,<sp/>step,<sp/>flags,<sp/>usageFlags);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_py_ensure_g_i_l" kindref="compound">PyEnsureGIL</ref><sp/>gil;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>CV_MAT_DEPTH(<ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cn<sp/>=<sp/>CV_MAT_CN(<ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>(int)(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)/8);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typenum<sp/>=<sp/>depth<sp/>==<sp/>CV_8U<sp/>?<sp/>NPY_UBYTE<sp/>:<sp/>depth<sp/>==<sp/>CV_8S<sp/>?<sp/>NPY_BYTE<sp/>:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>==<sp/>CV_16U<sp/>?<sp/>NPY_USHORT<sp/>:<sp/>depth<sp/>==<sp/>CV_16S<sp/>?<sp/>NPY_SHORT<sp/>:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>==<sp/>CV_32S<sp/>?<sp/>NPY_INT<sp/>:<sp/>depth<sp/>==<sp/>CV_32F<sp/>?<sp/>NPY_FLOAT<sp/>:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>==<sp/>CV_64F<sp/>?<sp/>NPY_DOUBLE<sp/>:<sp/>f*NPY_ULONGLONG<sp/>+<sp/>(f^1)*NPY_UINT;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>dims<sp/>=<sp/>dims0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::AutoBuffer&lt;npy_intp&gt;<sp/>_sizes(dims<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dims;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sizes[i]<sp/>=<sp/>sizes[i];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cn<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sizes[dims++]<sp/>=<sp/>cn;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>o<sp/>=<sp/>PyArray_SimpleNew(dims,<sp/>_sizes,<sp/>typenum);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!o)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_Error_(Error::StsError,<sp/>(</highlight><highlight class="stringliteral">&quot;The<sp/>numpy<sp/>array<sp/>of<sp/>typenum=%d,<sp/>ndims=%d<sp/>can<sp/>not<sp/>be<sp/>created&quot;</highlight><highlight class="normal">,<sp/>typenum,<sp/>dims));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocate(o,<sp/>dims0,<sp/>sizes,<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/>step);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="class_numpy_allocator_1a93f968ee499dacc0c207ededf0383a5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_numpy_allocator_1a93f968ee499dacc0c207ededf0383a5c" kindref="member">allocate</ref>(UMatData*<sp/>u,<sp/>AccessFlag<sp/>accessFlags,<sp/>UMatUsageFlags<sp/>usageFlags)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="145"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdAllocator-&gt;allocate(u,<sp/>accessFlags,<sp/>usageFlags);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_numpy_allocator_1ab3775daa783f9cde50129678de92eaaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_numpy_allocator_1ab3775daa783f9cde50129678de92eaaf" kindref="member">deallocate</ref>(UMatData*<sp/>u)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="150"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(u)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_py_ensure_g_i_l" kindref="compound">PyEnsureGIL</ref><sp/>gil;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>o<sp/>=<sp/>(PyObject*)u-&gt;userdata;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(o);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="class_numpy_allocator_1af594805363d4aa048adae8edcd53c4bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatAllocator*<sp/><ref refid="class_numpy_allocator_1af594805363d4aa048adae8edcd53c4bf" kindref="member">stdAllocator</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" refkind="member"><highlight class="normal"><ref refid="class_numpy_allocator" kindref="compound">NumpyAllocator</ref><sp/><ref refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" kindref="member">g_numpyAllocator</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" kindref="member">pyopencv_to</ref>(PyObject*<sp/>obj,<sp/>T&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">PyObject*<sp/><ref refid="module__opencv4_8cpp_1a888bf745b252653ccb533a0bbc6b3785" kindref="member">pyopencv_from</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>src);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba8011cdcdc74b9f9d7e69eb374f2a0ede" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba987f8fc7b774aef0a635c58ae03258c9" kindref="member">ARG_NONE</ref><sp/>=<sp/>0,<sp/><ref refid="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba488ac161a725fd1030b77836236cb472" kindref="member">ARG_MAT</ref><sp/>=<sp/>1,<sp/><ref refid="module__opencv4_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba8011cdcdc74b9f9d7e69eb374f2a0ede" kindref="member">ARG_SCALAR</ref><sp/>=<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>case,<sp/>when<sp/>the<sp/>convertor<sp/>needs<sp/>full<sp/>ArgInfo<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" kindref="member">pyopencv_to</ref>(PyObject*<sp/>o,<sp/>Mat&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_arg_info" kindref="compound">ArgInfo</ref><sp/>info)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>PyArray_Check()<sp/>to<sp/>crash<sp/>even<sp/>with<sp/>valid<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>do_numpy_import(<sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowND<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!o<sp/>||<sp/>o<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m.data<sp/>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.allocator<sp/>=<sp/>&amp;<ref refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" kindref="member">g_numpyAllocator</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>PyInt_Check(o)<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v[]<sp/>=<sp/>{(double)PyInt_AsLong((PyObject*)o),<sp/>0.,<sp/>0.,<sp/>0.};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>Mat(4,<sp/>1,<sp/>CV_64F,<sp/>v).clone();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>PyFloat_Check(o)<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v[]<sp/>=<sp/>{PyFloat_AsDouble((PyObject*)o),<sp/>0.,<sp/>0.,<sp/>0.};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>Mat(4,<sp/>1,<sp/>CV_64F,<sp/>v).clone();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>PyTuple_Check(o)<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>sz<sp/>=<sp/>(int)PyTuple_Size((PyObject*)o);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>Mat(sz,<sp/>1,<sp/>CV_64F);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sz;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>oi<sp/>=<sp/>PyTuple_GET_ITEM(o,<sp/>i);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>PyInt_Check(oi)<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(i)<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)PyInt_AsLong(oi);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>PyFloat_Check(oi)<sp/>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(i)<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)PyFloat_AsDouble(oi);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failmsg(</highlight><highlight class="stringliteral">&quot;%s<sp/>is<sp/>not<sp/>a<sp/>numerical<sp/>tuple&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.release();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!PyArray_Check(o)<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failmsg(</highlight><highlight class="stringliteral">&quot;%s<sp/>is<sp/>not<sp/>a<sp/>numpy<sp/>array,<sp/>neither<sp/>a<sp/>scalar&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>PyArrayObject*<sp/>oarr<sp/>=<sp/>(PyArrayObject*)<sp/>o;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needcopy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>needcast<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typenum<sp/>=<sp/>PyArray_TYPE(oarr),<sp/>new_typenum<sp/>=<sp/>typenum;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref><sp/>=<sp/>typenum<sp/>==<sp/>NPY_UBYTE<sp/>?<sp/>CV_8U<sp/>:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_BYTE<sp/>?<sp/>CV_8S<sp/>:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_USHORT<sp/>?<sp/>CV_16U<sp/>:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_SHORT<sp/>?<sp/>CV_16S<sp/>:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_INT<sp/>?<sp/>CV_32S<sp/>:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_INT32<sp/>?<sp/>CV_32S<sp/>:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_FLOAT<sp/>?<sp/>CV_32F<sp/>:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenum<sp/>==<sp/>NPY_DOUBLE<sp/>?<sp/>CV_64F<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref><sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>typenum<sp/>==<sp/>NPY_INT64<sp/>||<sp/>typenum<sp/>==<sp/>NPY_UINT64<sp/>||<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref><sp/>==<sp/>NPY_LONG<sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needcopy<sp/>=<sp/>needcast<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_typenum<sp/>=<sp/>NPY_INT;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref><sp/>=<sp/>CV_32S;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failmsg(</highlight><highlight class="stringliteral">&quot;%s<sp/>data<sp/>type<sp/>=<sp/>%d<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>,<sp/>typenum);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CV_MAX_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CV_MAX_DIM<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndims<sp/>=<sp/>PyArray_NDIM(oarr);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ndims<sp/>&gt;=<sp/>CV_MAX_DIM)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failmsg(</highlight><highlight class="stringliteral">&quot;%s<sp/>dimensionality<sp/>(=%d)<sp/>is<sp/>too<sp/>high&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>,<sp/>ndims);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size[CV_MAX_DIM+1];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step[CV_MAX_DIM+1];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elemsize<sp/>=<sp/>CV_ELEM_SIZE1(<ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>npy_intp*<sp/>_sizes<sp/>=<sp/>PyArray_DIMS(oarr);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>npy_intp*<sp/>_strides<sp/>=<sp/>PyArray_STRIDES(oarr);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ismultichannel<sp/>=<sp/>ndims<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>_sizes[2]<sp/>&lt;=<sp/>CV_CN_MAX;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>ndims-1;<sp/>i<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>!needcopy;<sp/>i--<sp/>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>checks<sp/>handle<sp/>cases<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>a)<sp/>multi-dimensional<sp/>(ndims<sp/>&gt;<sp/>2)<sp/>arrays,<sp/>as<sp/>well<sp/>as<sp/>simpler<sp/>1-<sp/>and<sp/>2-dimensional<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>b)<sp/>transposed<sp/>arrays,<sp/>where<sp/>_strides[]<sp/>elements<sp/>go<sp/>in<sp/>non-descending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>c)<sp/>flipped<sp/>arrays,<sp/>where<sp/>some<sp/>of<sp/>_strides[]<sp/>elements<sp/>are<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(i<sp/>==<sp/>ndims-1<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)_strides[i]<sp/>!=<sp/>elemsize)<sp/>||</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>&lt;<sp/>ndims-1<sp/>&amp;&amp;<sp/>_strides[i]<sp/>&lt;<sp/>_strides[i+1])<sp/>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needcopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ismultichannel<sp/>&amp;&amp;<sp/>_strides[1]<sp/>!=<sp/>(npy_intp)elemsize*_sizes[2]<sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needcopy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needcopy)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="struct_arg_info_1a39613ded16fd4a80668a82597cb1ca6c" kindref="member">outputarg</ref>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failmsg(</highlight><highlight class="stringliteral">&quot;Layout<sp/>of<sp/>the<sp/>output<sp/>array<sp/>%s<sp/>is<sp/>incompatible<sp/>with<sp/>cv::Mat<sp/>(step[ndims-1]<sp/>!=<sp/>elemsize<sp/>or<sp/>step[1]<sp/>!=<sp/>elemsize*nchannels)&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>needcast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>PyArray_Cast(oarr,<sp/>new_typenum);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oarr<sp/>=<sp/>(PyArrayObject*)<sp/>o;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oarr<sp/>=<sp/>PyArray_GETCONTIGUOUS(oarr);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>(PyObject*)<sp/>oarr;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_strides<sp/>=<sp/>PyArray_STRIDES(oarr);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndims;<sp/>i++)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size[i]<sp/>=<sp/>(int)_sizes[i];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step[i]<sp/>=<sp/>(size_t)_strides[i];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>degenerate<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ndims<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size[ndims]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step[ndims]<sp/>=<sp/>elemsize;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndims++;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ismultichannel<sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndims--;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref><sp/>|=<sp/>CV_MAKETYPE(0,<sp/>size[2]);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ndims<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>!allowND<sp/>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failmsg(</highlight><highlight class="stringliteral">&quot;%s<sp/>has<sp/>more<sp/>than<sp/>2<sp/>dimensions&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="struct_arg_info_1a3c3a8bb1d56b256829cf3e35d0216bcf" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>Mat(ndims,<sp/>size,<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/>PyArray_DATA(oarr),<sp/>step);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>m.u<sp/>=<sp/><ref refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" kindref="member">g_numpyAllocator</ref>.<ref refid="class_numpy_allocator_1a4b0b5445873d10d23190d8878fe7c6ef" kindref="member">allocate</ref>(o,<sp/>ndims,<sp/>size,<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/>step);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>m.addref();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!needcopy<sp/>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(o);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>m.allocator<sp/>=<sp/>&amp;<ref refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" kindref="member">g_numpyAllocator</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="347" refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" kindref="member">pyopencv_to</ref>(PyObject*<sp/>o,<sp/>Mat&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" kindref="member">pyopencv_to</ref>(o,<sp/>m,<sp/><ref refid="struct_arg_info" kindref="compound">ArgInfo</ref>(name,<sp/>0));</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="module__opencv4_8cpp_1a888bf745b252653ccb533a0bbc6b3785" refkind="member"><highlight class="normal">PyObject*<sp/><ref refid="module__opencv4_8cpp_1a888bf745b252653ccb533a0bbc6b3785" kindref="member">pyopencv_from</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat&amp;<sp/>m)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m.data<sp/>)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>temp,<sp/>*p<sp/>=<sp/>(Mat*)&amp;m;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!p-&gt;u<sp/>||<sp/>p-&gt;allocator<sp/>!=<sp/>&amp;<ref refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" kindref="member">g_numpyAllocator</ref>)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.allocator<sp/>=<sp/>&amp;<ref refid="module__opencv4_8cpp_1aa309097169dcb9bdd444eb73dc45d29e" kindref="member">g_numpyAllocator</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__opencv4_8cpp_1a1dbb0f1a245a4dc0666126cbfec04739" kindref="member">ERRWRAP2</ref>(m.copyTo(temp));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;temp;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>o<sp/>=<sp/>(PyObject*)p-&gt;u-&gt;userdata;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(o);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="module__opencv4_8cpp_1a6c0555e5d855fc3500098940533b8207" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="module__opencv4_8cpp_1a6c0555e5d855fc3500098940533b8207" kindref="member">convert_to_CvMat2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PyObject*<sp/>o,<sp/>cv::Mat&amp;<sp/>m)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__opencv4_8cpp_1a1017f5b310301f94c55c825f3bf16df1" kindref="member">pyopencv_to</ref>(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">PyObject*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o),<sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/module_opencv4.cpp"/>
  </compounddef>
</doxygen>
