<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md_robocluedo_armor__examples_examples_cluedo" kind="page">
    <compoundname>md_robocluedo_armor__examples_examples_cluedo</compoundname>
    <title>ARMOR CLUEDO EXAMPLES – 1 – Working on Individuals</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".warning"><codeline><highlight class="normal">this<sp/>code<sp/>was<sp/>written<sp/>only<sp/>for<sp/>your<sp/>understanding.<sp/>Probably<sp/>it<sp/>won&apos;t<sp/>compile.</highlight></codeline>
</programlisting></para>
<sect1 id="md_robocluedo_armor__examples_examples_cluedo_1autotoc_md116">
<title>Working on Individuals</title>
<para>The class <ref refid="class_armor_cluedo" kindref="compound">ArmorCluedo</ref> provides some powerful methods, specific for individuals. RCL requeires a limited numer of operations right now.</para>
<para>Here is a simple usage of this class, employed in manipulating</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ros/ros.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_tools/armor_tools.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_tools_armor_cluedo.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirective.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirectiveReq.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirectiveRes.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;string&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(<sp/>int<sp/>argc,<sp/>char*<sp/>argv[]<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ros::init(<sp/>argc,<sp/>argv,<sp/>&quot;example_armor_cluedo_1&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>INIT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>instanciation<sp/>and<sp/>connection</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArmorCluedo<sp/>armor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.Init(<sp/>&quot;/root/ontologies/my_super_ontology.owl&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>ADDING<sp/>INDIVIDUALS</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>add<sp/>individuals</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;John&quot;,<sp/>&quot;PERSON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Broccoli&quot;,<sp/>&quot;WEAPON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Stadium&quot;,<sp/>&quot;PLACE&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;SmartHypothesis&quot;,<sp/>&quot;HYPOTHESIS&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>REMEMBER<sp/>TO<sp/>UPDATE!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>INFORMATIONS<sp/>about<sp/>the<sp/>individuals</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>get<sp/>the<sp/>classes<sp/>an<sp/>individual<sp/>belongs<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>classes_of_john<sp/>=<sp/>armor.GetClassOfIndiv(<sp/>&quot;John&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>get<sp/>the<sp/>individuals<sp/>belonging<sp/>to<sp/>a<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>indiv_of_class_weapon<sp/>=<sp/>armor.GetIndivOfClass(<sp/>&quot;WEAPON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>check<sp/>if<sp/>an<sp/>individual<sp/>exists</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(<sp/>armor.ExistsIndiv(<sp/>&quot;Tower&quot;<sp/>)<sp/><sp/><sp/>==<sp/>false<sp/>)<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;&apos;Tower&apos;<sp/>not<sp/>defined.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(<sp/>armor.ExistsIndiv(<sp/>&quot;Stadium&quot;<sp/>)<sp/>==<sp/>true<sp/><sp/>)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;&apos;Stadium&apos;<sp/>exists!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_robocluedo_armor__examples_examples_cluedo_1autotoc_md117">
<title>ARMOR CLUEDO EXAMPLES – 2 – Working with properties</title>
<para><programlisting filename=".warning"><codeline><highlight class="normal">this<sp/>code<sp/>was<sp/>written<sp/>only<sp/>for<sp/>your<sp/>understanding.<sp/>Probably<sp/>it<sp/>won&apos;t<sp/>compile.</highlight></codeline>
</programlisting></para>
<sect2 id="md_robocluedo_armor__examples_examples_cluedo_1autotoc_md118">
<title>Working with properties</title>
<para>RCL requires not only adding individuals, but also working with the properties of the individuals. You can get all the available methods from this small example.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ros/ros.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_tools/armor_tools.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_tools_armor_cluedo.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirective.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirectiveReq.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirectiveRes.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;string&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(<sp/>int<sp/>argc,<sp/>char*<sp/>argv[]<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ros::init(<sp/>argc,<sp/>argv,<sp/>&quot;example_armor_cluedo_2&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>before<sp/>starting...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArmorCluedo<sp/>armor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.Init(<sp/>&quot;/root/ontologies/my_super_ontology.owl&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;John&quot;,<sp/>&quot;PERSON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Broccoli&quot;,<sp/>&quot;WEAPON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Stadium&quot;,<sp/>&quot;PLACE&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;SmartHypothesis&quot;,<sp/>&quot;HYPOTHESIS&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>REMEMBER<sp/>TO<sp/>UPDATE!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>ADD<sp/>SOME<sp/>PROPERTIES</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;where&quot;,<sp/>&quot;Smarthypothesis&quot;,<sp/>&quot;Stadium&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;who&quot;,<sp/>&quot;Smarthypothesis&quot;,<sp/>&quot;John&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;what&quot;,<sp/>&quot;Smarthypothesis&quot;,<sp/>&quot;Broccoli&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>REMEMBER<sp/>TO<sp/>UPDATE!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>CHECKINGS<sp/>ON<sp/>PROPERTIES</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>the<sp/>main<sp/>function<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>values<sp/>=<sp/>GetValuedOfIndiv(<sp/>&quot;where&quot;,<sp/>&quot;SmartHypothesis&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_robocluedo_armor__examples_examples_cluedo_1autotoc_md119">
<title>ARMOR TOOLS EXAMPLES – 3 – Reasoning Workflow</title>
<para><programlisting filename=".warning"><codeline><highlight class="normal">this<sp/>code<sp/>was<sp/>written<sp/>only<sp/>for<sp/>your<sp/>understanding.<sp/>Probably<sp/>it<sp/>won&apos;t<sp/>compile.</highlight></codeline>
</programlisting></para>
<sect2 id="md_robocluedo_armor__examples_examples_cluedo_1autotoc_md120">
<title>Reasoning Workflow</title>
<para>In this example I&apos;m going to show how the combination of the two classes <ref refid="class_armor_tools" kindref="compound">ArmorTools</ref> and <ref refid="class_armor_cluedo" kindref="compound">ArmorCluedo</ref> structure the reasoning process, which is at the base of how RCL works.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ros/ros.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_tools/armor_tools.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_tools_armor_cluedo.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirective.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirectiveReq.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;armor_msgs/ArmorDirectiveRes.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;string&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(<sp/>int<sp/>argc,<sp/>char*<sp/>argv[]<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ros::init(<sp/>argc,<sp/>argv,<sp/>&quot;example_armor_cluedo_3&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>before<sp/>starting<sp/>(see<sp/>the<sp/>previous<sp/>examples)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArmorCluedo<sp/>armor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.Init(<sp/>&quot;/root/ontologies/my_super_ontology.owl&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;John&quot;,<sp/>&quot;PERSON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Pippo&quot;,<sp/>&quot;PERSON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Broccoli&quot;,<sp/>&quot;WEAPON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;AK-47&quot;,<sp/>&quot;WEAPON&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Stadium&quot;,<sp/>&quot;PLACE&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;Bathroom&quot;,<sp/>&quot;PLACE&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;SmartHypothesis&quot;,<sp/>&quot;HYPOTHESIS&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;where&quot;,<sp/>&quot;Smarthypothesis&quot;,<sp/>&quot;Stadium&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;who&quot;,<sp/>&quot;Smarthypothesis&quot;,<sp/>&quot;John&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;what&quot;,<sp/>&quot;Smarthypothesis&quot;,<sp/>&quot;Broccoli&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>QUERYING<sp/>HYPOTHESES</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>find<sp/>the<sp/>tags<sp/>of<sp/>the<sp/>complete<sp/>hypotheses</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>in<sp/>this<sp/>example,<sp/>the<sp/>tag<sp/>&apos;SmartHypothesis&apos;<sp/>is<sp/>complete</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>complete_hypotheses<sp/>=<sp/>FindCompleteHypotheses(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>INCONSISTENT<sp/>HYPOTHESES</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>you<sp/>can<sp/>also<sp/>find<sp/>the<sp/>inconsistent<sp/>hypotheses</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>ATTENTION!<sp/>In<sp/>this<sp/>implementation<sp/>there&apos;s<sp/>a<sp/>difference<sp/>between</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;discarded&quot;<sp/>hypotheses<sp/>and<sp/>&quot;inconsistent&quot;<sp/>hypotheses,<sp/>due<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>some<sp/>issues<sp/>inside<sp/>aRMOR.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>in<sp/>any<sp/>case,<sp/>using<sp/>FindCompleteHypotheses()<sp/>is<sp/>recommended.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>inconsistent_hypotheses<sp/>=<sp/>FindCompleteHypotheses(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>let&apos;s<sp/>make<sp/>&apos;SmartHypothesis&apos;<sp/>inconsistent</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;where&quot;,<sp/>&quot;SmatHypothesis&quot;,<sp/>&quot;Bathroom&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>now<sp/>the<sp/>hypothesis<sp/>doesn&apos;t<sp/>appear<sp/>when<sp/>calling<sp/>FindCompleteHypotheses(<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>===<sp/>DISCARD<sp/>HYPOTHESES</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>the<sp/>implementation<sp/>of<sp/>ArmorCluedo<sp/>contains<sp/>a<sp/>workaroud,<sp/>due<sp/>to<sp/>an<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>issue<sp/>in<sp/>the<sp/>implementation<sp/>of<sp/>aRMOR<sp/>in<sp/>&quot;REMOVE&quot;<sp/>commands.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>let&apos;s<sp/>suppose<sp/>that<sp/>there&apos;s<sp/>another<sp/>hypothesis,<sp/>completed,<sp/>but</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>discarded<sp/>due<sp/>to<sp/>a<sp/>negative<sp/>answer<sp/>by<sp/>the<sp/>oracle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.AddIndiv(<sp/>&quot;AnotherSmartHypothesis&quot;,<sp/>&quot;HYPOTHESIS&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;where&quot;,<sp/>&quot;AnotherSmarthypothesis&quot;,<sp/>&quot;Stadium&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;who&quot;,<sp/>&quot;AnotherSmarthypothesis&quot;,<sp/>&quot;John&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.SetObjectProperty(<sp/>&quot;what&quot;,<sp/>&quot;AnotherSmarthypothesis&quot;,<sp/>&quot;Broccoli&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.UpdateOntology(<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>let&apos;s<sp/>discard<sp/>it<sp/>with<sp/>the<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>armor.RemoveHypothesis(<sp/>&quot;AnotherSmarthypothesis&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>THE<sp/>HYPOTHESIS<sp/>IS<sp/>STILL<sp/>PRESENT<sp/>IN<sp/>THE<sp/>ONTOLOGY!<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>but<sp/>now<sp/>it<sp/>is<sp/>tracked<sp/>as<sp/>deleted,<sp/>so<sp/>the<sp/>FindCompleteHypotheses()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>won&apos;t<sp/>return<sp/>it<sp/>later.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>you<sp/>cannot<sp/>de-discard<sp/>hypotheses.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
