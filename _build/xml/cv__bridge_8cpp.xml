<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cv__bridge_8cpp" kind="file" language="C++">
    <compoundname>cv_bridge.cpp</compoundname>
    <includes refid="conversion_8hpp" local="yes">boost/endian/conversion.hpp</includes>
    <includes local="no">map</includes>
    <includes local="no">boost/make_shared.hpp</includes>
    <includes local="no">boost/regex.hpp</includes>
    <includes local="no">opencv2/imgcodecs.hpp</includes>
    <includes local="no">opencv2/imgproc/imgproc.hpp</includes>
    <includes local="no">sensor_msgs/image_encodings.h</includes>
    <includes refid="cv__bridge_8h" local="no">cv_bridge/cv_bridge.h</includes>
    <includes refid="rgb__colors_8h" local="no">cv_bridge/rgb_colors.h</includes>
    <incdepgraph>
      <node id="17">
        <label>boost/predef/os/bsd/dragonfly.h</label>
        <link refid="dragonfly_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ros/static_assert.h</label>
      </node>
      <node id="4">
        <label>boost/predef/detail/endian_compat.h</label>
        <link refid="endian__compat_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>assert.h</label>
      </node>
      <node id="8">
        <label>boost/predef/detail/test.h</label>
        <link refid="test_8h"/>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp</label>
        <link refid="cv__bridge_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>boost/endian/detail/intrinsic.hpp</label>
        <link refid="intrinsic_8hpp"/>
      </node>
      <node id="22">
        <label>boost/predef/architecture.h</label>
      </node>
      <node id="7">
        <label>boost/predef/make.h</label>
        <link refid="make_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="41">
        <label>stdexcept</label>
      </node>
      <node id="39">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="36">
        <label>sensor_msgs/Image.h</label>
      </node>
      <node id="29">
        <label>map</label>
      </node>
      <node id="14">
        <label>boost/predef/os/ios.h</label>
        <link refid="ios_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>boost/predef/os/bsd/open.h</label>
        <link refid="open_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>boost/predef/detail/_cassert.h</label>
        <link refid="__cassert_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>boost/predef/os/bsd/net.h</label>
        <link refid="net_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>opencv2/imgcodecs.hpp</label>
      </node>
      <node id="43">
        <label>opencv2/core/matx.hpp</label>
      </node>
      <node id="23">
        <label>boost/cstdint.hpp</label>
      </node>
      <node id="34">
        <label>sensor_msgs/image_encodings.h</label>
      </node>
      <node id="40">
        <label>opencv2/imgproc/types_c.h</label>
      </node>
      <node id="33">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="2">
        <label>boost/endian/conversion.hpp</label>
        <link refid="conversion_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>cv_bridge/cv_bridge.h</label>
        <link refid="cv__bridge_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>boost/predef/os/macos.h</label>
        <link refid="macos_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>boost/predef/os/android.h</label>
        <link refid="android_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>boost/predef/os/bsd.h</label>
        <link refid="bsd_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>boost/predef/os/bsd/free.h</label>
        <link refid="free_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>boost/config.hpp</label>
      </node>
      <node id="9">
        <label>boost/predef/library/c/gnu.h</label>
        <link refid="gnu_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>boost/regex.hpp</label>
      </node>
      <node id="5">
        <label>boost/predef/other/endian.h</label>
        <link refid="endian_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>sensor_msgs/CompressedImage.h</label>
      </node>
      <node id="30">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="6">
        <label>boost/predef/version_number.h</label>
        <link refid="version__number_8h"/>
      </node>
      <node id="27">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>boost/core/scoped_enum.hpp</label>
        <link refid="scoped__enum_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>boost/predef/os/bsd/bsdi.h</label>
        <link refid="bsdi_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>cstring</label>
      </node>
      <node id="42">
        <label>cv_bridge/rgb_colors.h</label>
        <link refid="rgb__colors_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>boost/predef/library/c/_prefix.h</label>
        <link refid="__prefix_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecv__bridge">cv_bridge</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(c)<sp/>2011,<sp/>Willow<sp/>Garage,<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(c)<sp/>2015,<sp/>Tal<sp/>Regev.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Willow<sp/>Garage<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="32"><highlight class="comment">*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="34"><highlight class="comment">*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="conversion_8hpp" kindref="compound">boost/endian/conversion.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/make_shared.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/regex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/imgcodecs.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/imgproc/imgproc.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sensor_msgs/image_encodings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cv__bridge_8h" kindref="compound">cv_bridge/cv_bridge.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="rgb__colors_8h" kindref="compound">cv_bridge/rgb_colors.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">enc<sp/>=<sp/>sensor_msgs::image_encodings;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecv__bridge" kindref="compound">cv_bridge</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depthStrToInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>depth)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;8U&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;8S&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;16U&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;16S&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;32S&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;32F&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" kindref="member">getCvType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>the<sp/>most<sp/>common<sp/>encodings<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BGR8)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC3;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::MONO8)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::RGB8)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC3;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::MONO16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BGR16)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC3;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::RGB16)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC3;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BGRA8)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC4;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::RGBA8)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC4;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BGRA16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC4;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::RGBA16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC4;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>bayer,<sp/>return<sp/>one-channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_RGGB8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_BGGR8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_GBRG8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_GRBG8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_RGGB16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_BGGR16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_GBRG16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::BAYER_GRBG16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_16UC1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Miscellaneous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::YUV422)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_8UC2;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>all<sp/>the<sp/>generic<sp/>content<sp/>encodings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>boost::cmatch<sp/>m;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::regex_match(encoding.c_str(),<sp/>m,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::regex(</highlight><highlight class="stringliteral">&quot;(8U|8S|16U|16S|32S|32F|64F)C([0-9]+)&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_MAKETYPE(depthStrToInt(m[1].str()),<sp/>atoi(m[2].str().c_str()));</highlight></codeline>
<codeline lineno="105" refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::regex_match(encoding.c_str(),<sp/>m,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::regex(</highlight><highlight class="stringliteral">&quot;(8U|8S|16U|16S|32S|32F|64F)&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CV_MAKETYPE(depthStrToInt(m[1].str()),<sp/>1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>image<sp/>encoding<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Encoding<sp/>{<sp/>INVALID<sp/>=<sp/>-1,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref><sp/>=<sp/>0,<sp/>RGB,<sp/>BGR,<sp/>RGBA,<sp/>BGRA,<sp/>YUV422,<sp/>BAYER_RGGB,<sp/>BAYER_BGGR,<sp/>BAYER_GBRG,<sp/>BAYER_GRBG};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">Encoding<sp/>getEncoding(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::MONO8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::MONO16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::BGR8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::BGR16))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BGR;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::RGB8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::RGB16))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RGB;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::BGRA8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::BGRA16))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BGRA;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::RGBA8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::RGBA16))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RGBA;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>enc::YUV422)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>YUV422;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::BAYER_RGGB8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::BAYER_RGGB16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAYER_RGGB;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::BAYER_BGGR8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::BAYER_BGGR16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAYER_BGGR;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::BAYER_GBRG8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::BAYER_GBRG16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAYER_GBRG;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((encoding<sp/>==<sp/>enc::BAYER_GRBG8)<sp/>||<sp/>(encoding<sp/>==<sp/>enc::BAYER_GRBG16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAYER_GRBG;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>support<sp/>conversions<sp/>to/from<sp/>other<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INVALID;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SAME_FORMAT<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">std::map&lt;std::pair&lt;Encoding,<sp/>Encoding&gt;,<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>getConversionCodes()<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>std::map&lt;std::pair&lt;Encoding,<sp/>Encoding&gt;,<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>res;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;=5;<sp/>++i)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>res[std::pair&lt;Encoding,<sp/>Encoding&gt;(Encoding(i),Encoding(i))].push_back(SAME_FORMAT);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>res[std::make_pair(<ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>,<sp/>RGB)].push_back(cv::COLOR_GRAY2RGB);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>res[std::make_pair(<ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>,<sp/>BGR)].push_back(cv::COLOR_GRAY2BGR);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>res[std::make_pair(<ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>,<sp/>RGBA)].push_back(cv::COLOR_GRAY2RGBA);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>res[std::make_pair(<ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>,<sp/>BGRA)].push_back(cv::COLOR_GRAY2BGRA);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGB,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_RGB2GRAY);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGB,<sp/>BGR)].push_back(cv::COLOR_RGB2BGR);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGB,<sp/>RGBA)].push_back(cv::COLOR_RGB2RGBA);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGB,<sp/>BGRA)].push_back(cv::COLOR_RGB2BGRA);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGR,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_BGR2GRAY);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGR,<sp/>RGB)].push_back(cv::COLOR_BGR2RGB);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGR,<sp/>RGBA)].push_back(cv::COLOR_BGR2RGBA);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGR,<sp/>BGRA)].push_back(cv::COLOR_BGR2BGRA);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGBA,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_RGBA2GRAY);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGBA,<sp/>RGB)].push_back(cv::COLOR_RGBA2RGB);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGBA,<sp/>BGR)].push_back(cv::COLOR_RGBA2BGR);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>res[std::make_pair(RGBA,<sp/>BGRA)].push_back(cv::COLOR_RGBA2BGRA);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGRA,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_BGRA2GRAY);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGRA,<sp/>RGB)].push_back(cv::COLOR_BGRA2RGB);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGRA,<sp/>BGR)].push_back(cv::COLOR_BGRA2BGR);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>res[std::make_pair(BGRA,<sp/>RGBA)].push_back(cv::COLOR_BGRA2RGBA);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>res[std::make_pair(YUV422,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_YUV2GRAY_UYVY);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>res[std::make_pair(YUV422,<sp/>RGB)].push_back(cv::COLOR_YUV2RGB_UYVY);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>res[std::make_pair(YUV422,<sp/>BGR)].push_back(cv::COLOR_YUV2BGR_UYVY);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>res[std::make_pair(YUV422,<sp/>RGBA)].push_back(cv::COLOR_YUV2RGBA_UYVY);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>res[std::make_pair(YUV422,<sp/>BGRA)].push_back(cv::COLOR_YUV2BGRA_UYVY);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deal<sp/>with<sp/>Bayer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_RGGB,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_BayerBG2GRAY);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_RGGB,<sp/>RGB)].push_back(cv::COLOR_BayerBG2RGB);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_RGGB,<sp/>BGR)].push_back(cv::COLOR_BayerBG2BGR);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_BGGR,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_BayerRG2GRAY);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_BGGR,<sp/>RGB)].push_back(cv::COLOR_BayerRG2RGB);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_BGGR,<sp/>BGR)].push_back(cv::COLOR_BayerRG2BGR);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_GBRG,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_BayerGR2GRAY);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_GBRG,<sp/>RGB)].push_back(cv::COLOR_BayerGR2RGB);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_GBRG,<sp/>BGR)].push_back(cv::COLOR_BayerGR2BGR);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_GRBG,<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1aa6343a2cb9080c11afefb714570c63cca04e661921a463f3df840acbb03527c98" kindref="member">GRAY</ref>)].push_back(cv::COLOR_BayerGB2GRAY);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_GRBG,<sp/>RGB)].push_back(cv::COLOR_BayerGB2RGB);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>res[std::make_pair(BAYER_GRBG,<sp/>BGR)].push_back(cv::COLOR_BayerGB2BGR);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>getConversionCode(std::string<sp/>src_encoding,<sp/>std::string<sp/>dst_encoding)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>Encoding<sp/>src_encod<sp/>=<sp/>getEncoding(src_encoding);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>Encoding<sp/>dst_encod<sp/>=<sp/>getEncoding(dst_encoding);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_src_color_format<sp/>=<sp/>enc::isColor(src_encoding)<sp/>||<sp/>enc::isMono(src_encoding)<sp/>||</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc::isBayer(src_encoding)<sp/>||<sp/>(src_encoding<sp/>==<sp/>enc::YUV422);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dst_color_format<sp/>=<sp/>enc::isColor(dst_encoding)<sp/>||<sp/>enc::isMono(dst_encoding)<sp/>||</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc::isBayer(dst_encoding)<sp/>||<sp/>(dst_encoding<sp/>==<sp/>enc::YUV422);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_num_channels_the_same<sp/>=<sp/>(enc::numChannels(src_encoding)<sp/>==<sp/>enc::numChannels(dst_encoding));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>no<sp/>color<sp/>info<sp/>in<sp/>the<sp/>source,<sp/>we<sp/>can<sp/>only<sp/>convert<sp/>to<sp/>the<sp/>same<sp/>format<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>resolved<sp/>in<sp/>the<sp/>previous<sp/>condition.<sp/>Otherwise,<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_src_color_format)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_dst_color_format)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>src_encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is<sp/>not<sp/>a<sp/>color<sp/>format.<sp/>but<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>dst_encoding<sp/>+</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is.<sp/>The<sp/>conversion<sp/>does<sp/>not<sp/>make<sp/>sense&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_num_channels_the_same)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>src_encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>and<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>dst_encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>do<sp/>not<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;(1,<sp/>SAME_FORMAT);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>converting<sp/>from<sp/>a<sp/>color<sp/>type<sp/>to<sp/>a<sp/>non<sp/>color<sp/>type,<sp/>we<sp/>can<sp/>only<sp/>do<sp/>so<sp/>if<sp/>we<sp/>stick</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>number<sp/>of<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_dst_color_format)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_num_channels_the_same)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>src_encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is<sp/>a<sp/>color<sp/>format<sp/>but<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>dst_encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>so<sp/>they<sp/>must<sp/>have<sp/>the<sp/>same<sp/>OpenCV<sp/>type,<sp/>CV_8UC3,<sp/>CV16UC1<sp/>....&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;(1,<sp/>SAME_FORMAT);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>converting<sp/>from<sp/>a<sp/>color<sp/>type<sp/>to<sp/>another<sp/>type,<sp/>then<sp/>everything<sp/>is<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::pair&lt;Encoding,<sp/>Encoding&gt;,<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>CONVERSION_CODES<sp/>=<sp/>getConversionCodes();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::pair&lt;Encoding,<sp/>Encoding&gt;<sp/><ref refid="simulation_8cpp_1a0049a8a39c319bf1470f36c9e0f75abd" kindref="member">key</ref>(src_encod,<sp/>dst_encod);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>std::map&lt;std::pair&lt;Encoding,<sp/>Encoding&gt;,<sp/>std::vector&lt;int&gt;<sp/>&gt;::const_iterator<sp/>val<sp/>=<sp/>CONVERSION_CODES.find(<ref refid="simulation_8cpp_1a0049a8a39c319bf1470f36c9e0f75abd" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>==<sp/>CONVERSION_CODES.end())</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>conversion<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>src_encoding<sp/>+</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]<sp/>to<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>dst_encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>deal<sp/>with<sp/>depth<sp/>differences<sp/>if<sp/>the<sp/>colors<sp/>are<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>res<sp/>=<sp/>val-&gt;second;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((enc::bitDepth(src_encoding)<sp/>!=<sp/>enc::bitDepth(dst_encoding))<sp/>&amp;&amp;<sp/>(getEncoding(src_encoding)<sp/>!=<sp/>getEncoding(dst_encoding)))</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>res.push_back(SAME_FORMAT);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>ROS<sp/>Image<sp/>to<sp/>a<sp/>cv::Mat<sp/>by<sp/>sharing<sp/>the<sp/>data<sp/>or<sp/>changing<sp/>its<sp/>endianness<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">cv::Mat<sp/>matFromImage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::Image&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>source_type<sp/>=<sp/><ref refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" kindref="member">getCvType</ref>(<ref refid="namespacesource" kindref="compound">source</ref>.encoding);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_depth<sp/>=<sp/>enc::bitDepth(<ref refid="namespacesource" kindref="compound">source</ref>.encoding)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_channels<sp/>=<sp/>enc::numChannels(<ref refid="namespacesource" kindref="compound">source</ref>.encoding);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>.step<sp/>&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>.width<sp/>*<sp/>byte_depth<sp/>*<sp/>num_channels)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>is<sp/>wrongly<sp/>formed:<sp/>step<sp/>&lt;<sp/>width<sp/>*<sp/>byte_depth<sp/>*<sp/>num_channels<sp/><sp/>or<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>.step<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>!=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesource" kindref="compound">source</ref>.width<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>byte_depth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_channels;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(ss.str());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>.height<sp/>*<sp/><ref refid="namespacesource" kindref="compound">source</ref>.step<sp/>!=<sp/><ref refid="namespacesource" kindref="compound">source</ref>.data.size())</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>is<sp/>wrongly<sp/>formed:<sp/>height<sp/>*<sp/>step<sp/>!=<sp/>size<sp/><sp/>or<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>.height<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>*<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesource" kindref="compound">source</ref>.step<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>!=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>.data.size();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(ss.str());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>endianness<sp/>is<sp/>the<sp/>same<sp/>as<sp/>locally,<sp/>share<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>mat(<ref refid="namespacesource" kindref="compound">source</ref>.height,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.width,<sp/>source_type,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">uchar*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="namespacesource" kindref="compound">source</ref>.data[0]),<sp/><ref refid="namespacesource" kindref="compound">source</ref>.step);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boost::endian::order::native<sp/>==<sp/>boost::endian::order::big<sp/>&amp;&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>.is_bigendian)<sp/>||</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(boost::endian::order::native<sp/>==<sp/>boost::endian::order::little<sp/>&amp;&amp;<sp/>!<ref refid="namespacesource" kindref="compound">source</ref>.is_bigendian)<sp/>||</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_depth<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>reinterpret<sp/>the<sp/>data<sp/>as<sp/>bytes<sp/>and<sp/>switch<sp/>the<sp/>channels<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>mat<sp/>=<sp/>cv::Mat(<ref refid="namespacesource" kindref="compound">source</ref>.height,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.width,<sp/>CV_MAKETYPE(CV_8U,<sp/>num_channels*byte_depth),</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">uchar*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="namespacesource" kindref="compound">source</ref>.data[0]),<sp/><ref refid="namespacesource" kindref="compound">source</ref>.step);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>mat_swap(<ref refid="namespacesource" kindref="compound">source</ref>.height,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.width,<sp/>mat.type());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>fromTo;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>fromTo.reserve(num_channels*byte_depth);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_channels;<sp/>++i)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>byte_depth;<sp/>++j)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fromTo.push_back(byte_depth*i<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fromTo.push_back(byte_depth*i<sp/>+<sp/>byte_depth<sp/>-<sp/>1<sp/>-<sp/>j);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>cv::mixChannels(std::vector&lt;cv::Mat&gt;(1,<sp/>mat),<sp/>std::vector&lt;cv::Mat&gt;(1,<sp/>mat_swap),<sp/>fromTo);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpret<sp/>mat_swap<sp/>back<sp/>as<sp/>the<sp/>proper<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>mat_swap.reshape(num_channels);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat_swap;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal,<sp/>used<sp/>by<sp/>toCvCopy<sp/>and<sp/>cvtColor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>toCvCopyImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Header&amp;<sp/>src_header,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src_encoding,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dst_encoding)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>ptr<sp/>=<sp/>boost::make_shared&lt;CvImage&gt;();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>ptr-&gt;header<sp/>=<sp/>src_header;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>to<sp/>new<sp/>buffer<sp/>if<sp/>same<sp/>encoding<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_encoding.empty()<sp/>||<sp/>dst_encoding<sp/>==<sp/>src_encoding)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;encoding<sp/>=<sp/>src_encoding;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesource" kindref="compound">source</ref>.copyTo(ptr-&gt;image);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>source<sp/>data<sp/>to<sp/>the<sp/>desired<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>conversion_codes<sp/>=<sp/>getConversionCode(src_encoding,<sp/>dst_encoding);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>image1<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>image2;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;conversion_codes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>conversion_code<sp/>=<sp/>conversion_codes[i];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conversion_code<sp/>==<sp/>SAME_FORMAT)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>number<sp/>of<sp/>channels,<sp/>but<sp/>different<sp/>bit<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_depth<sp/>=<sp/>enc::bitDepth(src_encoding);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dst_depth<sp/>=<sp/>enc::bitDepth(dst_encoding);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>number<sp/>of<sp/>channels<sp/>for<sp/>now<sp/>but<sp/>changed<sp/>to<sp/>the<sp/>final<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image2_type<sp/>=<sp/>CV_MAKETYPE(CV_MAT_DEPTH(<ref refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" kindref="member">getCvType</ref>(dst_encoding)),<sp/>image1.channels());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>scaling<sp/>between<sp/>CV_8U<sp/>[0,255]<sp/>and<sp/>CV_16U<sp/>[0,65535]<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_depth<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>dst_depth<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image1.convertTo(image2,<sp/>image2_type,<sp/>65535.<sp/>/<sp/>255.);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_depth<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>dst_depth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image1.convertTo(image2,<sp/>image2_type,<sp/>255.<sp/>/<sp/>65535.);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image1.convertTo(image2,<sp/>image2_type);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>color<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cv::cvtColor</ref>(image1,<sp/>image2,<sp/>conversion_code);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image1<sp/>=<sp/>image2;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;image<sp/>=<sp/>image2;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;encoding<sp/>=<sp/>dst_encoding;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">sensor_msgs::ImagePtr<sp/><ref refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" kindref="member">CvImage::toImageMsg</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="356"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>sensor_msgs::ImagePtr<sp/>ptr<sp/>=<sp/>boost::make_shared&lt;sensor_msgs::Image&gt;();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" kindref="member">toImageMsg</ref>(*ptr);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" kindref="member">CvImage::toImageMsg</ref>(sensor_msgs::Image&amp;<sp/>ros_image)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="363"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>ros_image.header<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1ada0ff87a844dbd6f25a87bf2fee5742f" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>ros_image.height<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.rows;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>ros_image.width<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.cols;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>ros_image.encoding<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>ros_image.is_bigendian<sp/>=<sp/>(boost::endian::order::native<sp/>==<sp/>boost::endian::order::big);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>ros_image.step<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.cols<sp/>*<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.elemSize();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>ros_image.step<sp/>*<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.rows;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>ros_image.data.resize(size);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.isContinuous())</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;ros_image.data[0]),<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.data,<sp/>size);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>by<sp/>row<sp/>by<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>uchar*<sp/>ros_data_ptr<sp/>=<sp/>(uchar*)(&amp;ros_image.data[0]);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>uchar*<sp/>cv_data_ptr<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.data;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.rows;<sp/>++i)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ros_data_ptr,<sp/>cv_data_ptr,<sp/>ros_image.step);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros_data_ptr<sp/>+=<sp/>ros_image.step;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv_data_ptr<sp/>+=<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>.step;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388" refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deep<sp/>copy<sp/>data,<sp/>returnee<sp/>is<sp/>mutable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::ImageConstPtr&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395" refid="classcv__bridge_1_1_cv_image_1a41308084978b708a910c25e0f05847a9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(*<ref refid="namespacesource" kindref="compound">source</ref>,<sp/>encoding);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::Image&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>matrix<sp/>pointing<sp/>to<sp/>source<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toCvCopyImpl(matFromImage(<ref refid="namespacesource" kindref="compound">source</ref>),<sp/><ref refid="namespacesource" kindref="compound">source</ref>.header,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.encoding,<sp/>encoding);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Share<sp/>const<sp/>data,<sp/>returnee<sp/>is<sp/>immutable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref><sp/><ref refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" kindref="member">toCvShare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::ImageConstPtr&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" kindref="member">toCvShare</ref>(*<ref refid="namespacesource" kindref="compound">source</ref>,<sp/><ref refid="namespacesource" kindref="compound">source</ref>,<sp/>encoding);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref><sp/><ref refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" kindref="member">toCvShare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::Image&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::shared_ptr&lt;void<sp/>const&gt;&amp;<sp/>tracked_object,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>encoding<sp/>different<sp/>or<sp/>the<sp/>endianness<sp/>different,<sp/>you<sp/>have<sp/>to<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!encoding.empty()<sp/>&amp;&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>.encoding<sp/>!=<sp/>encoding)<sp/>||<sp/>(<ref refid="namespacesource" kindref="compound">source</ref>.is_bigendian<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(boost::endian::order::native<sp/>!=<sp/>boost::endian::order::big)))</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(<ref refid="namespacesource" kindref="compound">source</ref>,<sp/>encoding);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>ptr<sp/>=<sp/>boost::make_shared&lt;CvImage&gt;();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>ptr-&gt;header<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>.header;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>ptr-&gt;encoding<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>.encoding;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>ptr-&gt;tracked_object_<sp/>=<sp/>tracked_object;</highlight></codeline>
<codeline lineno="425" refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" refkind="member"><highlight class="normal"><sp/><sp/>ptr-&gt;image<sp/>=<sp/>matFromImage(<ref refid="namespacesource" kindref="compound">source</ref>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cvtColor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref>&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="431" refid="namespacecv__bridge_1a49fedf7e642d505557b866f6e307a034" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toCvCopyImpl(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image,<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;header,<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding,<sp/>encoding);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">sensor_msgs::CompressedImagePtr<sp/><ref refid="classcv__bridge_1_1_cv_image_1a39163ba516149204027cd5f237d69f63" kindref="member">CvImage::toCompressedImageMsg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bf" kindref="member">Format</ref><sp/>dst_format)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="438"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="439" refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" refkind="member"><highlight class="normal"><sp/><sp/>sensor_msgs::CompressedImagePtr<sp/>ptr<sp/>=<sp/>boost::make_shared&lt;sensor_msgs::CompressedImage&gt;();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="classcv__bridge_1_1_cv_image_1a39163ba516149204027cd5f237d69f63" kindref="member">toCompressedImageMsg</ref>(*ptr,dst_format);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">std::string<sp/><ref refid="namespacecv__bridge_1a4efa938de96a8e11269645d8a8fa6f72" kindref="member">getFormat</ref>(<ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bf" kindref="member">Format</ref><sp/>format)<sp/>{</highlight></codeline>
<codeline lineno="445" refid="namespacecv__bridge_1a432a8aaec1dcec9f1955888dda45cf61" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(format)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfaf2228b3b50250063d0256e3a40032f55" kindref="member">DIB</ref>:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dib&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfad3e5f24dc1fc23acfff20ee230459558" kindref="member">BMP</ref>:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa45436b05357bb96126834efae66c50e8" kindref="member">JPG</ref>:</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jpg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfadc1cd099bb82f23f7b591f52411da82f" kindref="member">JPEG</ref>:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jpeg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa686f9486d4e5fe72f6abf4002c276934" kindref="member">JPE</ref>:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jpe&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa5708345c1b3ef1aad7b58afbc740116e" kindref="member">JP2</ref>:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jp2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa0a36eb1d5d593f0c0c5b298ae353ab94" kindref="member">PNG</ref>:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;png&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa2da0f7870b7ac7950c08ff8243c28757" kindref="member">PBM</ref>:</highlight></codeline>
<codeline lineno="462" refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;pbm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa6aaa352f4c8b36d94f5ad248039e838a" kindref="member">PGM</ref>:</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;pgm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfaf9dc454f916fd886aa9157ca353aa80f" kindref="member">PPM</ref>:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ppm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa2239eb1bb1fe372887900174cfd90620" kindref="member">RAS</ref>:</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ras&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa55079b5ac03221deb5d4bac1ed17996e" kindref="member">SR</ref>:</highlight></codeline>
<codeline lineno="470" refid="classcv__bridge_1_1_cv_image_1a39163ba516149204027cd5f237d69f63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;sr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfafbe159afef10463d25bc0042af05c969" kindref="member">TIF</ref>:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tif&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa870473c7ea88913e2eb0f065ee00f8b6" kindref="member">TIFF</ref>:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tiff&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="namespacecv__bridge_1a4efa938de96a8e11269645d8a8fa6f72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classcv__bridge_1_1_exception" kindref="compound">Exception</ref>(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>image<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcv__bridge_1_1_cv_image_1a39163ba516149204027cd5f237d69f63" kindref="member">CvImage::toCompressedImageMsg</ref>(sensor_msgs::CompressedImage&amp;<sp/>ros_image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bf" kindref="member">Format</ref><sp/>dst_format)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="481"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>ros_image.header<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image_1ada0ff87a844dbd6f25a87bf2fee5742f" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>cv::Mat<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref><sp/>==<sp/>enc::BGR8<sp/>||<sp/><ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref><sp/>==<sp/>enc::BGRA8<sp/><sp/>||<sp/><ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref><sp/>==<sp/>enc::MONO8<sp/>||<sp/><ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref><sp/>==<sp/>enc::MONO16)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref><sp/>=<sp/>this-&gt;<ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>tempThis<sp/>=<sp/>boost::make_shared&lt;CvImage&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>temp;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc::hasAlpha(<ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref>))</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cvtColor</ref>(tempThis,<sp/>enc::BGRA8);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cvtColor</ref>(tempThis,<sp/>enc::BGR8);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref><sp/>=<sp/>temp-&gt;image;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>std::string<sp/>format<sp/>=<sp/><ref refid="namespacecv__bridge_1a4efa938de96a8e11269645d8a8fa6f72" kindref="member">getFormat</ref>(dst_format);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>ros_image.format<sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>cv::imencode(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>format,<sp/><ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref>,<sp/>ros_image.data);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deep<sp/>copy<sp/>data,<sp/>returnee<sp/>is<sp/>mutable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::CompressedImageConstPtr&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(*<ref refid="namespacesource" kindref="compound">source</ref>,<sp/>encoding);</highlight></codeline>
<codeline lineno="513" refid="classcv__bridge_1_1_cv_image_1a8a0ac47a3cc912ae6db127cb4eadec1d" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">toCvCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::CompressedImage&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>matrix<sp/>pointing<sp/>to<sp/>source<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat_&lt;uchar&gt;<sp/>in(1,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.data.size(),<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">uchar*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="namespacesource" kindref="compound">source</ref>.data[0]));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loads<sp/>as<sp/>BGR<sp/>or<sp/>BGRA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>rgb_a<sp/>=<sp/>cv::imdecode(in,<sp/>cv::IMREAD_UNCHANGED);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>!=<sp/>enc::MONO16)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rgb_a.channels())</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toCvCopyImpl(rgb_a,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.header,<sp/>enc::BGRA8,<sp/>encoding);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toCvCopyImpl(rgb_a,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.header,<sp/>enc::BGR8,<sp/>encoding);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toCvCopyImpl(rgb_a,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.header,<sp/>enc::MONO8,<sp/>encoding);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref>();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toCvCopyImpl(rgb_a,<sp/><ref refid="namespacesource" kindref="compound">source</ref>.header,<sp/>enc::MONO16,<sp/>encoding);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542" refid="namespacecv__bridge_1a951356ef916dc550d1efa445e26eb3f5" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref><sp/><ref refid="namespacecv__bridge_1ac82f0aba256a6eac48cf4378a8990268" kindref="member">cvtColorForDisplay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref>&amp;<sp/><ref refid="namespacesource" kindref="compound">source</ref>,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encoding_out,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcv__bridge_1_1_cvt_color_for_display_options" kindref="compound">CvtColorForDisplayOptions</ref><sp/><ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_image_value<sp/>=<sp/><ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>.min_image_value;</highlight></codeline>
<codeline lineno="548" refid="namespacecv__bridge_1afc46b776280eccf3cd0d55adf0b944de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_image_value<sp/>=<sp/><ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>.max_image_value;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacesource" kindref="compound">source</ref>)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classcv__bridge_1_1_exception" kindref="compound">Exception</ref>(</highlight><highlight class="stringliteral">&quot;cv_bridge.cvtColorForDisplay()<sp/>called<sp/>with<sp/>empty<sp/>image.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>figure<sp/>out<sp/>what<sp/>to<sp/>do<sp/>with<sp/>the<sp/>empty<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>std::string<sp/>encoding<sp/>=<sp/>encoding_out;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding.empty())</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>decide<sp/>upon<sp/>an<sp/>output<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc::numChannels(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/>enc::TYPE_32SC1)<sp/>||</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enc::bitDepth(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>==<sp/>8)<sp/>||</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enc::bitDepth(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>==<sp/>16)<sp/>||</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enc::bitDepth(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>==<sp/>32))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding<sp/>=<sp/>enc::BGR8;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>depth<sp/>of<sp/>the<sp/>source<sp/>encoding<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>encoding);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>choose<sp/>BGR<sp/>by<sp/>default<sp/>here<sp/>as<sp/>we<sp/>assume<sp/>people<sp/>will<sp/>use<sp/>OpenCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((enc::bitDepth(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>==<sp/>8)<sp/>||</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enc::bitDepth(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>==<sp/>16))</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoding<sp/>=<sp/>enc::BGR8;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="namespacecv__bridge_1ac82f0aba256a6eac48cf4378a8990268" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>depth<sp/>of<sp/>the<sp/>source<sp/>encoding<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>encoding);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>could<sp/>have<sp/>cv_bridge<sp/>exception<sp/>or<sp/>std_runtime_error<sp/>from<sp/>sensor_msgs::image_codings<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::runtime_error&amp;<sp/>e)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;cv_bridge.cvtColorForDisplay()<sp/>output<sp/>encoding<sp/>is<sp/>empty<sp/>and<sp/>cannot<sp/>be<sp/>guessed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!enc::isColor(encoding_out)<sp/>&amp;&amp;<sp/>!enc::isMono(encoding_out))<sp/>||</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enc::bitDepth(encoding)<sp/>!=<sp/>8))</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;cv_bridge.cvtColorForDisplay()<sp/>does<sp/>not<sp/>have<sp/>an<sp/>output<sp/>encoding<sp/>that<sp/>is<sp/>color<sp/>or<sp/>mono,<sp/>and<sp/>has<sp/>is<sp/>bit<sp/>in<sp/>depth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>label<sp/>to<sp/>bgr<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encoding<sp/>==<sp/>sensor_msgs::image_encodings::BGR8<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/>enc::TYPE_32SC1)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>result(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CvImage());</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;header<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;header;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;encoding<sp/>=<sp/>encoding;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;image<sp/>=<sp/>cv::Mat(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.rows,<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.cols,<sp/>CV_8UC3);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.rows;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.cols;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.at&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(j,<sp/>i);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label<sp/>==<sp/><ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>.bg_label)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>background<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;image.at&lt;cv::Vec3b&gt;(j,<sp/>i)<sp/>=<sp/>cv::Vec3b(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Vec3d<sp/>rgb<sp/>=<sp/><ref refid="namespacecv__bridge_1_1rgb__colors_1ae0042fb7032cf0b5a4770f7d16c6cc90" kindref="member">rgb_colors::getRGBColor</ref>(label);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>image<sp/>should<sp/>be<sp/>BGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;image.at&lt;cv::Vec3b&gt;(j,<sp/>i)<sp/>=<sp/>cv::Vec3b(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(rgb[2]<sp/>*<sp/>255),<sp/>int(rgb[1]<sp/>*<sp/>255),<sp/>int(rgb[0]<sp/>*<sp/>255));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>scaling<sp/>if<sp/>asked<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>.do_dynamic_scaling)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::minMaxLoc(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image,<sp/>&amp;min_image_value,<sp/>&amp;max_image_value);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_image_value<sp/>==<sp/>max_image_value)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>result(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CvImage());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;header<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;header;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;encoding<sp/>=<sp/>encoding;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc::bitDepth(encoding)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;image<sp/>=<sp/>cv::Mat(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.size(),<sp/>CV_8UC1);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;image.setTo(255./2.);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;image<sp/>=<sp/>cv::Mat(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.size(),<sp/>CV_8UC3);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;image.setTo(cv::Scalar(1.,<sp/>1.,<sp/>1.)*255./2.);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_image_value<sp/>!=<sp/>max_image_value)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc::numChannels(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;cv_bridge.cvtColorForDisplay()<sp/>scaling<sp/>for<sp/>images<sp/>with<sp/>more<sp/>than<sp/>one<sp/>channel<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>img_scaled(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CvImage());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>img_scaled-&gt;header<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;header;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>.colormap<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>img_scaled-&gt;encoding<sp/>=<sp/>enc::MONO8;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image-min_image_value).convertTo(img_scaled-&gt;image,<sp/>CV_8UC1,<sp/>255.0<sp/>/</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(max_image_value<sp/>-<sp/>min_image_value));</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>img_scaled-&gt;encoding<sp/>=<sp/>enc::BGR8;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;image-min_image_value).convertTo(img_scaled-&gt;image,<sp/>CV_8UC3,<sp/>255.0<sp/>/</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(max_image_value<sp/>-<sp/>min_image_value));</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::applyColorMap(img_scaled-&gt;image,<sp/>img_scaled-&gt;image,<sp/><ref refid="namespacerosfacedetect_1a70f49839854fb47c872ee9769de83563" kindref="member">options</ref>.colormap);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>black<sp/>color<sp/>to<sp/>the<sp/>nan<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/>enc::TYPE_32FC1)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.rows;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.cols;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float_value<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(j,<sp/>i);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(float_value))<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img_scaled-&gt;image.at&lt;cv::Vec3b&gt;(j,<sp/>i)<sp/>=<sp/>cv::Vec3b(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cvtColor</ref>(img_scaled,<sp/>encoding);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>color<sp/>conversion<sp/>is<sp/>possible,<sp/>we<sp/>must<sp/>&quot;guess&quot;<sp/>the<sp/>input<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref><sp/>source_typed(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CvImage());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>source_typed-&gt;image<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;image;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>source_typed-&gt;header<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;header;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>the<sp/>OpenCV<sp/>format,<sp/>if<sp/>we<sp/>have<sp/>1,3<sp/>or<sp/>4<sp/>channels,<sp/>we<sp/>are<sp/>most<sp/>likely<sp/>in<sp/>mono,<sp/>BGR<sp/>or<sp/>BGRA<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CV_8UC1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/>enc::MONO8;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;16UC1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/>enc::MONO16;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CV_8UC3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/>enc::BGR8;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CV_8UC4&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/>enc::BGRA8;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CV_16UC3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/>enc::BGR8;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CV_16UC4&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>source_typed-&gt;encoding<sp/>=<sp/>enc::BGRA8;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>conversion<sp/>is<sp/>needed,<sp/>don&apos;t<sp/>convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source_typed-&gt;encoding<sp/>==<sp/>encoding)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesource" kindref="compound">source</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>the<sp/>output<sp/>is<sp/>a<sp/>proper<sp/>color<sp/>format,<sp/>try<sp/>to<sp/>see<sp/>if<sp/>any<sp/>conversion<sp/>is<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cvtColor</ref>(source_typed,<sp/>encoding);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classcv__bridge_1_1_exception" kindref="compound">cv_bridge::Exception</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;cv_bridge.cvtColorForDisplay()<sp/>while<sp/>trying<sp/>to<sp/>convert<sp/>image<sp/>from<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacesource" kindref="compound">source</ref>-&gt;encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>to<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>encoding<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>an<sp/>exception<sp/>was<sp/>thrown<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>e.what()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>cv_bridge</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp"/>
  </compounddef>
</doxygen>
