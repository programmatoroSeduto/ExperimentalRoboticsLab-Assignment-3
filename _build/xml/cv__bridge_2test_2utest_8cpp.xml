<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cv__bridge_2test_2utest_8cpp" kind="file" language="C++">
    <compoundname>utest.cpp</compoundname>
    <includes refid="cv__bridge_8h" local="yes">cv_bridge/cv_bridge.h</includes>
    <includes local="no">sensor_msgs/image_encodings.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp</label>
        <link refid="cv__bridge_2test_2utest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ros/static_assert.h</label>
      </node>
      <node id="10">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="3">
        <label>sensor_msgs/Image.h</label>
      </node>
      <node id="5">
        <label>sensor_msgs/image_encodings.h</label>
      </node>
      <node id="9">
        <label>opencv2/imgproc/types_c.h</label>
      </node>
      <node id="8">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="11">
        <label>gtest/gtest.h</label>
      </node>
      <node id="2">
        <label>cv_bridge/cv_bridge.h</label>
        <link refid="cv__bridge_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sensor_msgs/CompressedImage.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CvBridgeTest, NonContinuous)</argsstring>
        <name>TEST</name>
        <param>
          <type>CvBridgeTest</type>
        </param>
        <param>
          <type>NonContinuous</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" line="7" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" bodystart="7" bodyend="21"/>
        <references refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" compoundref="cv__bridge_8h" startline="113">cv_bridge::CvImage::encoding</references>
        <references refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" compoundref="cv__bridge_8h" startline="114">cv_bridge::CvImage::image</references>
        <references refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" compoundref="cv__bridge_8cpp" startline="388" endline="393">cv_bridge::CvImage::toImageMsg</references>
      </memberdef>
      <memberdef kind="function" id="cv__bridge_2test_2utest_8cpp_1a543f99ea646d57d61b10bf9e0eda3d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CvBridgeTest, ChannelOrder)</argsstring>
        <name>TEST</name>
        <param>
          <type>CvBridgeTest</type>
        </param>
        <param>
          <type>ChannelOrder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" line="23" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" bodystart="23" bodyend="45"/>
        <references refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" compoundref="cv__bridge_8cpp" startline="388" endline="393">cv_bridge::CvImage::toImageMsg</references>
        <references refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" compoundref="cv__bridge_8cpp" startline="439" endline="443">cv_bridge::toCvShare</references>
        <references refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" compoundref="cv__bridge_8cpp" startline="462" endline="466">cv_bridge::cvtColor</references>
        <references refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" compoundref="cv__bridge_8cpp" startline="105" endline="146">cv_bridge::getCvType</references>
      </memberdef>
      <memberdef kind="function" id="cv__bridge_2test_2utest_8cpp_1ab6bf252a106e8e7fd3ac3eed4c901bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CvBridgeTest, initialization)</argsstring>
        <name>TEST</name>
        <param>
          <type>CvBridgeTest</type>
        </param>
        <param>
          <type>initialization</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" line="47" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" bodystart="47" bodyend="71"/>
        <references refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" compoundref="cv__bridge_8cpp" startline="425" endline="429">cv_bridge::toCvCopy</references>
      </memberdef>
      <memberdef kind="function" id="cv__bridge_2test_2utest_8cpp_1a5dd05e4f4690e1b6ac14d399e6b5f39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CvBridgeTest, imageMessageStep)</argsstring>
        <name>TEST</name>
        <param>
          <type>CvBridgeTest</type>
        </param>
        <param>
          <type>imageMessageStep</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" line="73" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" bodystart="73" bodyend="106"/>
        <references refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" compoundref="cv__bridge_8cpp" startline="425" endline="429">cv_bridge::toCvCopy</references>
      </memberdef>
      <memberdef kind="function" id="cv__bridge_2test_2utest_8cpp_1aed8f89ad5e469f496709d675ae2118a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CvBridgeTest, imageMessageConversion)</argsstring>
        <name>TEST</name>
        <param>
          <type>CvBridgeTest</type>
        </param>
        <param>
          <type>imageMessageConversion</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" line="108" column="1" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" bodystart="108" bodyend="135"/>
        <references refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" compoundref="cv__bridge_8cpp" startline="425" endline="429">cv_bridge::toCvCopy</references>
      </memberdef>
      <memberdef kind="function" id="cv__bridge_2test_2utest_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" line="137" column="5" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp" bodystart="137" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cv__bridge_8h" kindref="compound">cv_bridge/cv_bridge.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sensor_msgs/image_encodings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>conversion<sp/>of<sp/>non-continuous<sp/>cv::Mat.<sp/>#5206</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" refkind="member"><highlight class="normal"><ref refid="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" kindref="member">TEST</ref>(CvBridgeTest,<sp/>NonContinuous)</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>full<sp/>=<sp/>cv::Mat::eye(8,<sp/>8,<sp/>CV_16U);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>partial<sp/>=<sp/>full.colRange(2,<sp/>5);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><ref refid="classcv__bridge_1_1_cv_image" kindref="compound">cv_bridge::CvImage</ref><sp/>cvi;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>cvi.<ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref><sp/>=<sp/>sensor_msgs::image_encodings::MONO16;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>cvi.<ref refid="classcv__bridge_1_1_cv_image_1a8b0cc1c26637754fbccb91b4fc086526" kindref="member">image</ref><sp/>=<sp/>partial;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>sensor_msgs::ImagePtr<sp/>msg<sp/>=<sp/>cvi.<ref refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" kindref="member">toImageMsg</ref>();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>EXPECT_EQ(msg-&gt;height,<sp/>8);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>EXPECT_EQ(msg-&gt;width,<sp/>3);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>EXPECT_EQ(msg-&gt;encoding,<sp/>cvi.<ref refid="classcv__bridge_1_1_cv_image_1ac3e39d95b3691df0b08496267517f2db" kindref="member">encoding</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>EXPECT_EQ(msg-&gt;step,<sp/>6);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="cv__bridge_2test_2utest_8cpp_1a543f99ea646d57d61b10bf9e0eda3d38" refkind="member"><highlight class="normal"><ref refid="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" kindref="member">TEST</ref>(CvBridgeTest,<sp/>ChannelOrder)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>cv::Mat_&lt;uint16_t&gt;<sp/>mat(200,<sp/>200);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>mat.setTo(cv::Scalar(1000,0,0,0));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>sensor_msgs::ImagePtr<sp/>image(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>sensor_msgs::Image());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>image<sp/>=<sp/><ref refid="classcv__bridge_1_1_cv_image" kindref="compound">cv_bridge::CvImage</ref>(image-&gt;header,<sp/>sensor_msgs::image_encodings::MONO16,<sp/>mat).<ref refid="classcv__bridge_1_1_cv_image_1a943bd351cfeba6e67a0b961e3b4a1ba9" kindref="member">toImageMsg</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">cv_bridge::CvImageConstPtr</ref><sp/>cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" kindref="member">cv_bridge::toCvShare</ref>(image);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">cv_bridge::CvImagePtr</ref><sp/>res<sp/>=<sp/><ref refid="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" kindref="member">cv_bridge::cvtColor</ref>(cv_ptr,<sp/>sensor_msgs::image_encodings::BGR8);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>EXPECT_EQ(res-&gt;encoding,<sp/>sensor_msgs::image_encodings::BGR8);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>EXPECT_EQ(res-&gt;image.type(),<sp/><ref refid="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" kindref="member">cv_bridge::getCvType</ref>(res-&gt;encoding));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>EXPECT_EQ(res-&gt;image.channels(),<sp/>sensor_msgs::image_encodings::numChannels(res-&gt;encoding));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_EQ(res-&gt;image.depth(),<sp/>CV_8U);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>matrix<sp/>should<sp/>be<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>cv::Mat_&lt;cv::Vec3b&gt;<sp/>gt(200,<sp/>200);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>gt.setTo(cv::Scalar(1,<sp/>1,<sp/>1)*1000.*255./65535.);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>ASSERT_EQ(res-&gt;image.type(),<sp/>gt.type());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>EXPECT_EQ(cv::norm(res-&gt;image,<sp/>gt,<sp/>cv::NORM_INF),<sp/>0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="cv__bridge_2test_2utest_8cpp_1ab6bf252a106e8e7fd3ac3eed4c901bbd" refkind="member"><highlight class="normal"><ref refid="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" kindref="member">TEST</ref>(CvBridgeTest,<sp/>initialization)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>sensor_msgs::Image<sp/>image;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">cv_bridge::CvImagePtr</ref><sp/>cv_ptr;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>image.encoding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bgr8&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>image.height<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>image.width<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(image,<sp/></highlight><highlight class="stringliteral">&quot;mono8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Before<sp/>the<sp/>fix,<sp/>it<sp/>would<sp/>never<sp/>get<sp/>here,<sp/>as<sp/>it<sp/>would<sp/>segfault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classcv__bridge_1_1_exception" kindref="compound">cv_bridge::Exception</ref>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>some<sp/>normal<sp/>images<sp/>with<sp/>different<sp/>ratios</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>100;<sp/>height<sp/>&lt;=<sp/>300;<sp/>++height)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>image.encoding<sp/>=<sp/>sensor_msgs::image_encodings::RGB8;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>image.step<sp/>=<sp/>image.width*3;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>image.data.resize(image.height*image.step);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(image,<sp/></highlight><highlight class="stringliteral">&quot;mono8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="cv__bridge_2test_2utest_8cpp_1a5dd05e4f4690e1b6ac14d399e6b5f39c" refkind="member"><highlight class="normal"><ref refid="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" kindref="member">TEST</ref>(CvBridgeTest,<sp/>imageMessageStep)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>image<sp/>step<sp/>is<sp/>padded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>sensor_msgs::Image<sp/>image;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">cv_bridge::CvImagePtr</ref><sp/>cv_ptr;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>image.encoding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;mono8&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>image.height<sp/>=<sp/>220;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>image.width<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>image.is_bigendian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>image.step<sp/>=<sp/>208;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>image.data.resize(image.height*image.step);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ASSERT_NO_THROW(cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(image,<sp/></highlight><highlight class="stringliteral">&quot;mono8&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>ASSERT_EQ(220,<sp/>cv_ptr-&gt;image.rows);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>ASSERT_EQ(200,<sp/>cv_ptr-&gt;image.cols);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//OpenCV<sp/>copyTo<sp/>argument<sp/>removes<sp/>the<sp/>stride</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>ASSERT_EQ(200,<sp/>cv_ptr-&gt;image.step[0]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Test<sp/>2:<sp/>image<sp/>step<sp/>is<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>image.step<sp/>=<sp/>199;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>ASSERT_THROW(cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(image,<sp/></highlight><highlight class="stringliteral">&quot;mono8&quot;</highlight><highlight class="normal">),<sp/><ref refid="classcv__bridge_1_1_exception" kindref="compound">cv_bridge::Exception</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Test<sp/>3:<sp/>image<sp/>step<sp/>==<sp/>image.width<sp/>*<sp/>element<sp/>size<sp/>*<sp/>number<sp/>of<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>image.step<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>image.data.resize(image.height*image.step);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>ASSERT_NO_THROW(cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(image,<sp/></highlight><highlight class="stringliteral">&quot;mono8&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>ASSERT_EQ(220,<sp/>cv_ptr-&gt;image.rows);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>ASSERT_EQ(200,<sp/>cv_ptr-&gt;image.cols);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ASSERT_EQ(200,<sp/>cv_ptr-&gt;image.step[0]);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="cv__bridge_2test_2utest_8cpp_1aed8f89ad5e469f496709d675ae2118a3" refkind="member"><highlight class="normal"><ref refid="cv__bridge_2test_2utest_8cpp_1adc8ee06318a777109aa31109455b083a" kindref="member">TEST</ref>(CvBridgeTest,<sp/>imageMessageConversion)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>sensor_msgs::Image<sp/>imgmsg;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">cv_bridge::CvImagePtr</ref><sp/>cv_ptr;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>imgmsg.height<sp/>=<sp/>220;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>imgmsg.width<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>imgmsg.is_bigendian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>with<sp/>data<sp/>type<sp/>float32<sp/>and<sp/>1<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>imgmsg.encoding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;32FC1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>imgmsg.step<sp/>=<sp/>imgmsg.width<sp/>*<sp/>32<sp/>/<sp/>8<sp/>*<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>imgmsg.data.resize(imgmsg.height<sp/>*<sp/>imgmsg.step);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ASSERT_NO_THROW(cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(imgmsg,<sp/>imgmsg.encoding));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>ASSERT_EQ(imgmsg.height,<sp/>cv_ptr-&gt;image.rows);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ASSERT_EQ(imgmsg.width,<sp/>cv_ptr-&gt;image.cols);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>cv_ptr-&gt;image.channels());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>ASSERT_EQ(imgmsg.step,<sp/>cv_ptr-&gt;image.step[0]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>with<sp/>data<sp/>type<sp/>float32<sp/>and<sp/>10<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>imgmsg.encoding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;32FC10&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>imgmsg.step<sp/>=<sp/>imgmsg.width<sp/>*<sp/>32<sp/>/<sp/>8<sp/>*<sp/>10;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>imgmsg.data.resize(imgmsg.height<sp/>*<sp/>imgmsg.step);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>ASSERT_NO_THROW(cv_ptr<sp/>=<sp/><ref refid="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" kindref="member">cv_bridge::toCvCopy</ref>(imgmsg,<sp/>imgmsg.encoding));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>ASSERT_EQ(imgmsg.height,<sp/>cv_ptr-&gt;image.rows);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>ASSERT_EQ(imgmsg.width,<sp/>cv_ptr-&gt;image.cols);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>cv_ptr-&gt;image.channels());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ASSERT_EQ(imgmsg.step,<sp/>cv_ptr-&gt;image.step[0]);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="cv__bridge_2test_2utest_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cv__bridge_2test_2utest_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/test/utest.cpp"/>
  </compounddef>
</doxygen>
