<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="python-doc-official_8md" kind="file" language="Markdown">
    <compoundname>python-doc-official.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Python<sp/>Google<sp/>Docstring<sp/>--<sp/>an<sp/>official<sp/>example</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight></codeline>
<codeline><highlight class="normal">&quot;&quot;&quot;Example<sp/>Google<sp/>style<sp/>docstrings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>module<sp/>demonstrates<sp/>documentation<sp/>as<sp/>specified<sp/>by<sp/>the<sp/>`Google<sp/>Python</highlight></codeline>
<codeline><highlight class="normal">Style<sp/>Guide`_.<sp/>Docstrings<sp/>may<sp/>extend<sp/>over<sp/>multiple<sp/>lines.<sp/>Sections<sp/>are<sp/>created</highlight></codeline>
<codeline><highlight class="normal">with<sp/>a<sp/>section<sp/>header<sp/>and<sp/>a<sp/>colon<sp/>followed<sp/>by<sp/>a<sp/>block<sp/>of<sp/>indented<sp/>text.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Examples<sp/>can<sp/>be<sp/>given<sp/>using<sp/>either<sp/>the<sp/>``Example``<sp/>or<sp/>``Examples``</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sections.<sp/>Sections<sp/>support<sp/>any<sp/>reStructuredText<sp/>formatting,<sp/>including</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>literal<sp/>blocks::</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$<sp/>python<sp/>example_google.py</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Section<sp/>breaks<sp/>are<sp/>created<sp/>by<sp/>resuming<sp/>unindented<sp/>text.<sp/>Section<sp/>breaks</highlight></codeline>
<codeline><highlight class="normal">are<sp/>also<sp/>implicitly<sp/>created<sp/>anytime<sp/>a<sp/>new<sp/>section<sp/>starts.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Attributes:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>module_level_variable1<sp/>(int):<sp/>Module<sp/>level<sp/>variables<sp/>may<sp/>be<sp/>documented<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>either<sp/>the<sp/>``Attributes``<sp/>section<sp/>of<sp/>the<sp/>module<sp/>docstring,<sp/>or<sp/>in<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>docstring<sp/>immediately<sp/>following<sp/>the<sp/>variable.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Either<sp/>form<sp/>is<sp/>acceptable,<sp/>but<sp/>the<sp/>two<sp/>should<sp/>not<sp/>be<sp/>mixed.<sp/>Choose</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>convention<sp/>to<sp/>document<sp/>module<sp/>level<sp/>variables<sp/>and<sp/>be<sp/>consistent</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Todo:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>module<sp/>TODOs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>You<sp/>have<sp/>to<sp/>also<sp/>use<sp/>``sphinx.ext.todo``<sp/>extension</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">..<sp/>_Google<sp/>Python<sp/>Style<sp/>Guide:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>http://google.github.io/styleguide/pyguide.html</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">module_level_variable1<sp/>=<sp/>12345</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">module_level_variable2<sp/>=<sp/>98765</highlight></codeline>
<codeline><highlight class="normal">&quot;&quot;&quot;int:<sp/>Module<sp/>level<sp/>variable<sp/>documented<sp/>inline.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>docstring<sp/>may<sp/>span<sp/>multiple<sp/>lines.<sp/>The<sp/>type<sp/>may<sp/>optionally<sp/>be<sp/>specified</highlight></codeline>
<codeline><highlight class="normal">on<sp/>the<sp/>first<sp/>line,<sp/>separated<sp/>by<sp/>a<sp/>colon.</highlight></codeline>
<codeline><highlight class="normal">&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">def<sp/>function_with_types_in_docstring(param1,<sp/>param2):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Example<sp/>function<sp/>with<sp/>types<sp/>documented<sp/>in<sp/>the<sp/>docstring.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>`PEP<sp/>484`_<sp/>type<sp/>annotations<sp/>are<sp/>supported.<sp/>If<sp/>attribute,<sp/>parameter,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>types<sp/>are<sp/>annotated<sp/>according<sp/>to<sp/>`PEP<sp/>484`_,<sp/>they<sp/>do<sp/>not<sp/>need<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>included<sp/>in<sp/>the<sp/>docstring:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param1<sp/>(int):<sp/>The<sp/>first<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param2<sp/>(str):<sp/>The<sp/>second<sp/>parameter.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool:<sp/>The<sp/>return<sp/>value.<sp/>True<sp/>for<sp/>success,<sp/>False<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>..<sp/>_PEP<sp/>484:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://www.python.org/dev/peps/pep-0484/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">def<sp/>function_with_pep484_type_annotations(param1:<sp/>int,<sp/>param2:<sp/>str)<sp/>-&gt;<sp/>bool:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Example<sp/>function<sp/>with<sp/>PEP<sp/>484<sp/>type<sp/>annotations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param1:<sp/>The<sp/>first<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param2:<sp/>The<sp/>second<sp/>parameter.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>return<sp/>value.<sp/>True<sp/>for<sp/>success,<sp/>False<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">def<sp/>module_level_function(param1,<sp/>param2=None,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;This<sp/>is<sp/>an<sp/>example<sp/>of<sp/>a<sp/>module<sp/>level<sp/>function.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Function<sp/>parameters<sp/>should<sp/>be<sp/>documented<sp/>in<sp/>the<sp/>``Args``<sp/>section.<sp/>The<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>of<sp/>each<sp/>parameter<sp/>is<sp/>required.<sp/>The<sp/>type<sp/>and<sp/>description<sp/>of<sp/>each<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>optional,<sp/>but<sp/>should<sp/>be<sp/>included<sp/>if<sp/>not<sp/>obvious.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>If<sp/>\*args<sp/>or<sp/>\*\*kwargs<sp/>are<sp/>accepted,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>they<sp/>should<sp/>be<sp/>listed<sp/>as<sp/>``*args``<sp/>and<sp/>``**kwargs``.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>format<sp/>for<sp/>a<sp/>parameter<sp/>is::</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>(type):<sp/>description</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>description<sp/>may<sp/>span<sp/>multiple<sp/>lines.<sp/>Following</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>should<sp/>be<sp/>indented.<sp/>The<sp/>&quot;(type)&quot;<sp/>is<sp/>optional.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Multiple<sp/>paragraphs<sp/>are<sp/>supported<sp/>in<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param1<sp/>(int):<sp/>The<sp/>first<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param2<sp/>(:obj:`str`,<sp/>optional):<sp/>The<sp/>second<sp/>parameter.<sp/>Defaults<sp/>to<sp/>None.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Second<sp/>line<sp/>of<sp/>description<sp/>should<sp/>be<sp/>indented.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*args:<sp/>Variable<sp/>length<sp/>argument<sp/>list.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**kwargs:<sp/>Arbitrary<sp/>keyword<sp/>arguments.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool:<sp/>True<sp/>if<sp/>successful,<sp/>False<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>return<sp/>type<sp/>is<sp/>optional<sp/>and<sp/>may<sp/>be<sp/>specified<sp/>at<sp/>the<sp/>beginning<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>``Returns``<sp/>section<sp/>followed<sp/>by<sp/>a<sp/>colon.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>``Returns``<sp/>section<sp/>may<sp/>span<sp/>multiple<sp/>lines<sp/>and<sp/>paragraphs.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Following<sp/>lines<sp/>should<sp/>be<sp/>indented<sp/>to<sp/>match<sp/>the<sp/>first<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>``Returns``<sp/>section<sp/>supports<sp/>any<sp/>reStructuredText<sp/>formatting,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>including<sp/>literal<sp/>blocks::</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param1&apos;:<sp/>param1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param2&apos;:<sp/>param2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttributeError:<sp/>The<sp/>``Raises``<sp/>section<sp/>is<sp/>a<sp/>list<sp/>of<sp/>all<sp/>exceptions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>are<sp/>relevant<sp/>to<sp/>the<sp/>interface.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueError:<sp/>If<sp/>`param2`<sp/>is<sp/>equal<sp/>to<sp/>`param1`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>param1<sp/>==<sp/>param2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>ValueError(&apos;param1<sp/>may<sp/>not<sp/>be<sp/>equal<sp/>to<sp/>param2&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>True</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">def<sp/>example_generator(n):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Generators<sp/>have<sp/>a<sp/>``Yields``<sp/>section<sp/>instead<sp/>of<sp/>a<sp/>``Returns``<sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>(int):<sp/>The<sp/>upper<sp/>limit<sp/>of<sp/>the<sp/>range<sp/>to<sp/>generate,<sp/>from<sp/>0<sp/>to<sp/>`n`<sp/>-<sp/>1.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Yields:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int:<sp/>The<sp/>next<sp/>number<sp/>in<sp/>the<sp/>range<sp/>of<sp/>0<sp/>to<sp/>`n`<sp/>-<sp/>1.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Examples:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Examples<sp/>should<sp/>be<sp/>written<sp/>in<sp/>doctest<sp/>format,<sp/>and<sp/>should<sp/>illustrate<sp/>how</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>use<sp/>the<sp/>function.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print([i<sp/>for<sp/>i<sp/>in<sp/>example_generator(4)])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0,<sp/>1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(n):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/>i</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>ExampleError(Exception):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Exceptions<sp/>are<sp/>documented<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>classes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>__init__<sp/>method<sp/>may<sp/>be<sp/>documented<sp/>in<sp/>either<sp/>the<sp/>class<sp/>level</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>docstring,<sp/>or<sp/>as<sp/>a<sp/>docstring<sp/>on<sp/>the<sp/>__init__<sp/>method<sp/>itself.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Either<sp/>form<sp/>is<sp/>acceptable,<sp/>but<sp/>the<sp/>two<sp/>should<sp/>not<sp/>be<sp/>mixed.<sp/>Choose<sp/>one</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>convention<sp/>to<sp/>document<sp/>the<sp/>__init__<sp/>method<sp/>and<sp/>be<sp/>consistent<sp/>with<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Note:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Do<sp/>not<sp/>include<sp/>the<sp/>`self`<sp/>parameter<sp/>in<sp/>the<sp/>``Args``<sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>(str):<sp/>Human<sp/>readable<sp/>string<sp/>describing<sp/>the<sp/>exception.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>(:obj:`int`,<sp/>optional):<sp/>Error<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Attributes:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>(str):<sp/>Human<sp/>readable<sp/>string<sp/>describing<sp/>the<sp/>exception.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>(int):<sp/>Exception<sp/>error<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>msg,<sp/>code):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.msg<sp/>=<sp/>msg</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.code<sp/>=<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>ExampleClass(object):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;The<sp/>summary<sp/>line<sp/>for<sp/>a<sp/>class<sp/>docstring<sp/>should<sp/>fit<sp/>on<sp/>one<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>class<sp/>has<sp/>public<sp/>attributes,<sp/>they<sp/>may<sp/>be<sp/>documented<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>an<sp/>``Attributes``<sp/>section<sp/>and<sp/>follow<sp/>the<sp/>same<sp/>formatting<sp/>as<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function&apos;s<sp/>``Args``<sp/>section.<sp/>Alternatively,<sp/>attributes<sp/>may<sp/>be<sp/>documented</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>with<sp/>the<sp/>attribute&apos;s<sp/>declaration<sp/>(see<sp/>__init__<sp/>method<sp/>below).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Properties<sp/>created<sp/>with<sp/>the<sp/>``@property``<sp/>decorator<sp/>should<sp/>be<sp/>documented</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>property&apos;s<sp/>getter<sp/>method.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Attributes:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr1<sp/>(str):<sp/>Description<sp/>of<sp/>`attr1`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr2<sp/>(:obj:`int`,<sp/>optional):<sp/>Description<sp/>of<sp/>`attr2`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>param1,<sp/>param2,<sp/>param3):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Example<sp/>of<sp/>docstring<sp/>on<sp/>the<sp/>__init__<sp/>method.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>__init__<sp/>method<sp/>may<sp/>be<sp/>documented<sp/>in<sp/>either<sp/>the<sp/>class<sp/>level</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>docstring,<sp/>or<sp/>as<sp/>a<sp/>docstring<sp/>on<sp/>the<sp/>__init__<sp/>method<sp/>itself.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Either<sp/>form<sp/>is<sp/>acceptable,<sp/>but<sp/>the<sp/>two<sp/>should<sp/>not<sp/>be<sp/>mixed.<sp/>Choose<sp/>one</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convention<sp/>to<sp/>document<sp/>the<sp/>__init__<sp/>method<sp/>and<sp/>be<sp/>consistent<sp/>with<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Do<sp/>not<sp/>include<sp/>the<sp/>`self`<sp/>parameter<sp/>in<sp/>the<sp/>``Args``<sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param1<sp/>(str):<sp/>Description<sp/>of<sp/>`param1`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param2<sp/>(:obj:`int`,<sp/>optional):<sp/>Description<sp/>of<sp/>`param2`.<sp/>Multiple</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>are<sp/>supported.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param3<sp/>(:obj:`list`<sp/>of<sp/>:obj:`str`):<sp/>Description<sp/>of<sp/>`param3`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.attr1<sp/>=<sp/>param1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.attr2<sp/>=<sp/>param2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.attr3<sp/>=<sp/>param3<sp/><sp/>#:<sp/>Doc<sp/>comment<sp/>*inline*<sp/>with<sp/>attribute</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#:<sp/>list<sp/>of<sp/>str:<sp/>Doc<sp/>comment<sp/>*before*<sp/>attribute,<sp/>with<sp/>type<sp/>specified</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.attr4<sp/>=<sp/>[&apos;attr4&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.attr5<sp/>=<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;str:<sp/>Docstring<sp/>*after*<sp/>attribute,<sp/>with<sp/>type<sp/>specified.&quot;&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>readonly_property(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;str:<sp/>Properties<sp/>should<sp/>be<sp/>documented<sp/>in<sp/>their<sp/>getter<sp/>method.&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&apos;readonly_property&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>readwrite_property(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;:obj:`list`<sp/>of<sp/>:obj:`str`:<sp/>Properties<sp/>with<sp/>both<sp/>a<sp/>getter<sp/>and<sp/>setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>only<sp/>be<sp/>documented<sp/>in<sp/>their<sp/>getter<sp/>method.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>setter<sp/>method<sp/>contains<sp/>notable<sp/>behavior,<sp/>it<sp/>should<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mentioned<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[&apos;readwrite_property&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@readwrite_property.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>readwrite_property(self,<sp/>value):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>example_method(self,<sp/>param1,<sp/>param2):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Class<sp/>methods<sp/>are<sp/>similar<sp/>to<sp/>regular<sp/>functions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Do<sp/>not<sp/>include<sp/>the<sp/>`self`<sp/>parameter<sp/>in<sp/>the<sp/>``Args``<sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param1:<sp/>The<sp/>first<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param2:<sp/>The<sp/>second<sp/>parameter.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>successful,<sp/>False<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>True</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__special__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;By<sp/>default<sp/>special<sp/>members<sp/>with<sp/>docstrings<sp/>are<sp/>not<sp/>included.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Special<sp/>members<sp/>are<sp/>any<sp/>methods<sp/>or<sp/>attributes<sp/>that<sp/>start<sp/>with<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>with<sp/>a<sp/>double<sp/>underscore.<sp/>Any<sp/>special<sp/>member<sp/>with<sp/>a<sp/>docstring</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>be<sp/>included<sp/>in<sp/>the<sp/>output,<sp/>if</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``napoleon_include_special_with_doc``<sp/>is<sp/>set<sp/>to<sp/>True.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>behavior<sp/>can<sp/>be<sp/>enabled<sp/>by<sp/>changing<sp/>the<sp/>following<sp/>setting<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sphinx&apos;s<sp/>conf.py::</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>napoleon_include_special_with_doc<sp/>=<sp/>True</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pass</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__special_without_docstring__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pass</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>_private(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;By<sp/>default<sp/>private<sp/>members<sp/>are<sp/>not<sp/>included.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>members<sp/>are<sp/>any<sp/>methods<sp/>or<sp/>attributes<sp/>that<sp/>start<sp/>with<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>underscore<sp/>and<sp/>are<sp/>*not*<sp/>special.<sp/>By<sp/>default<sp/>they<sp/>are<sp/>not<sp/>included</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>output.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>behavior<sp/>can<sp/>be<sp/>changed<sp/>such<sp/>that<sp/>private<sp/>members<sp/>*are*<sp/>included</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>changing<sp/>the<sp/>following<sp/>setting<sp/>in<sp/>Sphinx&apos;s<sp/>conf.py::</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>napoleon_include_private_with_doc<sp/>=<sp/>True</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pass</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>_private_without_docstring(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pass</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="_docs/NO/python-doc-official.md"/>
  </compounddef>
</doxygen>
