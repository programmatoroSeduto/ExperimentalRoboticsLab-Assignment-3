<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacecv__bridge" kind="namespace" language="C++">
    <compoundname>cv_bridge</compoundname>
    <innerclass refid="classcv__bridge_1_1_cv_image" prot="public">cv_bridge::CvImage</innerclass>
    <innerclass refid="structcv__bridge_1_1_cvt_color_for_display_options" prot="public">cv_bridge::CvtColorForDisplayOptions</innerclass>
    <innerclass refid="classcv__bridge_1_1_exception" prot="public">cv_bridge::Exception</innerclass>
    <innernamespace refid="namespacecv__bridge_1_1core">cv_bridge::core</innernamespace>
    <innernamespace refid="namespacecv__bridge_1_1rgb__colors">cv_bridge::rgb_colors</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bf" prot="public" static="no" strong="no">
        <type></type>
        <name>Format</name>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfad3e5f24dc1fc23acfff20ee230459558" prot="public">
          <name>BMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfaf2228b3b50250063d0256e3a40032f55" prot="public">
          <name>DIB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa45436b05357bb96126834efae66c50e8" prot="public">
          <name>JPG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfadc1cd099bb82f23f7b591f52411da82f" prot="public">
          <name>JPEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa686f9486d4e5fe72f6abf4002c276934" prot="public">
          <name>JPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa5708345c1b3ef1aad7b58afbc740116e" prot="public">
          <name>JP2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa0a36eb1d5d593f0c0c5b298ae353ab94" prot="public">
          <name>PNG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa2da0f7870b7ac7950c08ff8243c28757" prot="public">
          <name>PBM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa6aaa352f4c8b36d94f5ad248039e838a" prot="public">
          <name>PGM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfaf9dc454f916fd886aa9157ca353aa80f" prot="public">
          <name>PPM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa55079b5ac03221deb5d4bac1ed17996e" prot="public">
          <name>SR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa2239eb1bb1fe372887900174cfd90620" prot="public">
          <name>RAS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa870473c7ea88913e2eb0f065ee00f8b6" prot="public">
          <name>TIFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfafbe159afef10463d25bc0042af05c969" prot="public">
          <name>TIF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" line="95" column="14" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" bodystart="95" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;CvImage&gt; cv_bridge::CvImagePtr</definition>
        <argsstring></argsstring>
        <name>CvImagePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" line="91" column="27" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;CvImage const&gt; cv_bridge::CvImageConstPtr</definition>
        <argsstring></argsstring>
        <name>CvImageConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" line="92" column="27" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecv__bridge_1acbf2da402f4d3e505613e95b5a2aed35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref></type>
        <definition>CvImagePtr cv_bridge::toCvCopy</definition>
        <argsstring>(const sensor_msgs::ImageConstPtr &amp;source, const std::string &amp;encoding=std::string())</argsstring>
        <name>toCvCopy</name>
        <param>
          <type>const sensor_msgs::ImageConstPtr &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Convert a sensor_msgs::Image message to an OpenCV-compatible <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref>, copying the image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A shared_ptr to a sensor_msgs::Image message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired encoding of the image data, one of the following strings:<itemizedlist>
<listitem><para><computeroutput>&quot;mono8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgr8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgra8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgb8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgba8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;mono16&quot;</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If <emphasis>encoding</emphasis> is the empty string (the default), the returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> has the same encoding as <emphasis>source</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="425" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="425" bodyend="429" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="195" declcolumn="12"/>
        <referencedby refid="class_aruco_marker_publisher_1aa44e8391a543176e7b52c7ad382be7a2" compoundref="marker__publish_8cpp" startline="79" endline="137">ArucoMarkerPublisher::image_callback</referencedby>
        <referencedby refid="simple__double_8cpp_1af119c0685c1216bb9cdbc352ea016cd2" compoundref="simple__double_8cpp" startline="72" endline="202">image_callback</referencedby>
        <referencedby refid="class_aruco_simple_1a4187d02eb1f8af79b91dc901c3f96586" compoundref="simple__single_8cpp" startline="185" endline="309">ArucoSimple::image_callback</referencedby>
        <referencedby refid="class_image_converter_1ab70b33720d4f8b71be32e9e17201d0a3" compoundref="example_8cpp" startline="31" endline="54">ImageConverter::imageCb</referencedby>
        <referencedby refid="test__compression_8cpp_1a4a83d5ef9bb4eb154f7dfbab5e11cde8" compoundref="test__compression_8cpp" startline="5" endline="36">TEST</referencedby>
        <referencedby refid="classnode__aruco__detection_1a41fd24f3c07665cf1299c29bc8707edd" compoundref="aruco__detection_8cpp" startline="124" endline="138">node_aruco_detection::cbk_cam_arm</referencedby>
        <referencedby refid="classnode__aruco__detection_1ae51572f59a8124dfe8cdca3514c9ffda" compoundref="aruco__detection_8cpp" startline="141" endline="155">node_aruco_detection::cbk_cam_front</referencedby>
        <referencedby refid="classnode__aruco__detection_1a657f1b6d746318bf2504e0bca06f62e6" compoundref="aruco__detection_8cpp" startline="158" endline="172">node_aruco_detection::cbk_cam_left</referencedby>
        <referencedby refid="classnode__aruco__detection_1ad41c720ea1e290da6664bca32bef07bc" compoundref="aruco__detection_8cpp" startline="175" endline="189">node_aruco_detection::cbk_cam_right</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1a951356ef916dc550d1efa445e26eb3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref></type>
        <definition>CvImagePtr cv_bridge::toCvCopy</definition>
        <argsstring>(const sensor_msgs::CompressedImageConstPtr &amp;source, const std::string &amp;encoding=std::string())</argsstring>
        <name>toCvCopy</name>
        <param>
          <type>const sensor_msgs::CompressedImageConstPtr &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="542" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="542" bodyend="546" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="198" declcolumn="12"/>
        <references refid="robocluedo-hunter-user-manual_8md_8txt_1ad7c4b9658dd29bd04d94a2cb701c6a07" compoundref="robocluedo-hunter-user-manual_8md_8txt" startline="343">options</references>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1a49fedf7e642d505557b866f6e307a034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref></type>
        <definition>CvImagePtr cv_bridge::toCvCopy</definition>
        <argsstring>(const sensor_msgs::Image &amp;source, const std::string &amp;encoding=std::string())</argsstring>
        <name>toCvCopy</name>
        <param>
          <type>const sensor_msgs::Image &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Convert a sensor_msgs::Image message to an OpenCV-compatible <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref>, copying the image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A sensor_msgs::Image message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired encoding of the image data, one of the following strings:<itemizedlist>
<listitem><para><computeroutput>&quot;mono8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgr8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgra8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgb8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgba8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;mono16&quot;</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If <emphasis>encoding</emphasis> is the empty string (the default), the returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> has the same encoding as <emphasis>source</emphasis>. If the source is 8bit and the encoding 16 or vice-versa, a scaling is applied (65535/255 and 255/65535 respectively). Otherwise, no scaling is applied and the rules from the convertTo OpenCV function are applied (capping): <ulink url="http://docs.opencv.org/modules/core/doc/basic_structures.html#mat-convertto">http://docs.opencv.org/modules/core/doc/basic_structures.html#mat-convertto</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="431" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="431" bodyend="436" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="220" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1afc46b776280eccf3cd0d55adf0b944de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref></type>
        <definition>CvImagePtr cv_bridge::toCvCopy</definition>
        <argsstring>(const sensor_msgs::CompressedImage &amp;source, const std::string &amp;encoding=std::string())</argsstring>
        <name>toCvCopy</name>
        <param>
          <type>const sensor_msgs::CompressedImage &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="548" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="548" bodyend="574" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="223" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1aafa38a1d9be98d9efaefe45fd873133c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref></type>
        <definition>CvImageConstPtr cv_bridge::toCvShare</definition>
        <argsstring>(const sensor_msgs::ImageConstPtr &amp;source, const std::string &amp;encoding=std::string())</argsstring>
        <name>toCvShare</name>
        <param>
          <type>const sensor_msgs::ImageConstPtr &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Convert an immutable sensor_msgs::Image message to an OpenCV-compatible <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref>, sharing the image data if possible. </para>
        </briefdescription>
        <detaileddescription>
<para>If the source encoding and desired encoding are the same, the returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> will share the image data with <emphasis>source</emphasis> without copying it. The returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> cannot be modified, as that could modify the <emphasis>source</emphasis> data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A shared_ptr to a sensor_msgs::Image message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired encoding of the image data, one of the following strings:<itemizedlist>
<listitem><para><computeroutput>&quot;mono8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgr8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgra8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgb8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgba8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;mono16&quot;</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If <emphasis>encoding</emphasis> is the empty string (the default), the returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> has the same encoding as <emphasis>source</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="439" column="17" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="439" bodyend="443" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="246" declcolumn="17"/>
        <referencedby refid="test__endian_8cpp_1a645cd0f54caa88cd6172fff415d1eb50" compoundref="test__endian_8cpp" startline="6" endline="38">TEST</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1a432a8aaec1dcec9f1955888dda45cf61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref></type>
        <definition>CvImageConstPtr cv_bridge::toCvShare</definition>
        <argsstring>(const sensor_msgs::Image &amp;source, const boost::shared_ptr&lt; void const &gt; &amp;tracked_object, const std::string &amp;encoding=std::string())</argsstring>
        <name>toCvShare</name>
        <param>
          <type>const sensor_msgs::Image &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const boost::shared_ptr&lt; void const &gt; &amp;</type>
          <declname>tracked_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Convert an immutable sensor_msgs::Image message to an OpenCV-compatible <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref>, sharing the image data if possible. </para>
        </briefdescription>
        <detaileddescription>
<para>If the source encoding and desired encoding are the same, the returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> will share the image data with <emphasis>source</emphasis> without copying it. The returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> cannot be modified, as that could modify the <emphasis>source</emphasis> data.</para>
<para>This overload is useful when you have a shared_ptr to a message that contains a sensor_msgs::Image, and wish to share ownership with the containing message.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The sensor_msgs::Image message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tracked_object</parametername>
</parameternamelist>
<parameterdescription>
<para>A shared_ptr to an object owning the sensor_msgs::Image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired encoding of the image data, one of the following strings:<itemizedlist>
<listitem><para><computeroutput>&quot;mono8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgr8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;bgra8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgb8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;rgba8&quot;</computeroutput> </para>
</listitem><listitem><para><computeroutput>&quot;mono16&quot;</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If <emphasis>encoding</emphasis> is the empty string (the default), the returned <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> has the same encoding as <emphasis>source</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="445" column="17" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="445" bodyend="460" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="273" declcolumn="17"/>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfaf2228b3b50250063d0256e3a40032f55" compoundref="cv__bridge_8h" startline="96">DIB</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfad3e5f24dc1fc23acfff20ee230459558" compoundref="cv__bridge_8h" startline="96">BMP</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa45436b05357bb96126834efae66c50e8" compoundref="cv__bridge_8h" startline="97">JPG</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfadc1cd099bb82f23f7b591f52411da82f" compoundref="cv__bridge_8h" startline="97">JPEG</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa686f9486d4e5fe72f6abf4002c276934" compoundref="cv__bridge_8h" startline="97">JPE</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa5708345c1b3ef1aad7b58afbc740116e" compoundref="cv__bridge_8h" startline="98">JP2</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa0a36eb1d5d593f0c0c5b298ae353ab94" compoundref="cv__bridge_8h" startline="99">PNG</references>
        <references refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bfa2da0f7870b7ac7950c08ff8243c28757" compoundref="cv__bridge_8h" startline="100">PBM</references>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1ab9a4ba669b03a3b0a35651a6c0d77be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">CvImagePtr</ref></type>
        <definition>CvImagePtr cv_bridge::cvtColor</definition>
        <argsstring>(const CvImageConstPtr &amp;source, const std::string &amp;encoding)</argsstring>
        <name>cvtColor</name>
        <param>
          <type>const <ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
<para>Convert a <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> to another encoding using the same rules as toCvCopy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="462" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="462" bodyend="466" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="280" declcolumn="12"/>
        <referencedby refid="classaruco_1_1_marker_detector_1aa5ef3d6b8aadedfc41ad55dca2d3801f" compoundref="markerdetector_8cpp" startline="552" endline="866">aruco::MarkerDetector::detect</referencedby>
        <referencedby refid="classaruco_1_1_dictionary_based_1a52bdd094306122899e0bb545563e8b4b" compoundref="dictionary__based_8cpp" startline="84" endline="160">aruco::DictionaryBased::detect</referencedby>
        <referencedby refid="classaruco_1_1impl_1_1_s_v_m_markers_1af2be078093b5bf1779f8b68a78a9b492" compoundref="svmmarkers_8cpp" startline="119" endline="167">aruco::impl::SVMMarkers::detect</referencedby>
        <referencedby refid="module_8cpp_1a8c7ec70176ea133aefcb8643f6609953" compoundref="module_8cpp" startline="40" endline="51">cvtColor2Wrap</referencedby>
        <referencedby refid="cv__bridge_2test_2utest_8cpp_1a543f99ea646d57d61b10bf9e0eda3d38" compoundref="cv__bridge_2test_2utest_8cpp" startline="23" endline="45">TEST</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1ac82f0aba256a6eac48cf4378a8990268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref></type>
        <definition>CvImageConstPtr cv_bridge::cvtColorForDisplay</definition>
        <argsstring>(const CvImageConstPtr &amp;source, const std::string &amp;encoding=std::string(), const CvtColorForDisplayOptions options=CvtColorForDisplayOptions())</argsstring>
        <name>cvtColorForDisplay</name>
        <param>
          <type>const <ref refid="namespacecv__bridge_1a87c18e83f76df1e0383ba9be59502d00" kindref="member">CvImageConstPtr</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="structcv__bridge_1_1_cvt_color_for_display_options" kindref="compound">CvtColorForDisplayOptions</ref></type>
          <declname>options</declname>
          <defval><ref refid="structcv__bridge_1_1_cvt_color_for_display_options" kindref="compound">CvtColorForDisplayOptions</ref>()</defval>
        </param>
        <briefdescription>
<para>Converts an immutable sensor_msgs::Image message to another <ref refid="classcv__bridge_1_1_cv_image" kindref="compound">CvImage</ref> for display purposes, using practical conversion rules if needed. </para>
        </briefdescription>
        <detaileddescription>
<para>Data will be shared between input and output if possible.</para>
<para>Recall: sensor_msgs::image_encodings::isColor and isMono tell whether an image contains R,G,B,A, mono (or any combination/subset) with 8 or 16 bit depth.</para>
<para>The following rules apply:<itemizedlist>
<listitem><para>if the output encoding is empty, the fact that the input image is mono or multiple-channel is preserved in the ouput image. The bit depth will be 8. it tries to convert to BGR no matter what encoding image is passed.</para>
</listitem><listitem><para>if the output encoding is not empty, it must have sensor_msgs::image_encodings::isColor and isMono return true. It must also be 8 bit in depth</para>
</listitem><listitem><para>if the input encoding is an OpenCV format (e.g. 8UC1), and if we have 1,3 or 4 channels, it is respectively converted to mono, BGR or BGRA.</para>
</listitem><listitem><para>if the input encoding is 32SC1, this estimate that image as label image and will convert it as bgr image with different colors for each label.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A shared_ptr to a sensor_msgs::Image message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>Either an encoding string that returns true in sensor_msgs::image_encodings::isColor isMono or the empty string as explained above. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structcv__bridge_1_1_cvt_color_for_display_options" kindref="compound">cv_bridge::CvtColorForDisplayOptions</ref>) Options to convert the source image with.<itemizedlist>
<listitem><para>do_dynamic_scaling If true, the image is dynamically scaled between its minimum and maximum value before being converted to its final encoding.</para>
</listitem><listitem><para>min_image_value Independently from do_dynamic_scaling, if min_image_value and max_image_value are different, the image is scaled between these two values before being converted to its final encoding.</para>
</listitem><listitem><para>max_image_value Maximum image value</para>
</listitem><listitem><para>colormap Colormap which the source image converted with. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="576" column="17" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="576" bodyend="735" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="329" declcolumn="17"/>
        <referencedby refid="module_8cpp_1aa9d810d7cb2ab2982c77d0b44a4b13f3" compoundref="module_8cpp" startline="54" endline="75">cvtColorForDisplayWrap</referencedby>
        <referencedby refid="namespacepython__bindings_1a6fd97964ea8e1f29076990a56b3957d3" compoundref="python__bindings_8py" startline="7" endline="36">python_bindings.test_cvtColorForDisplay</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1a60b43d74db6ef87fd6cd35d9305b1ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv_bridge::getCvType</definition>
        <argsstring>(const std::string &amp;encoding)</argsstring>
        <name>getCvType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
<para>Get the OpenCV type enum corresponding to the encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, &quot;bgr8&quot; -&gt; CV_8UC3, &quot;32FC1&quot; -&gt; CV_32FC1, and &quot;32FC10&quot; -&gt; CV_32FC10. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="105" column="5" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="105" bodyend="146" declfile="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" declline="338" declcolumn="5"/>
        <referencedby refid="classcv__bridge_1_1core_1_1_cv_bridge_1a8a6e497ee5a2fadae34d47d227bce7cf" compoundref="core_8py" startline="90" endline="97">cv_bridge.core.CvBridge.encoding_to_cvtype2</referencedby>
        <referencedby refid="classenumerants_1_1_test_enumerants_1aa4a864f1fca4ef45ab778172b62f1cfe" compoundref="enumerants_8py" startline="14" endline="37">enumerants.TestEnumerants.test_enumerants_cv2</referencedby>
        <referencedby refid="cv__bridge_2test_2utest_8cpp_1a543f99ea646d57d61b10bf9e0eda3d38" compoundref="cv__bridge_2test_2utest_8cpp" startline="23" endline="45">TEST</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1a76369e4bbe0a2fda233cf5d4640ba2aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cv_bridge::depthStrToInt</definition>
        <argsstring>(const std::string depth)</argsstring>
        <name>depthStrToInt</name>
        <param>
          <type>const std::string</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="88" column="12" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="88" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv__bridge_1a4efa938de96a8e11269645d8a8fa6f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cv_bridge::getFormat</definition>
        <argsstring>(Format format)</argsstring>
        <name>getFormat</name>
        <param>
          <type><ref refid="namespacecv__bridge_1a166887feb09ea6ce14e8742384e574bf" kindref="member">Format</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" line="477" column="13" bodyfile="robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp" bodystart="477" bodyend="511"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/include/cv_bridge/cv_bridge.h" line="48" column="19"/>
  </compounddef>
</doxygen>
