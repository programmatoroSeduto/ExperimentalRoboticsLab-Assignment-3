<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_armor_tools" kind="class" language="C++" prot="public">
    <compoundname>ArmorTools</compoundname>
    <derivedcompoundref refid="class_armor_cluedo" prot="public" virt="non-virtual">ArmorCluedo</derivedcompoundref>
    <derivedcompoundref refid="class_armor_cluedo" prot="public" virt="non-virtual">ArmorCluedo</derivedcompoundref>
    <includes refid="armor__tools_8h" local="no">armor_tools.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_armor_tools_1a8d4c23582a9a677ac69c07b08d5da436" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ArmorTools::DebugMode</definition>
        <argsstring></argsstring>
        <name>DebugMode</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>debug mode enabled or not </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="440" column="6" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="440" bodyend="-1"/>
        <referencedby refid="class_armor_tools_1a5bd0b3e9898d3bcf3dc82705d52495cb" compoundref="armor__tools_8cpp" startline="311" endline="314">SwitchDebugMode</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_armor_tools_1a5097da3f3a0cfac66587a51a7a9ef527" prot="private" static="no" mutable="no">
        <type>ros::ServiceClient</type>
        <definition>ros::ServiceClient ArmorTools::ArmorSrv</definition>
        <argsstring></argsstring>
        <name>ArmorSrv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="444" column="20" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_tools_1a17e4a119ca303959221e8dd363b25cf6" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ArmorTools::ClientName</definition>
        <argsstring></argsstring>
        <name>ClientName</name>
        <initializer>= <ref refid="armor__tools_8h_1a9b7f1ef9ae4220aadac6b4234190564c" kindref="member">ARMOR_DEFAULT_CLIENT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="447" column="13" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_tools_1a392fddf75b194d5620d847787c1c4566" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ArmorTools::ReferenceName</definition>
        <argsstring></argsstring>
        <name>ReferenceName</name>
        <initializer>= <ref refid="armor__tools_8h_1a42e29c5e755c85ed7c01ecc8c6e28cda" kindref="member">ARMOR_DEFAULT_REFERENCE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="450" column="13" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_tools_1a9f4fa5dc8becf3ae63ea9208cfe734cd" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ArmorTools::uri</definition>
        <argsstring></argsstring>
        <name>uri</name>
        <initializer>= <ref refid="armor__tools_8h_1afc0d693b073cbd23ba6f00549c17a811" kindref="member">ARMOR_DEFAULT_URI</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="453" column="13" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_tools_1a7bcc2e8468555db72c3c05be688b6339" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ArmorTools::IsLoadedInterface</definition>
        <argsstring></argsstring>
        <name>IsLoadedInterface</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="457" column="6" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_tools_1a3422980deb67ad5ed25bb3c8d3d22c3e" prot="private" static="no" mutable="no">
        <type>armor_msgs::ArmorDirectiveRes</type>
        <definition>armor_msgs::ArmorDirectiveRes ArmorTools::LastRes</definition>
        <argsstring></argsstring>
        <name>LastRes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="460" column="31" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_tools_1a703ac31970956388e8fc2226c22f2cfd" prot="private" static="no" mutable="no">
        <type>armor_msgs::ArmorDirectiveReq</type>
        <definition>armor_msgs::ArmorDirectiveReq ArmorTools::LastReq</definition>
        <argsstring></argsstring>
        <name>LastReq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="463" column="31" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_armor_tools_1a6692f463e8866859205d9a133a5f330f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArmorTools::ArmorTools</definition>
        <argsstring>(std::string client=ARMOR_DEFAULT_CLIENT, std::string reference=ARMOR_DEFAULT_REFERENCE, bool dbmode=false)</argsstring>
        <name>ArmorTools</name>
        <param>
          <type>std::string</type>
          <declname>client</declname>
          <defval><ref refid="armor__tools_8h_1a9b7f1ef9ae4220aadac6b4234190564c" kindref="member">ARMOR_DEFAULT_CLIENT</ref></defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>reference</declname>
          <defval><ref refid="armor__tools_8h_1a42e29c5e755c85ed7c01ecc8c6e28cda" kindref="member">ARMOR_DEFAULT_REFERENCE</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>dbmode</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Class Constructor, 3 arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Complete class constructor. Dummy init of the class in an invalid state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) corresponding to the &apos;client_name&apos; field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) corresponding to the &apos;reference_name&apos; field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dbmode</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) enable debug mode?</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://github.com/EmaroLab/armor#request">aRMOR official documentation</ulink> <ndash/> meaning of <ref refid="cpp-docs-template_8md_8txt_1a20ff6362005f038a891568b43d660996" kindref="member">the</ref> parameters &quot;client&quot; <ref refid="update-navigation-manager_8md_8txt_1a15b7813e77b47a47a7537cf54bcdbc8a" kindref="member">and</ref> &quot;reference&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="107" column="1" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="18" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ae138e2b2ad40688ebf01879a11fd3b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArmorTools::ArmorTools</definition>
        <argsstring>(bool dbmode)</argsstring>
        <name>ArmorTools</name>
        <param>
          <type>bool</type>
          <declname>dbmode</declname>
        </param>
        <briefdescription>
<para>Class Constructor, only one argument. </para>
        </briefdescription>
        <detaileddescription>
<para>class constructor with only debug mode. Dummy init of the class in an invalid state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbmode</parametername>
</parameternamelist>
<parameterdescription>
<para>debug mode? </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="124" column="1" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="48" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a80eb8d13d6f5b61951ae53a764c3bb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArmorTools::~ArmorTools</definition>
        <argsstring>()</argsstring>
        <name>~ArmorTools</name>
        <briefdescription>
<para>class destructor (empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="128" column="1" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>armor_msgs::ArmorDirective</type>
        <definition>armor_msgs::ArmorDirective ArmorTools::GetRequest</definition>
        <argsstring>(std::string command, std::string first_spec=&quot;&quot;, std::string second_spec=&quot;&quot;, std::string arg1=&quot;&quot;, std::string arg2=&quot;&quot;, std::string arg3=&quot;&quot;, std::string arg4=&quot;&quot;, std::string arg5=&quot;&quot;)</argsstring>
        <name>GetRequest</name>
        <param>
          <type>std::string</type>
          <declname>command</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>first_spec</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>second_spec</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg1</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg2</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg3</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg4</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg5</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>quick generation of an aRMOR request </para>
        </briefdescription>
        <detaileddescription>
<para>This function writes the aRMOR directive request in one shot.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>(mandatory) the main command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) the first specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) the second specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) (from 1 to 5) the arguments of the request</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the complete aRMOR directve message with the request part ready to use.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/EmaroLab/armor/blob/master/commands.md">aRMOR table of commands</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="148" column="28" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="82" bodyend="113"/>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" compoundref="armor__tools_8cpp" startline="146" endline="182">LoadOntology</referencedby>
        <referencedby refid="class_armor_tools_1ad26e4e69e7edcbde9789ca5301c6b4a5" compoundref="armor__tools_8cpp" startline="231" endline="241">SaveOntology</referencedby>
        <referencedby refid="class_armor_tools_1a0ddf26f9a388377a36263344b1cbf39f" compoundref="armor__tools_8cpp" startline="246" endline="255">UpdateOntology</referencedby>
        <referencedby refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">SendCommand</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::CallArmor</definition>
        <argsstring>(armor_msgs::ArmorDirective &amp;data)</argsstring>
        <name>CallArmor</name>
        <param>
          <type>armor_msgs::ArmorDirective &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>send a command to the aRMOR service. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs the call to the aRMOR service <ref refid="armor__tools_8h_1a5387b85042c0c102acc50a8837236fe3" kindref="member">ARMOR_SERVICE_SINGLE_REQUEST</ref> given the entire message to send to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the request to send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>false</bold> if there&apos;s not coenction, or if the request went wrong. <bold>true</bold> otherwise.</para>
</simplesect>
<xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>there&apos;s no way to compose aRMOR commands in a list. actually <ref refid="armor__tools_8h_1a7a575f204a28d981cec16310d0288c38" kindref="member">ARMOR_SERVICE_MULTIPLE_REQUESTS</ref> is unused. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="176" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="118" bodyend="141"/>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
        <references refid="moveit-snippets_8md_8txt_1a36b268389a5b36ab752d1e59f1fa63f0">LOGSQUARE</references>
        <references refid="armor__tools_8h_1a5387b85042c0c102acc50a8837236fe3" compoundref="armor__tools_8h" startline="36">ARMOR_SERVICE_SINGLE_REQUEST</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" compoundref="armor__tools_8cpp" startline="146" endline="182">LoadOntology</referencedby>
        <referencedby refid="class_armor_tools_1ad26e4e69e7edcbde9789ca5301c6b4a5" compoundref="armor__tools_8cpp" startline="231" endline="241">SaveOntology</referencedby>
        <referencedby refid="class_armor_tools_1a0ddf26f9a388377a36263344b1cbf39f" compoundref="armor__tools_8cpp" startline="246" endline="255">UpdateOntology</referencedby>
        <referencedby refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">SendCommand</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::LoadOntology</definition>
        <argsstring>(std::string path, std::string uri=ARMOR_DEFAULT_URI, bool manipulationFlag=true, std::string reasoner=ARMOR_DEFAULT_REASONER, bool buffered_reasoner=true)</argsstring>
        <name>LoadOntology</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
          <defval><ref refid="armor__tools_8h_1afc0d693b073cbd23ba6f00549c17a811" kindref="member">ARMOR_DEFAULT_URI</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>manipulationFlag</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>reasoner</declname>
          <defval><ref refid="armor__tools_8h_1a0cef5fa91dfc253d1a2106ae86b426fc" kindref="member">ARMOR_DEFAULT_REASONER</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>buffered_reasoner</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>load the ontology from file. </para>
        </briefdescription>
        <detaileddescription>
<para>the function call the aRMOR service in order to make it load one file with extension .owl as ontology base. The file is only read, so the ontology will not alter it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path of the .owl ontology file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>the URI of the ontology (the main identifier) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>manipulationFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>if enabled, the ontology will wait for the command APPLY before executing the manipulation commands </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reasoner</parametername>
</parameternamelist>
<parameterdescription>
<para>one among &quot;HERMIT&quot;, &quot;PELLET&quot; (default), &quot;FACT&quot;, &quot;SNOROCKET&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferend_reasoner</parametername>
</parameternamelist>
<parameterdescription>
<para>if enabled, the ontology will wait for the command REASON before updating its internal state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or not</para>
</simplesect>
<simplesect kind="note"><para>If you want to manage multiple aRMOR sessions, please consider to construct more than one <ref refid="class_armor_tools" kindref="compound">ArmorTools</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="201" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="146" bodyend="182"/>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
        <references refid="moveit-snippets_8md_8txt_1a36b268389a5b36ab752d1e59f1fa63f0">LOGSQUARE</references>
        <references refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" compoundref="armor__tools_8cpp" startline="82" endline="113">GetRequest</references>
        <references refid="armor__tools_8h_1a73b76dd9a3ec20ebf85d1c57815aa6cd" compoundref="armor__tools_8h" startline="48">BOOL_TO_CSTR</references>
        <references refid="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" compoundref="armor__tools_8cpp" startline="118" endline="141">CallArmor</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_tools_1ad98c8e33df5d1ef3e4c69051ac0dd7ab" compoundref="armor__tools_8cpp" startline="213" endline="226">ConnectAndLoad</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1aa83ea5e064db6dc46c9056ddeeaabbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::Connect</definition>
        <argsstring>(float timeout=ARMOR_DEFAULT_TIMEOUT)</argsstring>
        <name>Connect</name>
        <param>
          <type>float</type>
          <declname>timeout</declname>
          <defval><ref refid="armor__tools_8h_1a6200da3524ce556b179ef1faf17b4f3c" kindref="member">ARMOR_DEFAULT_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
<para>open a connection with the aRMOR service. </para>
        </briefdescription>
        <detaileddescription>
<para>This function simply asks the aRMOR service client. The client handle is stored inside the class, so you don&apos;t have to worry about it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>how much time to wait until to stop the connection attempt; see <ref refid="armor__tools_8h_1a6200da3524ce556b179ef1faf17b4f3c" kindref="member">ARMOR_DEFAULT_TIMEOUT</ref> .</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or not</para>
</simplesect>
<simplesect kind="note"><para>The function returns <bold>false</bold> anso when, after opened the connection, you try to connect again. This is not allowed: you cannot reconnect. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="227" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="187" bodyend="208"/>
        <references refid="armor__tools_8h_1a6fa37f9111f92e4eb4228d33ed5e301f" compoundref="armor__tools_8h" startline="40">ARMOR_INFO</references>
        <references refid="examples__tools_8md_8txt_1a8c8f15207982b3e185f86e1b4968e70d" compoundref="examples__tools_8md_8txt" startline="35">nh</references>
        <references refid="moveit-snippets_8md_8txt_1a36b268389a5b36ab752d1e59f1fa63f0">LOGSQUARE</references>
        <references refid="armor__tools_8h_1a5387b85042c0c102acc50a8837236fe3" compoundref="armor__tools_8h" startline="36">ARMOR_SERVICE_SINGLE_REQUEST</references>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_tools_1ad98c8e33df5d1ef3e4c69051ac0dd7ab" compoundref="armor__tools_8cpp" startline="213" endline="226">ConnectAndLoad</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ad98c8e33df5d1ef3e4c69051ac0dd7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::ConnectAndLoad</definition>
        <argsstring>(std::string path, std::string uri=ARMOR_DEFAULT_URI, bool manipulationFlag=true, std::string reasoner=ARMOR_DEFAULT_REASONER, bool buffered_reasoner=true)</argsstring>
        <name>ConnectAndLoad</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>uri</declname>
          <defval><ref refid="armor__tools_8h_1afc0d693b073cbd23ba6f00549c17a811" kindref="member">ARMOR_DEFAULT_URI</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>manipulationFlag</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>reasoner</declname>
          <defval><ref refid="armor__tools_8h_1a0cef5fa91dfc253d1a2106ae86b426fc" kindref="member">ARMOR_DEFAULT_REASONER</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>buffered_reasoner</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>connect to the server and load the ontology from file. </para>
        </briefdescription>
        <detaileddescription>
<para>Just a shortcut for the couple <ref refid="class_armor_tools_1aa83ea5e064db6dc46c9056ddeeaabbc4" kindref="member">ArmorTools::Connect</ref> then <ref refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" kindref="member">ArmorTools::LoadOntology</ref> .</para>
<para><simplesect kind="see"><para><ref refid="class_armor_tools_1aa83ea5e064db6dc46c9056ddeeaabbc4" kindref="member">ArmorTools::Connect</ref> connection <ref refid="erl3-oracle-user-manual_8md_8txt_1af02cd2ec07331037df3b999a6221822b" kindref="member">to</ref> <ref refid="cpp-docs-template_8md_8txt_1a20ff6362005f038a891568b43d660996" kindref="member">the</ref> aRMOR <ref refid="rosplan-kb_8md_8txt_1aca1ed6b4b0cfeb558dd5ec675c0bbec8" kindref="member">service</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" kindref="member">ArmorTools::LoadOntology</ref> loading <ref refid="examples__tools_8md_8txt_1a1884bacf5f018fc17d8b364c4c6d819b" kindref="member">ontology</ref> from <ref refid="plant-uml-reference_8md_8txt_1a7c8a5b255f267eb876c077b45f50a013" kindref="member">file</ref>, <ref refid="update-navigation-manager_8md_8txt_1a15b7813e77b47a47a7537cf54bcdbc8a" kindref="member">and</ref> <ref refid="main-launch-file_8md_8txt_1acb2fd35d760cf2ec281f662b5be87431" kindref="member">arguments</ref></para>
</simplesect>
<simplesect kind="return"><para>success or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="242" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="213" bodyend="226"/>
        <references refid="class_armor_tools_1aa83ea5e064db6dc46c9056ddeeaabbc4" compoundref="armor__tools_8cpp" startline="187" endline="208">Connect</references>
        <references refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" compoundref="armor__tools_8cpp" startline="146" endline="182">LoadOntology</references>
        <referencedby refid="examples__tools_8md_8txt_1aebaf07d3de193ff93f8ca4969e941408" compoundref="examples__tools_8md_8txt" startline="184" endline="203">main</referencedby>
        <referencedby refid="class_armor_cluedo_1a66ce2d9f5c665ab14761233b32ab1ec6" compoundref="armor__cluedo_8cpp" startline="34" endline="48">ArmorCluedo::Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ad26e4e69e7edcbde9789ca5301c6b4a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::SaveOntology</definition>
        <argsstring>(std::string path)</argsstring>
        <name>SaveOntology</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>save the ontology on file </para>
        </briefdescription>
        <detaileddescription>
<para>Shortcut for the aRMOR command <computeroutput>SAVE INFERENCE</computeroutput>. It writes the actual state of the ontology on a file. If the file doesn&apos;t exist, it will be created. The ontology is updated before the writing on file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>where to save the .owl file</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="265" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="231" bodyend="241"/>
        <references refid="armor__tools_8h_1a1107fec0585eb46c08431ef303413f01" compoundref="armor__tools_8h" startline="42">ARMOR_CHECK_INTERFACE</references>
        <references refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" compoundref="armor__tools_8cpp" startline="82" endline="113">GetRequest</references>
        <references refid="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" compoundref="armor__tools_8cpp" startline="118" endline="141">CallArmor</references>
        <referencedby refid="test__armor__cluedo_8cpp_1a78703009283c736ea377ca3a343cbd58" compoundref="test__armor__cluedo_8cpp" startline="212" endline="353">armorTestSession2</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a0ddf26f9a388377a36263344b1cbf39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::UpdateOntology</definition>
        <argsstring>()</argsstring>
        <name>UpdateOntology</name>
        <briefdescription>
<para>send the command REASON </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the configuration used in <ref refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" kindref="member">ArmorTools::LoadOntology</ref>, the aRMOR command <computeroutput>REASON</computeroutput> is needed in order to update the current state of the ontology (aka <emphasis>infer something</emphasis>). <linebreak/>
 This function is a shortcut for the command <computeroutput>REASON</computeroutput>.</para>
<para><simplesect kind="return"><para>success or not</para>
</simplesect>
<simplesect kind="warning"><para>often not using this function is source of errors! Please remember to use it, because the other function won&apos;t do it automatically. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="284" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="246" bodyend="255"/>
        <references refid="armor__tools_8h_1a1107fec0585eb46c08431ef303413f01" compoundref="armor__tools_8h" startline="42">ARMOR_CHECK_INTERFACE</references>
        <references refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" compoundref="armor__tools_8cpp" startline="82" endline="113">GetRequest</references>
        <references refid="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" compoundref="armor__tools_8cpp" startline="118" endline="141">CallArmor</references>
        <references refid="armor__tools_8h_1a9e351347555cc38415a6665d039e1d2a" compoundref="armor__tools_8h" startline="43">ARMOR_RES</references>
        <referencedby refid="examples__cluedo_8md_8txt_1a0055e76cf5ab9e6852445b755e20c0b6" compoundref="examples__cluedo_8md_8txt" startline="26" endline="69">main</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a86644574dffd07a880d40f455d113782" compoundref="test__armor__cluedo_8cpp" startline="142" endline="208">armorTestSession</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a78703009283c736ea377ca3a343cbd58" compoundref="test__armor__cluedo_8cpp" startline="212" endline="353">armorTestSession2</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a451163e1278ec49f4d214b33111d166d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmorTools::PrintRequest</definition>
        <argsstring>(armor_msgs::ArmorDirective &amp;d)</argsstring>
        <name>PrintRequest</name>
        <param>
          <type>armor_msgs::ArmorDirective &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>print a request to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the entire aRMOR directive message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="294" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="260" bodyend="279"/>
        <references refid="armor__tools_8h_1af4f289b8ad162b609975620166e3d407" compoundref="armor__tools_8h" startline="46">SS</references>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a060ea53faa9c0b619cd0d5ccec07b0fe" compoundref="erl2-oracle-user-manual_8md_8txt" startline="127">r</references>
        <references refid="namespacesetup_1aa2586b6c4dd84a0aaaf49cb1565cee6e" compoundref="cv__bridge_2setup_8py" startline="5">setup.d</references>
        <references refid="examples__tools_8md_8txt_1a706b8cd9925dea99a8c064f39110620d">ROS_INFO_STREAM</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">SendCommand</referencedby>
        <referencedby refid="class_armor_tools_1ac7f632ed614b226cbc2b2fa352989643" compoundref="armor__tools_8cpp" startline="413" endline="418">PrintLastReq</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a2ca77741de4c8883b5be0d661f6b1320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmorTools::PrintResponse</definition>
        <argsstring>(armor_msgs::ArmorDirective &amp;d)</argsstring>
        <name>PrintResponse</name>
        <param>
          <type>armor_msgs::ArmorDirective &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>print the response to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the entire aRMOR directive message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="304" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="284" bodyend="306"/>
        <references refid="armor__tools_8h_1af4f289b8ad162b609975620166e3d407" compoundref="armor__tools_8h" startline="46">SS</references>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a060ea53faa9c0b619cd0d5ccec07b0fe" compoundref="erl2-oracle-user-manual_8md_8txt" startline="127">r</references>
        <references refid="namespacesetup_1aa2586b6c4dd84a0aaaf49cb1565cee6e" compoundref="cv__bridge_2setup_8py" startline="5">setup.d</references>
        <references refid="armor__tools_8h_1a7a571e6f0c662a683b2741f0e4cd4c26" compoundref="armor__tools_8h" startline="47">SSS</references>
        <references refid="examples__tools_8md_8txt_1a706b8cd9925dea99a8c064f39110620d">ROS_INFO_STREAM</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_tools_1ae1764835bfe65fabcb07757b0bb43f83" compoundref="armor__tools_8cpp" startline="403" endline="408">PrintLastRes</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a5bd0b3e9898d3bcf3dc82705d52495cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmorTools::SwitchDebugMode</definition>
        <argsstring>()</argsstring>
        <name>SwitchDebugMode</name>
        <briefdescription>
<para>toggle the debug mode </para>
        </briefdescription>
        <detaileddescription>
<para>This function switches the value <ref refid="class_armor_tools_1a8d4c23582a9a677ac69c07b08d5da436" kindref="member">ArmorTools::DebugMode</ref> each time it is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="315" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="311" bodyend="314"/>
        <references refid="class_armor_tools_1a8d4c23582a9a677ac69c07b08d5da436" compoundref="armor__tools_8h" startline="440">DebugMode</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a75474b9c35cbdcfedd382939c1699247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ArmorTools::GetLastErrorCode</definition>
        <argsstring>()</argsstring>
        <name>GetLastErrorCode</name>
        <briefdescription>
<para>err code referred to the last call </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="325" column="5" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="319" bodyend="322"/>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_cluedo_1a66ce2d9f5c665ab14761233b32ab1ec6" compoundref="armor__cluedo_8cpp" startline="34" endline="48">ArmorCluedo::Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a43702476c5d0763fc6b1f090b4531c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ArmorTools::GetLastErrorDescription</definition>
        <argsstring>()</argsstring>
        <name>GetLastErrorDescription</name>
        <briefdescription>
<para>last err description </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last error description </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="335" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="327" bodyend="330"/>
        <references refid="armor__tools_8h_1af4f289b8ad162b609975620166e3d407" compoundref="armor__tools_8h" startline="46">SS</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a21dae8ed16985d723cc5fefc2e70bcba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::Success</definition>
        <argsstring>()</argsstring>
        <name>Success</name>
        <briefdescription>
<para>check the &apos;success&apos; flag referred to the last aRMOR call </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>success or not</para>
</simplesect>
<simplesect kind="warning"><para>sometimes aRMOR uses the <bold>false</bold> answer as the correct answer, violating the semantic of the flag &apos;success&apos;. A case is the command <computeroutput>QUERY IND</computeroutput> which causes aRMOR to reply with <bold>success=false</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="351" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="335" bodyend="338"/>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ad7d22e2f0942c96ea2d5f02636610581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::LoadedOntology</definition>
        <argsstring>()</argsstring>
        <name>LoadedOntology</name>
        <briefdescription>
<para>check if the ontology was loaded or not </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>loaded or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="361" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a356ca7809be690be0a70a1ae33a850a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::TestInterface</definition>
        <argsstring>()</argsstring>
        <name>TestInterface</name>
        <briefdescription>
<para>check the status of the interface </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>valid inferface or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="371" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="351" bodyend="355"/>
        <references refid="armor__tools_8h_1a1107fec0585eb46c08431ef303413f01" compoundref="armor__tools_8h" startline="42">ARMOR_CHECK_INTERFACE</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_cluedo_1a66ce2d9f5c665ab14761233b32ab1ec6" compoundref="armor__cluedo_8cpp" startline="34" endline="48">ArmorCluedo::Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::SendCommand</definition>
        <argsstring>(std::string command, std::string first_spec=&quot;&quot;, std::string second_spec=&quot;&quot;, std::string arg1=&quot;&quot;, std::string arg2=&quot;&quot;, std::string arg3=&quot;&quot;, std::string arg4=&quot;&quot;, std::string arg5=&quot;&quot;, bool printRequest=false)</argsstring>
        <name>SendCommand</name>
        <param>
          <type>std::string</type>
          <declname>command</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>first_spec</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>second_spec</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg1</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg2</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg3</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg4</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg5</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>printRequest</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>fill in a command and send it to aRMOR </para>
        </briefdescription>
        <detaileddescription>
<para>Shortcut for the couple <ref refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" kindref="member">ArmorTools::GetRequest</ref> and Armor::CallArmor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>(mandatory) the main command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) the first specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) the second specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) (from 1 to 5) the arguments of the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>printResponse</parametername>
</parameternamelist>
<parameterdescription>
<para>print the request before calling the service</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="389" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="360" bodyend="380"/>
        <references refid="armor__tools_8h_1a1107fec0585eb46c08431ef303413f01" compoundref="armor__tools_8h" startline="42">ARMOR_CHECK_INTERFACE</references>
        <references refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" compoundref="armor__tools_8cpp" startline="82" endline="113">GetRequest</references>
        <references refid="class_armor_tools_1a451163e1278ec49f4d214b33111d166d" compoundref="armor__tools_8cpp" startline="260" endline="279">PrintRequest</references>
        <references refid="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" compoundref="armor__tools_8cpp" startline="118" endline="141">CallArmor</references>
        <referencedby refid="examples__tools_8md_8txt_1aebaf07d3de193ff93f8ca4969e941408" compoundref="examples__tools_8md_8txt" startline="184" endline="203">main</referencedby>
        <referencedby refid="class_armor_cluedo_1ad29930fec7803aed87b7244e73b98bff" compoundref="armor__cluedo_8cpp" startline="53" endline="76">ArmorCluedo::AddIndiv</referencedby>
        <referencedby refid="class_armor_cluedo_1a49216d015f97a9d510406a90e8c1fe30" compoundref="armor__cluedo_8cpp" startline="81" endline="92">ArmorCluedo::GetClassOfIndiv</referencedby>
        <referencedby refid="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" compoundref="armor__cluedo_8cpp" startline="97" endline="107">ArmorCluedo::GetIndivOfClass</referencedby>
        <referencedby refid="class_armor_cluedo_1a2086082362b61607798d6f968c263f9e" compoundref="armor__cluedo_8cpp" startline="112" endline="126">ArmorCluedo::ExistsIndiv</referencedby>
        <referencedby refid="class_armor_cluedo_1ad179234fd676874a09c267abb416d2da" compoundref="armor__cluedo_8cpp" startline="131" endline="145">ArmorCluedo::SetObjectProperty</referencedby>
        <referencedby refid="class_armor_cluedo_1a580aef3f0bf9dd1affd06c588e731ff5" compoundref="armor__cluedo_8cpp" startline="150" endline="160">ArmorCluedo::GetValuedOfIndiv</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a86644574dffd07a880d40f455d113782" compoundref="test__armor__cluedo_8cpp" startline="142" endline="208">armorTestSession</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a78703009283c736ea377ca3a343cbd58" compoundref="test__armor__cluedo_8cpp" startline="212" endline="353">armorTestSession2</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>armor_msgs::ArmorDirectiveRes &amp;</type>
        <definition>armor_msgs::ArmorDirectiveRes &amp; ArmorTools::GetLastRes</definition>
        <argsstring>()</argsstring>
        <name>GetLastRes</name>
        <briefdescription>
<para>get a reference to the last response </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the last response </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="409" column="31" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="385" bodyend="389"/>
        <references refid="examples__tools_8md_8txt_1a73a8bd208b47d12909d34a6961dc4394" compoundref="examples__tools_8md_8txt" startline="117">res</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="class_armor_cluedo_1a49216d015f97a9d510406a90e8c1fe30" compoundref="armor__cluedo_8cpp" startline="81" endline="92">ArmorCluedo::GetClassOfIndiv</referencedby>
        <referencedby refid="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" compoundref="armor__cluedo_8cpp" startline="97" endline="107">ArmorCluedo::GetIndivOfClass</referencedby>
        <referencedby refid="class_armor_cluedo_1a2086082362b61607798d6f968c263f9e" compoundref="armor__cluedo_8cpp" startline="112" endline="126">ArmorCluedo::ExistsIndiv</referencedby>
        <referencedby refid="class_armor_cluedo_1a580aef3f0bf9dd1affd06c588e731ff5" compoundref="armor__cluedo_8cpp" startline="150" endline="160">ArmorCluedo::GetValuedOfIndiv</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1a20fa164f2e3e13a48a417c419fd6cde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>armor_msgs::ArmorDirectiveReq &amp;</type>
        <definition>armor_msgs::ArmorDirectiveReq &amp; ArmorTools::GetLastReq</definition>
        <argsstring>()</argsstring>
        <name>GetLastReq</name>
        <briefdescription>
<para>get a reference to the last request </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>last sent request to aRMOR </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="419" column="31" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="394" bodyend="398"/>
        <references refid="examples__tools_8md_8txt_1a3ab222c417f68c76f410be52f2b31aab" compoundref="examples__tools_8md_8txt" startline="116">req</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ae1764835bfe65fabcb07757b0bb43f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmorTools::PrintLastRes</definition>
        <argsstring>()</argsstring>
        <name>PrintLastRes</name>
        <briefdescription>
<para>print the last response </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="427" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="403" bodyend="408"/>
        <references refid="class_armor_tools_1a2ca77741de4c8883b5be0d661f6b1320" compoundref="armor__tools_8cpp" startline="284" endline="306">PrintResponse</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a86644574dffd07a880d40f455d113782" compoundref="test__armor__cluedo_8cpp" startline="142" endline="208">armorTestSession</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a78703009283c736ea377ca3a343cbd58" compoundref="test__armor__cluedo_8cpp" startline="212" endline="353">armorTestSession2</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_tools_1ac7f632ed614b226cbc2b2fa352989643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmorTools::PrintLastReq</definition>
        <argsstring>()</argsstring>
        <name>PrintLastReq</name>
        <briefdescription>
<para>print the last request </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="435" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="413" bodyend="418"/>
        <references refid="class_armor_tools_1a451163e1278ec49f4d214b33111d166d" compoundref="armor__tools_8cpp" startline="260" endline="279">PrintRequest</references>
        <referencedby refid="example__armor__tools__1_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="example__armor__tools__1_8cpp" startline="35" endline="135">main</referencedby>
        <referencedby refid="test__armor__cluedo_8cpp_1a86644574dffd07a880d40f455d113782" compoundref="test__armor__cluedo_8cpp" startline="142" endline="208">armorTestSession</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_armor_tools_1a57b657d8afdad44cccfc824564bec285" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorTools::FileExist</definition>
        <argsstring>(std::string path)</argsstring>
        <name>FileExist</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="466" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_tools.cpp" bodystart="423" bodyend="426"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A minimal C++ client for aRMOR. </para>
    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="class_armor_tools" kindref="compound">ArmorTools</ref> aims at giving a first abstraction of the service aRMOR by providing few &quot;shortcuts&quot;. A strong point of this interface lies in the fact that a roscpp node can communicate with aRMOR through functions instead of direct callings to the service. <linebreak/>
</para>
<para>Another important feature is the debug mode: the programmer can turn on and off the messages inside the code, in order to understand what is going on &quot;underneath the hood&quot;. <linebreak/>
</para>
<para>The class lets the programmer to not waste time in fill in the ArmorDirective message each time: <emphasis>client_name</emphasis> and <emphasis>reference_name</emphasis> are set only once in the constructor, whereas the remaining fields can be set using functions. Also the connection is contained in the class, and there are checks for understanding if the connection is valid or not. <linebreak/>
 In the end, the class stores the last request and the last response at each call, so the programmer can easily retrieve them and print, again using function calls. <linebreak/>
</para>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>actually the class has some methods missing, for example methods for modifying client name and reference name.</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>sequential commands to aRMOR is not supported right now: only the single command service is used. </para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>the interface actually can load the ontology only from file. It could be a good idea to have tools also for loading it from another source. </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="class_armor_cluedo" kindref="compound">ArmorCluedo</ref> an applciation of <ref refid="test-the-project_8md_8txt_1a8dbc90314e0b72f878403cb5852150da" kindref="member">this</ref> <ref refid="update-navigation-manager_8md_8txt_1aff966e6007fd3c30d2aecc989c1a1671" kindref="member">interface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/EmaroLab/armor/blob/master/README.MD">the official aRMOR documentation</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ArmorCluedo</label>
        <link refid="class_armor_cluedo"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>ArmorTools</label>
        <link refid="class_armor_tools"/>
      </node>
    </inheritancegraph>
    <location file="robocluedo_armor/include/armor_tools/armor_tools.h" line="91" column="1" bodyfile="robocluedo_armor/include/armor_tools/armor_tools.h" bodystart="90" bodyend="467"/>
    <listofallmembers>
      <member refid="class_armor_tools_1a5097da3f3a0cfac66587a51a7a9ef527" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>ArmorSrv</name></member>
      <member refid="class_armor_tools_1a6692f463e8866859205d9a133a5f330f" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>ArmorTools</name></member>
      <member refid="class_armor_tools_1ae138e2b2ad40688ebf01879a11fd3b6d" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>ArmorTools</name></member>
      <member refid="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>CallArmor</name></member>
      <member refid="class_armor_tools_1a17e4a119ca303959221e8dd363b25cf6" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>ClientName</name></member>
      <member refid="class_armor_tools_1aa83ea5e064db6dc46c9056ddeeaabbc4" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>Connect</name></member>
      <member refid="class_armor_tools_1ad98c8e33df5d1ef3e4c69051ac0dd7ab" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>ConnectAndLoad</name></member>
      <member refid="class_armor_tools_1a8d4c23582a9a677ac69c07b08d5da436" prot="protected" virt="non-virtual"><scope>ArmorTools</scope><name>DebugMode</name></member>
      <member refid="class_armor_tools_1a57b657d8afdad44cccfc824564bec285" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>FileExist</name></member>
      <member refid="class_armor_tools_1a75474b9c35cbdcfedd382939c1699247" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>GetLastErrorCode</name></member>
      <member refid="class_armor_tools_1a43702476c5d0763fc6b1f090b4531c27" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>GetLastErrorDescription</name></member>
      <member refid="class_armor_tools_1a20fa164f2e3e13a48a417c419fd6cde3" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>GetLastReq</name></member>
      <member refid="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>GetLastRes</name></member>
      <member refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>GetRequest</name></member>
      <member refid="class_armor_tools_1a7bcc2e8468555db72c3c05be688b6339" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>IsLoadedInterface</name></member>
      <member refid="class_armor_tools_1a703ac31970956388e8fc2226c22f2cfd" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>LastReq</name></member>
      <member refid="class_armor_tools_1a3422980deb67ad5ed25bb3c8d3d22c3e" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>LastRes</name></member>
      <member refid="class_armor_tools_1ad7d22e2f0942c96ea2d5f02636610581" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>LoadedOntology</name></member>
      <member refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>LoadOntology</name></member>
      <member refid="class_armor_tools_1ac7f632ed614b226cbc2b2fa352989643" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>PrintLastReq</name></member>
      <member refid="class_armor_tools_1ae1764835bfe65fabcb07757b0bb43f83" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>PrintLastRes</name></member>
      <member refid="class_armor_tools_1a451163e1278ec49f4d214b33111d166d" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>PrintRequest</name></member>
      <member refid="class_armor_tools_1a2ca77741de4c8883b5be0d661f6b1320" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>PrintResponse</name></member>
      <member refid="class_armor_tools_1a392fddf75b194d5620d847787c1c4566" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>ReferenceName</name></member>
      <member refid="class_armor_tools_1ad26e4e69e7edcbde9789ca5301c6b4a5" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>SaveOntology</name></member>
      <member refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>SendCommand</name></member>
      <member refid="class_armor_tools_1a21dae8ed16985d723cc5fefc2e70bcba" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>Success</name></member>
      <member refid="class_armor_tools_1a5bd0b3e9898d3bcf3dc82705d52495cb" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>SwitchDebugMode</name></member>
      <member refid="class_armor_tools_1a356ca7809be690be0a70a1ae33a850a8" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>TestInterface</name></member>
      <member refid="class_armor_tools_1a0ddf26f9a388377a36263344b1cbf39f" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>UpdateOntology</name></member>
      <member refid="class_armor_tools_1a9f4fa5dc8becf3ae63ea9208cfe734cd" prot="private" virt="non-virtual"><scope>ArmorTools</scope><name>uri</name></member>
      <member refid="class_armor_tools_1a80eb8d13d6f5b61951ae53a764c3bb03" prot="public" virt="non-virtual"><scope>ArmorTools</scope><name>~ArmorTools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
