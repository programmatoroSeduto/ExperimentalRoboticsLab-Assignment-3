<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="utest__equi_8cpp" kind="file" language="C++">
    <compoundname>utest_equi.cpp</compoundname>
    <includes refid="pinhole__camera__model_8h" local="yes">image_geometry/pinhole_camera_model.h</includes>
    <includes local="no">sensor_msgs/distortion_models.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="9">
        <label>ros/macros.h</label>
      </node>
      <node id="3">
        <label>sensor_msgs/CameraInfo.h</label>
      </node>
      <node id="10">
        <label>sensor_msgs/distortion_models.h</label>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="4">
        <label>opencv2/core/mat.hpp</label>
      </node>
      <node id="5">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="8">
        <label>exports.h</label>
        <link refid="exports_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>gtest/gtest.h</label>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp</label>
        <link refid="utest__equi_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>image_geometry/pinhole_camera_model.h</label>
        <link refid="pinhole__camera__model_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_equidistant_test" prot="public">EquidistantTest</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EquidistantTest, accessorsCorrect)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref></type>
        </param>
        <param>
          <type>accessorsCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="47" column="1" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="utest__equi_8cpp_1aaf58cea4b7baf29bc63ab2568c7b4564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EquidistantTest, projectPoint)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref></type>
        </param>
        <param>
          <type>projectPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="56" column="1" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="56" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="utest__equi_8cpp_1a3bc17170fe1f2929af04532434e69c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EquidistantTest, rectifyPoint)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref></type>
        </param>
        <param>
          <type>rectifyPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000026"><xreftitle>Todo</xreftitle><xrefdescription><para>Need R = identity for the principal point tests. </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="90" column="1" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="90" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="utest__equi_8cpp_1a032cd186ecbe05bb758caec158e83ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EquidistantTest, getDeltas)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref></type>
        </param>
        <param>
          <type>getDeltas</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="133" column="1" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="133" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="utest__equi_8cpp_1af6c4da24d6d346c03f0af34943e476e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EquidistantTest, initialization)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref></type>
        </param>
        <param>
          <type>initialization</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="149" column="1" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="149" bodyend="160"/>
        <references refid="classimage__geometry_1_1_pinhole_camera_model_1adcf644e58628954d28a89473beb4a03c" compoundref="pinhole__camera__model_8cpp" startline="97" endline="223">image_geometry::PinholeCameraModel::fromCameraInfo</references>
        <references refid="classimage__geometry_1_1_pinhole_camera_model_1a39cf1b29b5704273c15723b608061052" compoundref="pinhole__camera__model_8h" startline="264" endline="264">image_geometry::PinholeCameraModel::initialized</references>
        <references refid="classimage__geometry_1_1_pinhole_camera_model_1a97b4afee71dcadcd3daf3887c3cf7074" compoundref="pinhole__camera__model_8h" startline="307" endline="307">image_geometry::PinholeCameraModel::projectionMatrix</references>
      </memberdef>
      <memberdef kind="function" id="utest__equi_8cpp_1a2f8893eef961af6d1cf2d169da04c7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EquidistantTest, rectifyIfCalibrated)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref></type>
        </param>
        <param>
          <type>rectifyIfCalibrated</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000027"><xreftitle>Todo</xreftitle><xrefdescription><para>use forward distortion for a better test </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="162" column="1" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="162" bodyend="251"/>
        <references refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" compoundref="rosfacedetect_8py" startline="41">rosfacedetect.type</references>
        <references refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" compoundref="bug__m_8py" startline="51">bug_m.y</references>
        <references refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" compoundref="bug__m_8py" startline="50">bug_m.x</references>
      </memberdef>
      <memberdef kind="function" id="utest__equi_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" line="253" column="5" bodyfile="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp" bodystart="253" bodyend="257"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pinhole__camera__model_8h" kindref="compound">image_geometry/pinhole_camera_model.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sensor_msgs/distortion_models.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="class_equidistant_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>testing::Test</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14" refid="class_equidistant_test_1aba1177ec24f2d85b20003905baeb3c8c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_equidistant_test_1aba1177ec24f2d85b20003905baeb3c8c" kindref="member">SetUp</ref>()</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>parameters<sp/>are<sp/>taken<sp/>from<sp/>a<sp/>real<sp/>camera<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D[]<sp/>=<sp/>{-0.08857683871674071,<sp/>0.0708113094372378,<sp/>-0.09127623055964429,<sp/>0.04006922269778478};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>K[]<sp/>=<sp/>{403.603063319358,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>306.15842863283063,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>403.7028851121003,<sp/>261.09715697592696,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R[]<sp/>=<sp/>{0.999963944103842,<sp/>-0.008484152966323483,<sp/>0.00036005656766869323,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.008484153516269438,<sp/>0.9999640089218772,<sp/>0.0,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.0003600436088446379,<sp/>3.0547751946422504e-06,<sp/>0.999999935179632};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P[]<sp/>=<sp/>{347.2569964503485,<sp/>0.0,<sp/>350.5,<sp/>0.0,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>347.2569964503485,<sp/>256.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tf_frame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.height<sp/>=<sp/>512;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.width<sp/><sp/>=<sp/>640;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>ROI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.D.resize(4);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(D,<sp/>D+4,<sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.D.begin());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(K,<sp/>K+9,<sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.K.begin());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(R,<sp/>R+9,<sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.R.begin());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(P,<sp/>P+12,<sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.P.begin());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>.distortion_model<sp/>=<sp/><ref refid="namespaceimage__geometry_1a424126c810dda1c6323db253370fca12aae55a7fc987f7dfc00e592cfbd7c3365" kindref="member">sensor_msgs::distortion_models::EQUIDISTANT</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equidistant_test_1a52d309d7a7f83c515b2e375807b22c5b" kindref="member">model_</ref>.<ref refid="classimage__geometry_1_1_pinhole_camera_model_1adcf644e58628954d28a89473beb4a03c" kindref="member">fromCameraInfo</ref>(<ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" refkind="member"><highlight class="normal"><sp/><sp/>sensor_msgs::CameraInfo<sp/><ref refid="class_equidistant_test_1a35bc440d5557ab078b551899c988accb" kindref="member">cam_info_</ref>;</highlight></codeline>
<codeline lineno="44" refid="class_equidistant_test_1a52d309d7a7f83c515b2e375807b22c5b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classimage__geometry_1_1_pinhole_camera_model" kindref="compound">image_geometry::PinholeCameraModel</ref><sp/><ref refid="class_equidistant_test_1a52d309d7a7f83c515b2e375807b22c5b" kindref="member">model_</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" refkind="member"><highlight class="normal"><ref refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" kindref="member">TEST_F</ref>(<ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref>,<sp/>accessorsCorrect)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;tf_frame&quot;</highlight><highlight class="normal">,<sp/>model_.tfFrame().c_str());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>EXPECT_EQ(cam_info_.P[0],<sp/>model_.fx());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>EXPECT_EQ(cam_info_.P[5],<sp/>model_.fy());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>EXPECT_EQ(cam_info_.P[2],<sp/>model_.cx());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>EXPECT_EQ(cam_info_.P[6],<sp/>model_.cy());</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="utest__equi_8cpp_1aaf58cea4b7baf29bc63ab2568c7b4564" refkind="member"><highlight class="normal"><ref refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" kindref="member">TEST_F</ref>(<ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref>,<sp/>projectPoint)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Spot<sp/>test<sp/>an<sp/>arbitrary<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv(100,<sp/>100);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point3d<sp/>xyz<sp/>=<sp/><sp/>model_.projectPixelTo3dRay(uv);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(-0.72136775518018115,<sp/>xyz.x,<sp/>1e-8);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(-0.449235009214005,<sp/>xyz.y,<sp/>1e-8);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(1.0,<sp/>xyz.z);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Principal<sp/>point<sp/>should<sp/>project<sp/>straight<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv(model_.cx(),<sp/>model_.cy());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point3d<sp/>xyz<sp/>=<sp/>model_.projectPixelTo3dRay(uv);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>xyz.x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>xyz.y);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(1.0,<sp/>xyz.z);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>projecting<sp/>to<sp/>3d<sp/>and<sp/>back<sp/>over<sp/>entire<sp/>image<sp/>is<sp/>accurate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;=<sp/>cam_info_.height;<sp/>row<sp/>+=<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;=<sp/>cam_info_.width;<sp/>col<sp/>+=<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv(row,<sp/>col),<sp/>uv_back;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point3d<sp/>xyz<sp/>=<sp/>model_.projectPixelTo3dRay(uv);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uv_back<sp/>=<sp/>model_.project3dToPixel(xyz);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Measured<sp/>max<sp/>error<sp/>at<sp/>1.13687e-13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv.x,<sp/>uv_back.x,<sp/>1.14e-13)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;at<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv.y,<sp/>uv_back.y,<sp/>1.14e-13)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;at<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="utest__equi_8cpp_1a3bc17170fe1f2929af04532434e69c06" refkind="member"><highlight class="normal"><ref refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" kindref="member">TEST_F</ref>(<ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref>,<sp/>rectifyPoint)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Spot<sp/>test<sp/>an<sp/>arbitrary<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv_raw(100,<sp/>100),<sp/>uv_rect;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>uv_rect<sp/>=<sp/>model_.rectifyPoint(uv_raw);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(135.45747375488281,<sp/>uv_rect.x);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(84.945091247558594,<sp/>uv_rect.y);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>rectifyPoint<sp/>takes<sp/>(c&apos;x,<sp/>c&apos;y)<sp/>[from<sp/>K]<sp/>-&gt;<sp/>(cx,<sp/>cy)<sp/>[from<sp/>P].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cxp<sp/>=<sp/>model_.intrinsicMatrix()(0,2),<sp/>cyp<sp/>=<sp/>model_.intrinsicMatrix()(1,2);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv_raw(cxp,<sp/>cyp),<sp/>uv_rect;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>model_.rectifyPoint(uv_raw,<sp/>uv_rect);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv_rect.x,<sp/>model_.cx(),<sp/>1e-4);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv_rect.y,<sp/>model_.cy(),<sp/>1e-4);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>unrectifyPoint<sp/>takes<sp/>(cx,<sp/>cy)<sp/>[from<sp/>P]<sp/>-&gt;<sp/>(c&apos;x,<sp/>c&apos;y)<sp/>[from<sp/>K].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv_rect(model_.cx(),<sp/>model_.cy()),<sp/>uv_raw;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>model_.unrectifyPoint(uv_rect,<sp/>uv_raw);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv_raw.x,<sp/>cxp,<sp/>1e-4);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv_raw.y,<sp/>cyp,<sp/>1e-4);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>rectifying<sp/>then<sp/>unrectifying<sp/>is<sp/>accurate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;=<sp/>cam_info_.height;<sp/>row<sp/>+=<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;=<sp/>cam_info_.width;<sp/>col<sp/>+=<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point2d<sp/>uv_raw(row,<sp/>col),<sp/>uv_rect,<sp/>uv_unrect;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uv_rect<sp/>=<sp/>model_.rectifyPoint(uv_raw);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uv_unrect<sp/>=<sp/>model_.unrectifyPoint(uv_rect);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv_raw.x,<sp/>uv_unrect.x,<sp/>0.01);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NEAR(uv_raw.y,<sp/>uv_unrect.y,<sp/>0.01);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="utest__equi_8cpp_1a032cd186ecbe05bb758caec158e83ccf" refkind="member"><highlight class="normal"><ref refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" kindref="member">TEST_F</ref>(<ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref>,<sp/>getDeltas)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>100.0,<sp/>v<sp/>=<sp/>200.0,<sp/>du<sp/>=<sp/>17.0,<sp/>dv<sp/>=<sp/>23.0,<sp/>Z<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>cv::Point2d<sp/>uv0(u,<sp/>v),<sp/>uv1(u<sp/>+<sp/>du,<sp/>v<sp/>+<sp/>dv);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>cv::Point3d<sp/>xyz0,<sp/>xyz1;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>xyz0<sp/>=<sp/>model_.projectPixelTo3dRay(uv0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>xyz0<sp/>*=<sp/>(Z<sp/>/<sp/>xyz0.z);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>xyz1<sp/>=<sp/>model_.projectPixelTo3dRay(uv1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>xyz1<sp/>*=<sp/>(Z<sp/>/<sp/>xyz1.z);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(model_.getDeltaU(xyz1.x<sp/>-<sp/>xyz0.x,<sp/>Z),<sp/>du,<sp/>1e-4);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(model_.getDeltaV(xyz1.y<sp/>-<sp/>xyz0.y,<sp/>Z),<sp/>dv,<sp/>1e-4);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(model_.getDeltaX(du,<sp/>Z),<sp/>xyz1.x<sp/>-<sp/>xyz0.x,<sp/>1e-4);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(model_.getDeltaY(dv,<sp/>Z),<sp/>xyz1.y<sp/>-<sp/>xyz0.y,<sp/>1e-4);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="utest__equi_8cpp_1af6c4da24d6d346c03f0af34943e476e8" refkind="member"><highlight class="normal"><ref refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" kindref="member">TEST_F</ref>(<ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref>,<sp/>initialization)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::CameraInfo<sp/>info;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classimage__geometry_1_1_pinhole_camera_model" kindref="compound">image_geometry::PinholeCameraModel</ref><sp/>camera;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>camera.<ref refid="classimage__geometry_1_1_pinhole_camera_model_1adcf644e58628954d28a89473beb4a03c" kindref="member">fromCameraInfo</ref>(info);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(camera.<ref refid="classimage__geometry_1_1_pinhole_camera_model_1a39cf1b29b5704273c15723b608061052" kindref="member">initialized</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(camera.<ref refid="classimage__geometry_1_1_pinhole_camera_model_1a97b4afee71dcadcd3daf3887c3cf7074" kindref="member">projectionMatrix</ref>().rows,<sp/>3);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(camera.<ref refid="classimage__geometry_1_1_pinhole_camera_model_1a97b4afee71dcadcd3daf3887c3cf7074" kindref="member">projectionMatrix</ref>().cols,<sp/>4);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="utest__equi_8cpp_1a2f8893eef961af6d1cf2d169da04c7d8" refkind="member"><highlight class="normal"><ref refid="utest__equi_8cpp_1ac4a62f029d22ca89d0217e413c903f40" kindref="member">TEST_F</ref>(<ref refid="class_equidistant_test" kindref="compound">EquidistantTest</ref>,<sp/>rectifyIfCalibrated)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally<sp/>this<sp/>test<sp/>would<sp/>have<sp/>two<sp/>images<sp/>stored<sp/>on<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>which<sp/>is<sp/>distorted<sp/>and<sp/>the<sp/>other<sp/>which<sp/>is<sp/>rectified,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>rectification<sp/>would<sp/>take<sp/>place<sp/>here<sp/>and<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>compared<sp/>to<sp/>the<sp/>one<sp/>on<sp/>disk<sp/>(which<sp/>would<sp/>mean<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>distortion<sp/>coefficients<sp/>above<sp/>can&apos;t<sp/>change<sp/>once<sp/>paired<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>image).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Later<sp/>could<sp/>incorporate<sp/>distort<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(https://github.com/lucasw/vimjay/blob/master/src/standalone/distort_image.cpp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>take<sp/>any<sp/>image<sp/>distort<sp/>it,<sp/>then<sp/>undistort<sp/>with<sp/>rectifyImage,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>given<sp/>the<sp/>distortion<sp/>coefficients<sp/>are<sp/>consistent<sp/>the<sp/>input<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>final<sp/>output<sp/>image<sp/>should<sp/>be<sp/>mostly<sp/>the<sp/>same<sp/>(though<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolation<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>creeps<sp/>in),<sp/>except<sp/>for<sp/>outside<sp/>a<sp/>masked<sp/>region<sp/>where<sp/>information<sp/>was<sp/>lost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>masked<sp/>region<sp/>can<sp/>be<sp/>generated<sp/>with<sp/>a<sp/>pure<sp/>white<sp/>image<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>goes<sp/>through<sp/>the<sp/>same<sp/>process<sp/>(if<sp/>it<sp/>comes<sp/>out<sp/>completely<sp/>black</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>distortion<sp/>parameters<sp/>are<sp/>problematic).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now<sp/>generate<sp/>an<sp/>image<sp/>and<sp/>pass<sp/>the<sp/>test<sp/>simply<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>rectified<sp/>image<sp/>does<sp/>not<sp/>match<sp/>the<sp/>distorted<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>zero<sp/>out<sp/>the<sp/>first<sp/>distortion<sp/>coefficient<sp/>and<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>zero<sp/>out<sp/>all<sp/>the<sp/>distortion<sp/>coefficients<sp/>and<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>output<sp/>image<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>distorted_image(cv::Size(cam_info_.width,<sp/>cam_info_.height),<sp/>CV_8UC3,<sp/>cv::Scalar(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>a<sp/>grid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Scalar<sp/>color<sp/>=<sp/>cv::Scalar(255,<sp/>255,<sp/>255);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>lines<sp/>thick<sp/>so<sp/>the<sp/>proportion<sp/>of<sp/>error<sp/>due<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolation<sp/>is<sp/>reduced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thickness<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref><sp/>=<sp/>0;<sp/><ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref><sp/>&lt;=<sp/>cam_info_.height;<sp/><ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref><sp/>+=<sp/>cam_info_.height/10)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::line(distorted_image,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point(0,<sp/><ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref>),<sp/>cv::Point(cam_info_.width,<sp/><ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref>),</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/>thickness);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref><sp/>=<sp/>0;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref><sp/>&lt;=<sp/>cam_info_.width;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref><sp/>+=<sp/>cam_info_.width/10)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>lines<sp/>thick<sp/>so<sp/>the<sp/>prorportion<sp/>of<sp/>interpolation<sp/>error<sp/>is<sp/>reduced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::line(distorted_image,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>,<sp/>0),<sp/>cv::Point(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>,<sp/>cam_info_.height),</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/><ref refid="namespacerosfacedetect_1aa846ed4b5a4bf1b026629f15f519db9f" kindref="member">type</ref>,<sp/>thickness);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>rectified_image;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>making<sp/>this<sp/>number<sp/>up,<sp/>maybe<sp/>ought<sp/>to<sp/>be<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>a<sp/>completely<sp/>different<sp/>image<sp/>would<sp/>be<sp/>on<sp/>the<sp/>order<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width<sp/>*<sp/>height<sp/>*<sp/>255<sp/>=<sp/>78e6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff_threshold<sp/>=<sp/>10000.0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>rectified<sp/>image<sp/>is<sp/>sufficiently<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>default<sp/>distortion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>model_.rectifyImage(distorted_image,<sp/>rectified_image);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>cv::norm(distorted_image,<sp/>rectified_image,<sp/>cv::NORM_L1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>making<sp/>this<sp/>number<sp/>up,<sp/>maybe<sp/>ought<sp/>to<sp/>be<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>EXPECT_GT(error,<sp/>diff_threshold);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>rectified<sp/>image<sp/>is<sp/>sufficiently<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>default<sp/>distortion<sp/>but<sp/>with<sp/>first<sp/>element<sp/>zeroed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>sensor_msgs::CameraInfo<sp/>cam_info_2<sp/>=<sp/>cam_info_;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>cam_info_2.D[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>model_.fromCameraInfo(cam_info_2);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>model_.rectifyImage(distorted_image,<sp/>rectified_image);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>cv::norm(distorted_image,<sp/>rectified_image,<sp/>cv::NORM_L1);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>EXPECT_GT(error,<sp/>diff_threshold);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>rectified<sp/>image<sp/>is<sp/>the<sp/>same<sp/>using<sp/>zero<sp/>distortion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>cam_info_2.D.assign(cam_info_2.D.size(),<sp/>0);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>model_.fromCameraInfo(cam_info_2);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>model_.rectifyImage(distorted_image,<sp/>rectified_image);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>cv::norm(distorted_image,<sp/>rectified_image,<sp/>cv::NORM_L1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>EXPECT_EQ(error,<sp/>0);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>rectified<sp/>image<sp/>is<sp/>the<sp/>same<sp/>using<sp/>empty<sp/>distortion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>cam_info_2.D.clear();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>model_.fromCameraInfo(cam_info_2);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>model_.rectifyImage(distorted_image,<sp/>rectified_image);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>cv::norm(distorted_image,<sp/>rectified_image,<sp/>cv::NORM_L1);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>EXPECT_EQ(error,<sp/>0);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>original<sp/>distortion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>model_.fromCameraInfo(cam_info_);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="utest__equi_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utest__equi_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/vision_opencv/image_geometry/test/utest_equi.cpp"/>
  </compounddef>
</doxygen>
