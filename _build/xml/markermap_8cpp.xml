<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="markermap_8cpp" kind="file" language="C++">
    <compoundname>markermap.cpp</compoundname>
    <includes refid="markermap_8h" local="yes">markermap.h</includes>
    <includes refid="dictionary_8h" local="yes">dictionary.h</includes>
    <includes local="no">opencv2/calib3d.hpp</includes>
    <includes local="no">opencv2/imgproc.hpp</includes>
    <includes local="no">fstream</includes>
    <incdepgraph>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="2">
        <label>markermap.h</label>
        <link refid="markermap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>opencv2/imgproc.hpp</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="13">
        <label>opencv2/calib3d.hpp</label>
      </node>
      <node id="15">
        <label>fstream</label>
      </node>
      <node id="10">
        <label>dictionary.h</label>
        <link refid="dictionary_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>opencv2/core.hpp</label>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/aruco_ros/aruco/src/aruco/markermap.cpp</label>
        <link refid="markermap_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="3">
        <label>aruco_export.h</label>
        <link refid="aruco__export_8h"/>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>marker.h</label>
        <link refid="marker_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacearuco">aruco</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="29"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="markermap_8h" kindref="compound">markermap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dictionary_8h" kindref="compound">dictionary.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/calib3d.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/imgproc.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearuco" kindref="compound">aruco</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classaruco_1_1_marker3_d_info_1aeab8b789a0141d38151b2e7d9bd94456" refkind="member"><highlight class="normal"><ref refid="classaruco_1_1_marker3_d_info_1aeab8b789a0141d38151b2e7d9bd94456" kindref="member">Marker3DInfo::Marker3DInfo</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classaruco_1_1_marker3_d_info_1a7844f86218603a621bf3d0b432aedb53" refkind="member"><highlight class="normal"><ref refid="classaruco_1_1_marker3_d_info_1aeab8b789a0141d38151b2e7d9bd94456" kindref="member">Marker3DInfo::Marker3DInfo</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_id)<sp/>:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>id(_id)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classaruco_1_1_marker_map_1a2cbe9f978ca45b049ea96f84cf899ea9" refkind="member"><highlight class="normal"><ref refid="classaruco_1_1_marker_map_1a2cbe9f978ca45b049ea96f84cf899ea9" kindref="member">MarkerMap::MarkerMap</ref>()</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>=<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a76aa2534eb74133e8b71ecc1d9aa7153" kindref="member">NONE</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classaruco_1_1_marker_map_1a0168f97ca3b454951389b116105d258f" refkind="member"><highlight class="normal"><ref refid="classaruco_1_1_marker_map_1a2cbe9f978ca45b049ea96f84cf899ea9" kindref="member">MarkerMap::MarkerMap</ref>(std::string<sp/>filePath)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>=<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a76aa2534eb74133e8b71ecc1d9aa7153" kindref="member">NONE</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_marker_map_1a29281f49985496b4ea640b3209729f33" kindref="member">readFromFile</ref>(filePath);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classaruco_1_1_marker_map_1aee1e1a9e395c6e15fea1d35b23ebe928" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1aee1e1a9e395c6e15fea1d35b23ebe928" kindref="member">MarkerMap::saveToFile</ref>(std::string<sp/>sfile)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>cv::FileStorage<sp/>fs(sfile,<sp/>cv::FileStorage::WRITE);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_marker_map_1aee1e1a9e395c6e15fea1d35b23ebe928" kindref="member">saveToFile</ref>(fs);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1aee1e1a9e395c6e15fea1d35b23ebe928" kindref="member">MarkerMap::saveToFile</ref>(cv::FileStorage&amp;<sp/>fs)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;aruco_bc_dict&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dictionary;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;aruco_bc_nmarkers&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(int)size();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;aruco_bc_mInfoType&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(int)<ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;aruco_bc_markers&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>i++)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at(i).id;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;corners&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>at(i).size();<sp/>c++)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/>at(i)[c];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classaruco_1_1_marker_map_1a29281f49985496b4ea640b3209729f33" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1a29281f49985496b4ea640b3209729f33" kindref="member">MarkerMap::readFromFile</ref>(std::string<sp/>sfile)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::FileStorage<sp/>fs(sfile,<sp/>cv::FileStorage::READ);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fs.isOpened())</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(81818,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::readFromFile&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>file<sp/>not<sp/>opened<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>sfile,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classaruco_1_1_marker_map_1a29281f49985496b4ea640b3209729f33" kindref="member">readFromFile</ref>(fs);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>ex)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(81818,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::readFromFile&quot;</highlight><highlight class="normal">,<sp/>ex.what()<sp/>+<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>file=)&quot;</highlight><highlight class="normal">)<sp/>+<sp/>sfile,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1a29281f49985496b4ea640b3209729f33" kindref="member">MarkerMap::readFromFile</ref>(cv::FileStorage&amp;<sp/>fs)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aux<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>the<sp/>nmarkers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs[</highlight><highlight class="stringliteral">&quot;aruco_bc_nmarkers&quot;</highlight><highlight class="normal">].name()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;aruco_bc_nmarkers&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(81818,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::readFromFile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>file<sp/>type&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>fs[</highlight><highlight class="stringliteral">&quot;aruco_bc_nmarkers&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>aux;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>resize(aux);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>fs[</highlight><highlight class="stringliteral">&quot;aruco_bc_mInfoType&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/><ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>cv::FileNode<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref><sp/>=<sp/>fs[</highlight><highlight class="stringliteral">&quot;aruco_bc_markers&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cv::FileNodeIterator<sp/>it<sp/>=<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>.end();<sp/>++it,<sp/>i++)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>at(i).id<sp/>=<sp/>(*it)[</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::FileNode<sp/>FnCorners<sp/>=<sp/>(*it)[</highlight><highlight class="stringliteral">&quot;corners&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cv::FileNodeIterator<sp/>itc<sp/>=<sp/>FnCorners.begin();<sp/>itc<sp/>!=<sp/>FnCorners.end();<sp/>++itc)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>coordinates3d;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*itc)<sp/>&gt;&gt;<sp/>coordinates3d;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coordinates3d.size()<sp/>!=<sp/>3)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(81818,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::readFromFile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>file<sp/>type<sp/>3&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point3f<sp/>point(coordinates3d[0],<sp/>coordinates3d[1],<sp/>coordinates3d[2]);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>at(i).push_back(point);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs[</highlight><highlight class="stringliteral">&quot;aruco_bc_dict&quot;</highlight><highlight class="normal">].name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;aruco_bc_dict&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>fs[</highlight><highlight class="stringliteral">&quot;aruco_bc_dict&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>dictionary;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classaruco_1_1_marker_map_1aa67cde0f07efb989485314800930e3ca" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1aa67cde0f07efb989485314800930e3ca" kindref="member">MarkerMap::getIndexOfMarkerId</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="157"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>i++)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at(i).id<sp/>==<sp/>id)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classaruco_1_1_marker_map_1af2ba172a21eba9a49e6b9721f3504bf5" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker3_d_info" kindref="compound">Marker3DInfo</ref>&amp;<sp/><ref refid="classaruco_1_1_marker_map_1af2ba172a21eba9a49e6b9721f3504bf5" kindref="member">MarkerMap::getMarker3DInfo</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>i++)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at(i).id<sp/>==<sp/>id)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at(i);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(111,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::getMarker3DInfo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Marker<sp/>with<sp/>the<sp/>id<sp/>given<sp/>is<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="namespacearuco_1ad759f5744ed84933588772d5c01b789f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1ad759f5744ed84933588772d5c01b789f" kindref="member">__glGetModelViewMatrix</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>modelview_matrix[16],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>Rvec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>Tvec)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>parameters<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>!invalid;<sp/>i++)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>!=<sp/>-999999)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invalid<sp/>|=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>!=<sp/>-999999)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invalid<sp/>|=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalid)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(9002,<sp/></highlight><highlight class="stringliteral">&quot;extrinsic<sp/>parameters<sp/>are<sp/>not<sp/>set&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Marker::getModelViewMatrix&quot;</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Rot(3,<sp/>3,<sp/>CV_32FC1),<sp/>Jacob;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>cv::Rodrigues(Rvec,<sp/>Rot,<sp/>Jacob);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>para[3][4];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>para[i][j]<sp/>=<sp/>Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>j);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>add<sp/>the<sp/>translation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>para[0][3]<sp/>=<sp/>Tvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>para[1][3]<sp/>=<sp/>Tvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>0);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>para[2][3]<sp/>=<sp/>Tvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>modelview_matrix[0<sp/>+<sp/>0<sp/>*<sp/>4]<sp/>=<sp/>para[0][0];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>R1C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>modelview_matrix[0<sp/>+<sp/>1<sp/>*<sp/>4]<sp/>=<sp/>para[0][1];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>modelview_matrix[0<sp/>+<sp/>2<sp/>*<sp/>4]<sp/>=<sp/>para[0][2];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>modelview_matrix[0<sp/>+<sp/>3<sp/>*<sp/>4]<sp/>=<sp/>para[0][3];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>R2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>modelview_matrix[1<sp/>+<sp/>0<sp/>*<sp/>4]<sp/>=<sp/>para[1][0];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>modelview_matrix[1<sp/>+<sp/>1<sp/>*<sp/>4]<sp/>=<sp/>para[1][1];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>modelview_matrix[1<sp/>+<sp/>2<sp/>*<sp/>4]<sp/>=<sp/>para[1][2];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>modelview_matrix[1<sp/>+<sp/>3<sp/>*<sp/>4]<sp/>=<sp/>para[1][3];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>R3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>modelview_matrix[2<sp/>+<sp/>0<sp/>*<sp/>4]<sp/>=<sp/>-para[2][0];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>modelview_matrix[2<sp/>+<sp/>1<sp/>*<sp/>4]<sp/>=<sp/>-para[2][1];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>modelview_matrix[2<sp/>+<sp/>2<sp/>*<sp/>4]<sp/>=<sp/>-para[2][2];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>modelview_matrix[2<sp/>+<sp/>3<sp/>*<sp/>4]<sp/>=<sp/>-para[2][3];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>modelview_matrix[3<sp/>+<sp/>0<sp/>*<sp/>4]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>modelview_matrix[3<sp/>+<sp/>1<sp/>*<sp/>4]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>modelview_matrix[3<sp/>+<sp/>2<sp/>*<sp/>4]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>modelview_matrix[3<sp/>+<sp/>3<sp/>*<sp/>4]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>!=<sp/>0.0)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>modelview_matrix[12]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>modelview_matrix[13]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>modelview_matrix[14]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="namespacearuco_1a3197db6116a3222abc76fd147c4c90ca" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1a3197db6116a3222abc76fd147c4c90ca" kindref="member">__OgreGetPoseParameters</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>position[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>orientation[4],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>Rvec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>Tvec)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>parameters<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>!invalid;<sp/>i++)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>!=<sp/>-999999)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invalid<sp/>|=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rvec.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>!=<sp/>-999999)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invalid<sp/>|=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalid)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(9003,<sp/></highlight><highlight class="stringliteral">&quot;extrinsic<sp/>parameters<sp/>are<sp/>not<sp/>set&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Marker::getModelViewMatrix&quot;</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>position<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>position[0]<sp/>=<sp/>-Tvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[0];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>position[1]<sp/>=<sp/>-Tvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[1];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>position[2]<sp/>=<sp/>+Tvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[2];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>calculate<sp/>orientation<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Rot(3,<sp/>3,<sp/>CV_32FC1);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>cv::Rodrigues(Rvec,<sp/>Rot);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>axes<sp/>for<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stAxes[3][3];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>stAxes[0][0]<sp/>=<sp/>-Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>stAxes[0][1]<sp/>=<sp/>-Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>0);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>stAxes[0][2]<sp/>=<sp/>+Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>0);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>stAxes[1][0]<sp/>=<sp/>-Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>1);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>stAxes[1][1]<sp/>=<sp/>-Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>1);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>stAxes[1][2]<sp/>=<sp/>+Rot.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>1);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>z<sp/>axis,<sp/>we<sp/>use<sp/>cross<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>stAxes[2][0]<sp/>=<sp/>stAxes[0][1]<sp/>*<sp/>stAxes[1][2]<sp/>-<sp/>stAxes[0][2]<sp/>*<sp/>stAxes[1][1];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>stAxes[2][1]<sp/>=<sp/>-stAxes[0][0]<sp/>*<sp/>stAxes[1][2]<sp/>+<sp/>stAxes[0][2]<sp/>*<sp/>stAxes[1][0];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>stAxes[2][2]<sp/>=<sp/>stAxes[0][0]<sp/>*<sp/>stAxes[1][1]<sp/>-<sp/>stAxes[0][1]<sp/>*<sp/>stAxes[1][0];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transposed<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>axes[3][3];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>axes[0][0]<sp/>=<sp/>stAxes[0][0];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>axes[1][0]<sp/>=<sp/>stAxes[0][1];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>axes[2][0]<sp/>=<sp/>stAxes[0][2];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>axes[0][1]<sp/>=<sp/>stAxes[1][0];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>axes[1][1]<sp/>=<sp/>stAxes[1][1];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>axes[2][1]<sp/>=<sp/>stAxes[1][2];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>axes[0][2]<sp/>=<sp/>stAxes[2][0];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>axes[1][2]<sp/>=<sp/>stAxes[2][1];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>axes[2][2]<sp/>=<sp/>stAxes[2][2];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Algorithm<sp/>in<sp/>Ken<sp/>Shoemake&apos;s<sp/>article<sp/>in<sp/>1987<sp/>SIGGRAPH<sp/>course<sp/>notes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>article<sp/>&quot;Quaternion<sp/>Calculus<sp/>and<sp/>Fast<sp/>Animation&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fTrace<sp/>=<sp/>axes[0][0]<sp/>+<sp/>axes[1][1]<sp/>+<sp/>axes[2][2];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fRoot;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fTrace<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|w|<sp/>&gt;<sp/>1/2,<sp/>may<sp/>as<sp/>well<sp/>choose<sp/>w<sp/>&gt;<sp/>1/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>fRoot<sp/>=<sp/>std::sqrt(fTrace<sp/>+<sp/>1.0);<sp/></highlight><highlight class="comment">//<sp/>2w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation[0]<sp/>=<sp/>0.5<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>fRoot<sp/>=<sp/>0.5<sp/>/<sp/>fRoot;<sp/></highlight><highlight class="comment">//<sp/>1/(4w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation[1]<sp/>=<sp/>(axes[2][1]<sp/>-<sp/>axes[1][2])<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation[2]<sp/>=<sp/>(axes[0][2]<sp/>-<sp/>axes[2][0])<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation[3]<sp/>=<sp/>(axes[1][0]<sp/>-<sp/>axes[0][1])<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|w|<sp/>&lt;=<sp/>1/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_iNext[3]<sp/>=<sp/>{1,<sp/>2,<sp/>0};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axes[1][1]<sp/>&gt;<sp/>axes[0][0])</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axes[2][2]<sp/>&gt;<sp/>axes[i][i])</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>s_iNext[i];</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>s_iNext[j];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>fRoot<sp/>=<sp/>std::sqrt(axes[i][i]<sp/>-<sp/>axes[j][j]<sp/>-<sp/>axes[k][k]<sp/>+<sp/>1.0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>apkQuat[3]<sp/>=<sp/>{&amp;orientation[1],<sp/>&amp;orientation[2],<sp/>&amp;orientation[3]};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>*apkQuat[i]<sp/>=<sp/>0.5<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fRoot<sp/>=<sp/>0.5<sp/>/<sp/>fRoot;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation[0]<sp/>=<sp/>(axes[k][j]<sp/>-<sp/>axes[j][k])<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>*apkQuat[j]<sp/>=<sp/>(axes[j][i]<sp/>+<sp/>axes[i][j])<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>*apkQuat[k]<sp/>=<sp/>(axes[k][i]<sp/>+<sp/>axes[i][k])<sp/>*<sp/>fRoot;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classaruco_1_1_marker_map_1a9c0096cac0fd31b40ad63036c2c17938" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1a9c0096cac0fd31b40ad63036c2c17938" kindref="member">MarkerMap::getIdList</ref>(std::vector&lt;int&gt;&amp;<sp/>ids,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>append)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="328"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!append)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.clear();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>i++)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.push_back(at(i).id);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classaruco_1_1_marker_map_1a351d1a005e3795cc2ce19ab63f5b12fc" refkind="member"><highlight class="normal"><ref refid="classaruco_1_1_marker_map" kindref="compound">MarkerMap</ref><sp/><ref refid="classaruco_1_1_marker_map_1a351d1a005e3795cc2ce19ab63f5b12fc" kindref="member">MarkerMap::convertToMeters</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>markerSize_meters)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classaruco_1_1_marker_map_1a89dddf63bc3583306ebd1250022338d4" kindref="member">isExpressedInPixels</ref>())</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(-1,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>board<sp/>is<sp/>not<sp/>expressed<sp/>in<sp/>pixels&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::convertToMeters&quot;</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first,<sp/>we<sp/>are<sp/>assuming<sp/>all<sp/>markers<sp/>are<sp/>equally<sp/>sized.<sp/>So,<sp/>lets<sp/>get<sp/>the<sp/>size<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>markerSizePix<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cv::norm(at(0)[0]<sp/>-<sp/>at(0)[1]));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_marker_map" kindref="compound">MarkerMap</ref><sp/>BInfo(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>BInfo.<ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>=<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a0155b5bb70787c1cd7f927b7a56d99d3" kindref="member">MarkerMap::METERS</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>get<sp/>the<sp/>size<sp/>of<sp/>a<sp/>pixel,<sp/>and<sp/>change<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pixSize<sp/>=<sp/>markerSize_meters<sp/>/<sp/>float(markerSizePix);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>markerSize_meters<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>float(markerSizePix)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pixSize<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BInfo.size();<sp/>i++)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>c++)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BInfo[i][c]<sp/>*=<sp/>pixSize;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BInfo;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357" refid="classaruco_1_1_marker_map_1adabbd2530deb4503e166fbf614b93ef2" refkind="member"><highlight class="normal">cv::Mat<sp/><ref refid="classaruco_1_1_marker_map_1adabbd2530deb4503e166fbf614b93ef2" kindref="member">MarkerMap::getImage</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>METER2PIX)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="358"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>==<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a76aa2534eb74133e8b71ecc1d9aa7153" kindref="member">NONE</ref>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(-1,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>board<sp/>is<sp/>not<sp/>valid<sp/>mInfoType<sp/>==<sp/>NONE<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::getImage&quot;</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(METER2PIX<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>!=<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a4e2a453d5f8a044dce3ec9586b30d0e8" kindref="member">PIX</ref>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(-1,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>board<sp/>is<sp/>not<sp/>expressed<sp/>in<sp/>pixels<sp/>and<sp/>not<sp/>METER2PIX<sp/>indicated&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMap::getImage&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Dict<sp/>=<sp/><ref refid="classaruco_1_1_dictionary_1a8c8446cc7ed26e15e03cb4395f07bfbf" kindref="member">Dictionary::loadPredefined</ref>(dictionary);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>image<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>cv::Point<sp/>pmin(std::numeric_limits&lt;int&gt;::max(),<sp/>std::numeric_limits&lt;int&gt;::max()),<sp/>pmax(</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;int&gt;::lowest(),<sp/>std::numeric_limits&lt;int&gt;::lowest());</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>:<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>b.points)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmin.x<sp/>=<sp/>std::min(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(p.x),<sp/>pmin.x);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmin.y<sp/>=<sp/>std::min(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(p.y),<sp/>pmin.y);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmax.x<sp/>=<sp/>std::max(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(p.x<sp/>+<sp/>0.5),<sp/>pmax.x);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmax.y<sp/>=<sp/>std::max(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(p.y<sp/>+<sp/>0.5),<sp/>pmax.y);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(p.z<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>cv::Point<sp/>psize<sp/>=<sp/>pmax<sp/>-<sp/>pmin;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>image(cv::Size(psize.x,<sp/>psize.y),<sp/>CV_8UC1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>image.setTo(cv::Scalar::all(255));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>std::vector&lt;Marker3DInfo&gt;<sp/>p3d<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>points<sp/>must<sp/>be<sp/>moved<sp/>from<sp/>a<sp/>real<sp/>reference<sp/>system<sp/>to<sp/>image<sp/>reference<sp/>system<sp/>(y<sp/>positive<sp/>is<sp/>inverse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>m<sp/>:<sp/>p3d)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>:<sp/>m.points)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>cv::Point3f(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pmin.x),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pmax.y),<sp/>0.f);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>use<sp/>inverse<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>-p.y;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>:<sp/>p3d)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>size<sp/>and<sp/>find<sp/>size<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cv::norm(m[0]<sp/>-<sp/>m[1]));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>im1<sp/>=<sp/>Dict.getMarkerImage_id(m.id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(size<sp/>/<sp/>8));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>im2;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>resize<sp/>to<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::resize(im1,<sp/>im2,<sp/>cv::Size(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size)));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>in<sp/>correct<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ry<sp/>=<sp/>cv::Range(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m[0].<ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref>),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m[2].<ref refid="namespacebug__m_1ab8596d2ae799585b0d89152b55891aa8" kindref="member">y</ref>));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rx<sp/>=<sp/>cv::Range(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m[0].<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m[2].<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>sub<sp/>=<sp/>image(ry,<sp/>rx);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>im2.copyTo(sub);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classaruco_1_1_marker_map_1acd8cd2b4b4d1209e190a40c6a9b982da" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="classaruco_1_1_marker_map_1acd8cd2b4b4d1209e190a40c6a9b982da" kindref="member">MarkerMap::getIndices</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;aruco::Marker&gt;&amp;<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="418"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>indices;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size()<sp/>&amp;&amp;<sp/>!found;<sp/>j++)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>at(j).id)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="classaruco_1_1_marker_map_1a2922b2f8434714290b5565ee48428d51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1a2922b2f8434714290b5565ee48428d51" kindref="member">MarkerMap::toStream</ref>(std::ostream&amp;<sp/>str)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>str<sp/>&lt;&lt;<sp/><ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>i++)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>at(i).toStream(str);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>dic<sp/>string<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>str<sp/>&lt;&lt;<sp/>dictionary;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445" refid="classaruco_1_1_marker_map_1a1fce17d5b10546a29400cac1e00e5880" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_1a1fce17d5b10546a29400cac1e00e5880" kindref="member">MarkerMap::fromStream</ref>(std::istream&amp;<sp/>str)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>str<sp/>&gt;&gt;<sp/><ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>&gt;&gt;<sp/>s;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>resize(s);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>i++)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>at(i).fromStream(str);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>str<sp/>&gt;&gt;<sp/>dictionary;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classaruco_1_1_marker_map_1a1ee7588e4c4e108a7fa02fdd18f128ef" refkind="member"><highlight class="normal">std::pair&lt;cv::Mat,<sp/>cv::Mat&gt;<sp/><ref refid="classaruco_1_1_marker_map_1a1ee7588e4c4e108a7fa02fdd18f128ef" kindref="member">MarkerMap::calculateExtrinsics</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;aruco::Marker&gt;&amp;<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>markerSize,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>CameraMatrix,<sp/>cv::Mat<sp/>Distorsion)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Point2f&gt;<sp/>p2d;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_marker_map" kindref="compound">MarkerMap</ref><sp/>m_meters;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classaruco_1_1_marker_map_1a89dddf63bc3583306ebd1250022338d4" kindref="member">isExpressedInPixels</ref>())</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>m_meters<sp/>=<sp/><ref refid="classaruco_1_1_marker_map_1a351d1a005e3795cc2ce19ab63f5b12fc" kindref="member">convertToMeters</ref>(markerSize);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>m_meters<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Point3f&gt;<sp/>p3d;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>marker<sp/>:<sp/><ref refid="simple__double_8cpp_1ad3609934b55a628fdda977ca8724ce34" kindref="member">markers</ref>)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find(m_meters.begin(),<sp/>m_meters.end(),<sp/>marker.id);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_meters.end())</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>marker<sp/>part<sp/>of<sp/>the<sp/>map?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>marker)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2d.push_back(p);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>it-&gt;points)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3d.push_back(p);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>rvec,<sp/>tvec;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p2d.size()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>points<sp/>in<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::solvePnPRansac(p3d,<sp/>p2d,<sp/>CameraMatrix,<sp/>Distorsion,<sp/>rvec,<sp/>tvec);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(rvec,<sp/>tvec);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>aruco</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markermap.cpp"/>
  </compounddef>
</doxygen>
