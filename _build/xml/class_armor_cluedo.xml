<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_armor_cluedo" kind="class" language="C++" prot="public">
    <compoundname>ArmorCluedo</compoundname>
    <basecompoundref refid="class_armor_tools" prot="public" virt="non-virtual">ArmorTools</basecompoundref>
    <basecompoundref refid="class_armor_tools" prot="public" virt="non-virtual">ArmorTools</basecompoundref>
    <includes refid="armor__cluedo_8h" local="no">armor_cluedo.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_armor_cluedo_1a5cce2aa304a6bd0ca678f08e7424bf7c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; ArmorCluedo::individuals</definition>
        <argsstring></argsstring>
        <name>individuals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="326" column="13" bodyfile="robocluedo_armor/include/armor_tools/armor_cluedo.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_armor_cluedo_1a6e7280e76851065a76f4de6a7fc2bc1e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; ArmorCluedo::DiscardHypotheses</definition>
        <argsstring></argsstring>
        <name>DiscardHypotheses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="329" column="13" bodyfile="robocluedo_armor/include/armor_tools/armor_cluedo.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_armor_cluedo_1a87fe995ebd26c4618a4b962e47dd3a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArmorCluedo::ArmorCluedo</definition>
        <argsstring>(bool debugmode=ARMOR_DEFAULT_DEBUGMODE)</argsstring>
        <name>ArmorCluedo</name>
        <param>
          <type>bool</type>
          <declname>debugmode</declname>
          <defval><ref refid="armor__tools_8h_1a15b43f9d816bb354831481b25c069d2e" kindref="member">ARMOR_DEFAULT_DEBUGMODE</ref></defval>
        </param>
        <briefdescription>
<para>class constructor of <ref refid="class_armor_cluedo" kindref="compound">ArmorCluedo</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>The constrctor simply instanciates the internal data structures and the <ref refid="class_armor_tools" kindref="compound">ArmorTools</ref> class, without connection and loading phases.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>debugmode</parametername>
</parameternamelist>
<parameterdescription>
<para>enable or not debug mode; see <ref refid="armor__tools_8h_1a15b43f9d816bb354831481b25c069d2e" kindref="member">ARMOR_DEFAULT_DEBUGMODE</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="70" column="1" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a1a6e15d936d2d6e1279d86e5dbaa9c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArmorCluedo::~ArmorCluedo</definition>
        <argsstring>()</argsstring>
        <name>~ArmorCluedo</name>
        <briefdescription>
<para>class destructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="74" column="1" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a66ce2d9f5c665ab14761233b32ab1ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::Init</definition>
        <argsstring>(std::string ontologyPath)</argsstring>
        <name>Init</name>
        <param>
          <type>std::string</type>
          <declname>ontologyPath</declname>
        </param>
        <briefdescription>
<para>initizalize the interface </para>
        </briefdescription>
        <detaileddescription>
<para>The function performs both the first steps: connection to the aRMOR service, and the load of the file. A default loading phase is executed, with settings: <linebreak/>
 <bold><computeroutput>LOAD FILE <emphasis>ontologyPath</emphasis> <ref refid="armor__tools_8h_1afc0d693b073cbd23ba6f00549c17a811" kindref="member">ARMOR_DEFAULT_URI</ref> true <ref refid="armor__tools_8h_1a0cef5fa91dfc253d1a2106ae86b426fc" kindref="member">ARMOR_DEFAULT_REASONER</ref> true</computeroutput></bold> <linebreak/>
 No other types of initializations are needed right now by the project.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ontologyPath</parametername>
</parameternamelist>
<parameterdescription>
<para>the path of the .owl file</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or not</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/EmaroLab/armor/blob/master/README.MD">the official aRMOR documentation</ulink> <ref refid="rosplan-kb_8md_8txt_1a70b081480885bd2f2b09ae4e492abc6c" kindref="member">for</ref> <ref refid="update-navigation-manager_8md_8txt_1a2639b36efd3047b415f7470bea54bffc" kindref="member">more</ref> informations</para>
</simplesect>
<simplesect kind="note"><para>If you need to initialize the interface in another way, you still can call the methods inside <ref refid="class_armor_tools" kindref="compound">ArmorTools</ref> and setup the connection in the proper way. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="99" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="34" bodyend="48"/>
        <references refid="class_armor_tools_1ad98c8e33df5d1ef3e4c69051ac0dd7ab" compoundref="armor__tools_8cpp" startline="213" endline="226">ArmorTools::ConnectAndLoad</references>
        <references refid="class_armor_tools_1a75474b9c35cbdcfedd382939c1699247" compoundref="armor__tools_8cpp" startline="319" endline="322">ArmorTools::GetLastErrorCode</references>
        <references refid="class_armor_tools_1a356ca7809be690be0a70a1ae33a850a8" compoundref="armor__tools_8cpp" startline="351" endline="355">ArmorTools::TestInterface</references>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1ad29930fec7803aed87b7244e73b98bff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::AddIndiv</definition>
        <argsstring>(std::string indivname, std::string classname, bool makeDisjoint=true)</argsstring>
        <name>AddIndiv</name>
        <param>
          <type>std::string</type>
          <declname>indivname</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>classname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>makeDisjoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>add an individual to the ontology </para>
        </briefdescription>
        <detaileddescription>
<para>In simple words, this function adds the individual to the database. <linebreak/>
</para>
<para>Due to the need of the command &quot;DISJOINT&quot; in order to make the reasoner able to classify the hypotheses, and due to an issue with the command &quot;DISJOINT IND CLASS&quot;, this function works in a more complex way. Here is how it works: <orderedlist>
<listitem>
<para>before starting, if the individual has class HYPOTHESIS and was discarded, return false immediately  </para>
</listitem>
<listitem>
<para>The individual is <emphasis>tracked</emphasis>, i.e. put into an array which contains all the defined individuals </para>
</listitem>
<listitem>
<para>then, the individual is added  </para>
</listitem>
<listitem>
<para>call the command &quot;REASON&quot;  </para>
</listitem>
<listitem>
<para>if the last argument makeDisjoint is ture, the function also performs &quot;DISJOINT&quot; between the element to add and all the other elements. It is the only <emphasis>working and reliable way</emphasis> to ensure a correct classification by the reasoner right now. </para>
</listitem>
</orderedlist>
</para>
<para>Since in RCL, the hypotheses are the only individuals with properties, there&apos;s no need to DISJOINT them. Hence, that last option can be useful to reduce the complexity of the method: if makeDisjoint is set to false, the function doesn&apos;t perform the last step. The element is tracked anyway.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indivname</parametername>
</parameternamelist>
<parameterdescription>
<para>the individual to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classname</parametername>
</parameternamelist>
<parameterdescription>
<para>the class of the individual to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>makeDisjoint</parametername>
</parameternamelist>
<parameterdescription>
<para>perform disjoint or not?</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the individual doesn&apos;t appear in the database; false otherwise</para>
</simplesect>
<simplesect kind="warning"><para>remember: call upload before any manipolation command! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="144" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="53" bodyend="76"/>
        <references refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">ArmorTools::SendCommand</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a49216d015f97a9d510406a90e8c1fe30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; ArmorCluedo::GetClassOfIndiv</definition>
        <argsstring>(std::string indivname, bool deep)</argsstring>
        <name>GetClassOfIndiv</name>
        <param>
          <type>std::string</type>
          <declname>indivname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
        </param>
        <briefdescription>
<para>get the class of a given individual </para>
        </briefdescription>
        <detaileddescription>
<para>The function implements a simple query: find all the classes an individual belongs to. It is performed using only one aRMOR call. <linebreak/>
</para>
<para>using the <emphasis>Deep search</emphasis>, the function will return only the deepest subclass among all the classes; it is a functionality provided by aRMOR.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indivname</parametername>
</parameternamelist>
<parameterdescription>
<para>the individual to be &quot;classified&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deep</parametername>
</parameternamelist>
<parameterdescription>
<para>use deep search?</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of classes (zero if the indiv. doesn&apos;t exist) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="164" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="81" bodyend="92"/>
        <references refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">ArmorTools::SendCommand</references>
        <references refid="armor__tools_8h_1af4f289b8ad162b609975620166e3d407" compoundref="armor__tools_8h" startline="46">SS</references>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
        <references refid="class_armor_cluedo_1a76a60417cfc01397a6db462904139873" compoundref="armor__cluedo_8cpp" startline="235" endline="244">FilterVector</references>
        <references refid="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" compoundref="armor__tools_8cpp" startline="385" endline="389">ArmorTools::GetLastRes</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; ArmorCluedo::GetIndivOfClass</definition>
        <argsstring>(std::string classname)</argsstring>
        <name>GetIndivOfClass</name>
        <param>
          <type>std::string</type>
          <declname>classname</declname>
        </param>
        <briefdescription>
<para>find the individuals belonging to a class </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>classname</parametername>
</parameternamelist>
<parameterdescription>
<para>the class</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of individals inside the class (eventually empty)</para>
</simplesect>
<simplesect kind="warning"><para>The element also returns the discarded hypotheses. <emphasis>Don&apos;t use this method for inspecting the hypotheses! </emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="179" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="97" bodyend="107"/>
        <references refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">ArmorTools::SendCommand</references>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
        <references refid="class_armor_cluedo_1a76a60417cfc01397a6db462904139873" compoundref="armor__cluedo_8cpp" startline="235" endline="244">FilterVector</references>
        <references refid="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" compoundref="armor__tools_8cpp" startline="385" endline="389">ArmorTools::GetLastRes</references>
        <referencedby refid="class_armor_cluedo_1aaf1832ed634a017c48e26c48f58c5f68" compoundref="armor__cluedo_8cpp" startline="165" endline="179">FindCompleteHypotheses</referencedby>
        <referencedby refid="class_armor_cluedo_1ab278ac3aaffc4c6aceaf3bfb8d5186af" compoundref="armor__cluedo_8cpp" startline="184" endline="187">FindInconsistentHypotheses</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a2086082362b61607798d6f968c263f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::ExistsIndiv</definition>
        <argsstring>(std::string indivname)</argsstring>
        <name>ExistsIndiv</name>
        <param>
          <type>std::string</type>
          <declname>indivname</declname>
        </param>
        <briefdescription>
<para>check if an individual exists </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indivname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the individual</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if the individual exists or not; false if the individual is a discarded hypothesis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="192" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="112" bodyend="126"/>
        <references refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">ArmorTools::SendCommand</references>
        <references refid="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" compoundref="armor__tools_8cpp" startline="385" endline="389">ArmorTools::GetLastRes</references>
        <references refid="rosplan-kb_8md_8txt_1a7960f9c558f9ee2c3d4a8fdea096fb56" compoundref="rosplan-kb_8md_8txt" startline="395">success</references>
        <referencedby refid="class_armor_cluedo_1a4ae659375e7a6d9564973718ece248e2" compoundref="armor__cluedo_8cpp" startline="192" endline="218">RemoveHypothesis</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1ad179234fd676874a09c267abb416d2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::SetObjectProperty</definition>
        <argsstring>(std::string prop, std::string Aelem, std::string Belem)</argsstring>
        <name>SetObjectProperty</name>
        <param>
          <type>std::string</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Aelem</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Belem</declname>
        </param>
        <briefdescription>
<para>set a property true </para>
        </briefdescription>
        <detaileddescription>
<para>The function sets a property like (Aelem, Belem):prop .</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>the property to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Aelem</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Belem</parametername>
</parameternamelist>
<parameterdescription>
<para>the image</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if one between Aelem and Belem doesn&apos;t exist.</para>
</simplesect>
<simplesect kind="note"><para>if the prop is not valid, the aRMOR call will fail, hence the method returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="215" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="131" bodyend="145"/>
        <references refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">ArmorTools::SendCommand</references>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a580aef3f0bf9dd1affd06c588e731ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; ArmorCluedo::GetValuedOfIndiv</definition>
        <argsstring>(std::string prop, std::string indivname)</argsstring>
        <name>GetValuedOfIndiv</name>
        <param>
          <type>std::string</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>indivname</declname>
        </param>
        <briefdescription>
<para>get the values of a property related to a gven individual </para>
        </briefdescription>
        <detaileddescription>
<para>Given a set of properties like (indivname, value):prop, the method retrieves all the fields &apos;value&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>the property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indivname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the individual</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the values of the property for the given individual </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="231" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="150" bodyend="160"/>
        <references refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" compoundref="armor__tools_8cpp" startline="360" endline="380">ArmorTools::SendCommand</references>
        <references refid="armor__tools_8h_1a07e1a753da9f7c716c4bf57d5ce2de54" compoundref="armor__tools_8h" startline="41">ARMOR_ERR</references>
        <references refid="class_armor_cluedo_1a76a60417cfc01397a6db462904139873" compoundref="armor__cluedo_8cpp" startline="235" endline="244">FilterVector</references>
        <references refid="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" compoundref="armor__tools_8cpp" startline="385" endline="389">ArmorTools::GetLastRes</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1aaf1832ed634a017c48e26c48f58c5f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; ArmorCluedo::FindCompleteHypotheses</definition>
        <argsstring>()</argsstring>
        <name>FindCompleteHypotheses</name>
        <briefdescription>
<para>find all the complete hypotheses </para>
        </briefdescription>
        <detaileddescription>
<para>The methos finds all the COMPLETE hypotheses, except for the discarded ones.</para>
<para><simplesect kind="return"><para>a vector containing the tags of all the COMPLETE hyp.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="cluedo__armor__interface_8cpp_1a1baffdd7887e3aee5a33faf7752ed8f7" kindref="member">ServiceFindConsistentHypotheses</ref> an <ref refid="update-navigation-manager_8md_8txt_1a810afe84adddf4c37f45e7bdffae7e43" kindref="member">example</ref> of usage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="250" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="165" bodyend="179"/>
        <references refid="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" compoundref="armor__cluedo_8cpp" startline="97" endline="107">GetIndivOfClass</references>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a142a05fa1714b988fb0d42812eb6fce5" compoundref="erl2-oracle-user-manual_8md_8txt" startline="210">it</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1ab278ac3aaffc4c6aceaf3bfb8d5186af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; ArmorCluedo::FindInconsistentHypotheses</definition>
        <argsstring>()</argsstring>
        <name>FindInconsistentHypotheses</name>
        <briefdescription>
<para>find all the inconsistent hypotheses </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector containing the tags of all the INCONSISTENT hyp.</para>
</simplesect>
<simplesect kind="note"><para>This method doesn&apos;t perform any filtering on the tags, so the output is exactly the individuals belonging to INCONSISTENT without deleting the discarded hypotheses. I recommend to not use this method, except for some cases.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="cluedo__armor__interface_8cpp_1a1baffdd7887e3aee5a33faf7752ed8f7" kindref="member">ServiceFindConsistentHypotheses</ref> an <ref refid="update-navigation-manager_8md_8txt_1a810afe84adddf4c37f45e7bdffae7e43" kindref="member">example</ref> of usage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="267" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="184" bodyend="187"/>
        <references refid="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" compoundref="armor__cluedo_8cpp" startline="97" endline="107">GetIndivOfClass</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a4ae659375e7a6d9564973718ece248e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::RemoveHypothesis</definition>
        <argsstring>(std::string hypTag)</argsstring>
        <name>RemoveHypothesis</name>
        <param>
          <type>std::string</type>
          <declname>hypTag</declname>
        </param>
        <briefdescription>
<para>discard one hypothesis </para>
        </briefdescription>
        <detaileddescription>
<para>Due to an issue of the implementation of aRMOR, the command &quot;REMOVE 
IND CLASS&quot; has no effect on the ontology. So, a workaround has been implemented. The class tracks the hypothesis as <emphasis>discarded</emphasis>; all the other methods are implemented in a way such that a discarded hypothesis doesn&apos;t appear anymore as <emphasis>complete</emphasis> or <emphasis>existing</emphasis>. the discarded hypothesis is still in the ontology, but will be discarded with a post filtering, or will become inconsistent. <linebreak/>
</para>
<para>In RCL there&apos;s no need to reconsider hypotheses, so, in this specific context, this approach works well.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hypTag</parametername>
</parameternamelist>
<parameterdescription>
<para>the hypothesis tag to discard</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if the hypothesis has been discarded or not; false if the hypothesis wasn&apos;t defined before. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="291" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="192" bodyend="218"/>
        <references refid="class_armor_cluedo_1a2086082362b61607798d6f968c263f9e" compoundref="armor__cluedo_8cpp" startline="112" endline="126">ExistsIndiv</references>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a6f824ec2cf4759952145f7f1d11e516c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ArmorCluedo::FilterValue</definition>
        <argsstring>(std::string raw)</argsstring>
        <name>FilterValue</name>
        <param>
          <type>std::string</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>rewrite a string like &apos;&lt;uri#value&gt;&apos; into &apos;value&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be filtered</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value inside the string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="307" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="223" bodyend="230"/>
        <referencedby refid="class_armor_cluedo_1a76a60417cfc01397a6db462904139873" compoundref="armor__cluedo_8cpp" startline="235" endline="244">FilterVector</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a76a60417cfc01397a6db462904139873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; ArmorCluedo::FilterVector</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;itemlist)</argsstring>
        <name>FilterVector</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>itemlist</declname>
        </param>
        <briefdescription>
<para>filter all the strings inside the array </para>
        </briefdescription>
        <detaileddescription>
<para>It simply extends the method <ref refid="class_armor_cluedo_1a6f824ec2cf4759952145f7f1d11e516c" kindref="member">ArmorCluedo::FilterValue</ref> to an array of strings to be filtered.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itemList</parametername>
</parameternamelist>
<parameterdescription>
<para>the array of strings to be filtered</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the array containing the filtered strings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="322" column="13" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="235" bodyend="244"/>
        <references refid="class_armor_cluedo_1a6f824ec2cf4759952145f7f1d11e516c" compoundref="armor__cluedo_8cpp" startline="223" endline="230">FilterValue</references>
        <referencedby refid="class_armor_cluedo_1a49216d015f97a9d510406a90e8c1fe30" compoundref="armor__cluedo_8cpp" startline="81" endline="92">GetClassOfIndiv</referencedby>
        <referencedby refid="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" compoundref="armor__cluedo_8cpp" startline="97" endline="107">GetIndivOfClass</referencedby>
        <referencedby refid="class_armor_cluedo_1a580aef3f0bf9dd1affd06c588e731ff5" compoundref="armor__cluedo_8cpp" startline="150" endline="160">GetValuedOfIndiv</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_armor_cluedo_1ab29b592286c5cb6316212a9e7da1d6bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::ExistsItem</definition>
        <argsstring>(std::string item, const std::vector&lt; std::string &gt; &amp;container)</argsstring>
        <name>ExistsItem</name>
        <param>
          <type>std::string</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="332" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="249" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1a8390aefea700e6c8089e20efb6bea308" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArmorCluedo::TrackIndiv</definition>
        <argsstring>(std::string indivname)</argsstring>
        <name>TrackIndiv</name>
        <param>
          <type>std::string</type>
          <declname>indivname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="335" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="260" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1acc1b4fc5f49f5886ca26a4a5dba5671c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmorCluedo::DisjointAllIndiv</definition>
        <argsstring>(std::string from)</argsstring>
        <name>DisjointAllIndiv</name>
        <param>
          <type>std::string</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="338" column="6" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="278" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_armor_cluedo_1ab7e3630b3542b223b34abcdf18b111fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;::iterator</type>
        <definition>std::vector&lt; std::string &gt;::iterator ArmorCluedo::GetPositionOf</definition>
        <argsstring>(std::string tag, std::vector&lt; std::string &gt; &amp;list)</argsstring>
        <name>GetPositionOf</name>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="342" column="24" bodyfile="robocluedo_armor/src/armor_tools/armor_cluedo.cpp" bodystart="299" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>additional utilities for aRMOR </para>
    </briefdescription>
    <detaileddescription>
<para>Whereas the class <ref refid="class_armor_tools" kindref="compound">ArmorTools</ref> provides the low-level tools for communicating with aRMOR, the class <ref refid="class_armor_cluedo" kindref="compound">ArmorCluedo</ref> implements some specific methods for this project, and sme workaround due to some bugs in the actual implementation of aRMOR, in particular for the commands &quot;REMOVE&quot; and &quot;DISJOINT&quot;. <linebreak/>
</para>
<para>The class <ref refid="class_armor_cluedo" kindref="compound">ArmorCluedo</ref> provides methods for doing these operations: <itemizedlist>
<listitem>
<para>add individuals </para>
</listitem>
<listitem>
<para>check existence of individuals </para>
</listitem>
<listitem>
<para>find the classes of an individual </para>
</listitem>
<listitem>
<para>find the content of a class </para>
</listitem>
<listitem>
<para>set/get properties </para>
</listitem>
</itemizedlist>
In addition, the class implements some useful methods for managing the hypotheses: <itemizedlist>
<listitem>
<para>add hypotheses </para>
</listitem>
<listitem>
<para>queries of hypotheses </para>
</listitem>
<listitem>
<para>discard hypotheses </para>
</listitem>
</itemizedlist>
</para>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>maybe the issues with aRMOR are due to a lack in its documentation. The implemented workarounds could reduce the performances of the program. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ArmorCluedo</label>
        <link refid="class_armor_cluedo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ArmorTools</label>
        <link refid="class_armor_tools"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ArmorCluedo</label>
        <link refid="class_armor_cluedo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ArmorTools</label>
        <link refid="class_armor_tools"/>
      </node>
    </collaborationgraph>
    <location file="robocluedo_armor/include/armor_tools/armor_cluedo.h" line="57" column="1" bodyfile="robocluedo_armor/include/armor_tools/armor_cluedo.h" bodystart="56" bodyend="343"/>
    <listofallmembers>
      <member refid="class_armor_cluedo_1ad29930fec7803aed87b7244e73b98bff" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>AddIndiv</name></member>
      <member refid="class_armor_cluedo_1a87fe995ebd26c4618a4b962e47dd3a40" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>ArmorCluedo</name></member>
      <member refid="class_armor_tools_1a6692f463e8866859205d9a133a5f330f" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>ArmorTools</name></member>
      <member refid="class_armor_tools_1ae138e2b2ad40688ebf01879a11fd3b6d" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>ArmorTools</name></member>
      <member refid="class_armor_tools_1aac98d4f9b2ce2cbefba61684d1f505bf" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>CallArmor</name></member>
      <member refid="class_armor_tools_1aa83ea5e064db6dc46c9056ddeeaabbc4" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>Connect</name></member>
      <member refid="class_armor_tools_1ad98c8e33df5d1ef3e4c69051ac0dd7ab" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>ConnectAndLoad</name></member>
      <member refid="class_armor_tools_1a8d4c23582a9a677ac69c07b08d5da436" prot="protected" virt="non-virtual"><scope>ArmorCluedo</scope><name>DebugMode</name></member>
      <member refid="class_armor_cluedo_1a6e7280e76851065a76f4de6a7fc2bc1e" prot="private" virt="non-virtual"><scope>ArmorCluedo</scope><name>DiscardHypotheses</name></member>
      <member refid="class_armor_cluedo_1acc1b4fc5f49f5886ca26a4a5dba5671c" prot="private" virt="non-virtual"><scope>ArmorCluedo</scope><name>DisjointAllIndiv</name></member>
      <member refid="class_armor_cluedo_1a2086082362b61607798d6f968c263f9e" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>ExistsIndiv</name></member>
      <member refid="class_armor_cluedo_1ab29b592286c5cb6316212a9e7da1d6bd" prot="private" virt="non-virtual"><scope>ArmorCluedo</scope><name>ExistsItem</name></member>
      <member refid="class_armor_cluedo_1a6f824ec2cf4759952145f7f1d11e516c" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>FilterValue</name></member>
      <member refid="class_armor_cluedo_1a76a60417cfc01397a6db462904139873" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>FilterVector</name></member>
      <member refid="class_armor_cluedo_1aaf1832ed634a017c48e26c48f58c5f68" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>FindCompleteHypotheses</name></member>
      <member refid="class_armor_cluedo_1ab278ac3aaffc4c6aceaf3bfb8d5186af" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>FindInconsistentHypotheses</name></member>
      <member refid="class_armor_cluedo_1a49216d015f97a9d510406a90e8c1fe30" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetClassOfIndiv</name></member>
      <member refid="class_armor_cluedo_1afef8229a755f495f008bfe4630a745fa" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetIndivOfClass</name></member>
      <member refid="class_armor_tools_1a75474b9c35cbdcfedd382939c1699247" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetLastErrorCode</name></member>
      <member refid="class_armor_tools_1a43702476c5d0763fc6b1f090b4531c27" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetLastErrorDescription</name></member>
      <member refid="class_armor_tools_1a20fa164f2e3e13a48a417c419fd6cde3" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetLastReq</name></member>
      <member refid="class_armor_tools_1a34d27d93c2faec3d3de3ba24d08f436b" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetLastRes</name></member>
      <member refid="class_armor_cluedo_1ab7e3630b3542b223b34abcdf18b111fa" prot="private" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetPositionOf</name></member>
      <member refid="class_armor_tools_1a76e1517409d261c03ce712a4a5e4a093" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetRequest</name></member>
      <member refid="class_armor_cluedo_1a580aef3f0bf9dd1affd06c588e731ff5" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>GetValuedOfIndiv</name></member>
      <member refid="class_armor_cluedo_1a5cce2aa304a6bd0ca678f08e7424bf7c" prot="private" virt="non-virtual"><scope>ArmorCluedo</scope><name>individuals</name></member>
      <member refid="class_armor_cluedo_1a66ce2d9f5c665ab14761233b32ab1ec6" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>Init</name></member>
      <member refid="class_armor_tools_1ad7d22e2f0942c96ea2d5f02636610581" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>LoadedOntology</name></member>
      <member refid="class_armor_tools_1ab03c54208a11edf3e3690ba07f0cef5b" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>LoadOntology</name></member>
      <member refid="class_armor_tools_1ac7f632ed614b226cbc2b2fa352989643" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>PrintLastReq</name></member>
      <member refid="class_armor_tools_1ae1764835bfe65fabcb07757b0bb43f83" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>PrintLastRes</name></member>
      <member refid="class_armor_tools_1a451163e1278ec49f4d214b33111d166d" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>PrintRequest</name></member>
      <member refid="class_armor_tools_1a2ca77741de4c8883b5be0d661f6b1320" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>PrintResponse</name></member>
      <member refid="class_armor_cluedo_1a4ae659375e7a6d9564973718ece248e2" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>RemoveHypothesis</name></member>
      <member refid="class_armor_tools_1ad26e4e69e7edcbde9789ca5301c6b4a5" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>SaveOntology</name></member>
      <member refid="class_armor_tools_1a6033ed90283ec6c78a2bc2b0106d0461" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>SendCommand</name></member>
      <member refid="class_armor_cluedo_1ad179234fd676874a09c267abb416d2da" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>SetObjectProperty</name></member>
      <member refid="class_armor_tools_1a21dae8ed16985d723cc5fefc2e70bcba" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>Success</name></member>
      <member refid="class_armor_tools_1a5bd0b3e9898d3bcf3dc82705d52495cb" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>SwitchDebugMode</name></member>
      <member refid="class_armor_tools_1a356ca7809be690be0a70a1ae33a850a8" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>TestInterface</name></member>
      <member refid="class_armor_cluedo_1a8390aefea700e6c8089e20efb6bea308" prot="private" virt="non-virtual"><scope>ArmorCluedo</scope><name>TrackIndiv</name></member>
      <member refid="class_armor_tools_1a0ddf26f9a388377a36263344b1cbf39f" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>UpdateOntology</name></member>
      <member refid="class_armor_cluedo_1a1a6e15d936d2d6e1279d86e5dbaa9c22" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>~ArmorCluedo</name></member>
      <member refid="class_armor_tools_1a80eb8d13d6f5b61951ae53a764c3bb03" prot="public" virt="non-virtual"><scope>ArmorCluedo</scope><name>~ArmorTools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
