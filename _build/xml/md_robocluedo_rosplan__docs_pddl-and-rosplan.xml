<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md_robocluedo_rosplan__docs_pddl-and-rosplan" kind="page">
    <compoundname>md_robocluedo_rosplan__docs_pddl-and-rosplan</compoundname>
    <title>DOCS â€“ PDDL and ROSPlan</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para>
<para><programlisting filename=".toctree"><codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">caption:<sp/>Contents</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">./pddl-and-rosplan.md</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
<para>Unfortunately, the ROS Plan knowledge base is able only to parse a very particular, limited version of the PDDL. And worse, this doesn&apos;t seem to appear in any documentation about ROS Plan!</para>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md399">
<title>validation with Parser</title>
<para>from inside the folder <computeroutput>(package robocluedo_rosplan_interface)/pddl/</computeroutput> run the command</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">./parser<sp/>&lt;domain<sp/>file&gt;<sp/>&lt;(opt)<sp/>problem<sp/>file&gt;</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md400">
<title>solution with popf</title>
<para>the repository contains a already compiled version of the planner popf. In case is doesn&apos;t work, you can find another executable in the folder <computeroutput>&lt;tour workspace&gt;/src/ROSPlan/rosplan_planning_system/common/bin/</computeroutput>.</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">&lt;path&gt;/popf<sp/>DOMAIN<sp/>PROBLEM</highlight></codeline>
</programlisting></para>
<para>some useful options:</para>
<para><itemizedlist>
<listitem><para><computeroutput>-n</computeroutput> search for many solutions (optimal search)</para>
</listitem><listitem><para><computeroutput>-v2</computeroutput> verbose option</para>
</listitem><listitem><para><computeroutput>-LP2</computeroutput> another verbose option</para>
</listitem><listitem><para><computeroutput>-b</computeroutput> disable best-first-search; often it couldn&apos;t solve the plan with this method</para>
</listitem><listitem><para><computeroutput>-T</computeroutput> in the case of the robocluedo project, it helped me to speed up the planning process</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md401">
<title>Specific rules for the PDDL in ROS Plan</title>
<para>you can set the planner in a suitable way for your application by the <computeroutput>planner_command</computeroutput> parameter in the planner interface. BUT the knowledge base node is able to interpret a non-standard particular version of PDDL, otherwise it closes unexpectedly.</para>
<para><itemizedlist>
<listitem><para>use this list of requirements:</para>
<para>```lisp (:requirements :strips :typing :equality :universal-preconditions :durative-actions ) ```</para>
</listitem><listitem><para>seemingly there&apos;s no bugs in tabulation parsing</para>
</listitem><listitem><para><bold>always specify the type of the objects and the parameters!</bold> Typing is a requirement in ROSPlan, nevertheless it is optional in the standard model</para>
<para>In particular ROSPlan can&apos;t deal with the <emphasis>pure classical planning</emphasis>: it works fine only with <computeroutput>durative-actions</computeroutput>.</para>
</listitem><listitem><para>durative actions with empty parameters are <emphasis>allowed</emphasis> by the system</para>
</listitem><listitem><para><emphasis>don&apos;t use <computeroutput>(and ...)</computeroutput> with only one argument!</emphasis> If the and is going to contain only one predicate, simply don&apos;t use such operators: just write the predicate, and nothing else.</para>
</listitem><listitem><para><bold>empty <computeroutput>:condition (... )</computeroutput> statements are not allowed!</bold></para>
</listitem><listitem><para>you cannot use <computeroutput>(not ...)</computeroutput> inside the goal statement: the planner doesn&apos;t fully support <computeroutput>:adl</computeroutput> requirement.</para>
</listitem><listitem><para><bold>don&apos;t use the upper case characters!</bold> ROSPlan poorly supports the uppercase letters, and sometimes it returns lower-case names instead of the expected upper-case ones, making the query to fail without reason.</para>
<para>here&apos;s an example of this nasty feature. let&apos;s suppose to have written this in the problem file:</para>
<para>```lisp (h-open ID1 ) (= (h-count-who ID1 ) 0) (= (h-count-where ID1 ) 0) (= (h-count-what ID1 ) 0) (h-open ID2 ) (= (h-count-who ID2 ) 0) (= (h-count-where ID2 ) 0) (= (h-count-what ID2 ) 0) (h-open ID3 ) (= (h-count-who ID3 ) 0) (= (h-count-where ID3 ) 0) (= (h-count-what ID3 ) 0) (h-open ID4 ) (= (h-count-who ID4 ) 0) (= (h-count-where ID4 ) 0) (= (h-count-what ID4 ) 0) (h-open ID5 ) (= (h-count-who ID5 ) 0) (= (h-count-where ID5 ) 0) (= (h-count-what ID5 ) 0) (h-open ID6 ) (= (h-count-who ID6 ) 0) (= (h-count-where ID6 ) 0) (= (h-count-what ID6 ) 0) ```</para>
<para>but, after a simple test, we discover that the knowledge base returns this instead. Here is a simple query, which fails because of this buggy, not documented behaviour of the knowledge base:</para>
<para>```lisp [ INFO] [1657462216.628493200]: [<ref refid="classkb__tools" kindref="compound">kb_tools</ref>] kb_tools::get_fluent( h-count-who, id=ID1 ) [ INFO] [1657462216.638314500]: [<ref refid="classkb__tools" kindref="compound">kb_tools</ref>] kb_tools::get_fluent FROM SERVICE: [0] (h-count-who, id=id1) [1] (h-count-who, id=id2) [2] (h-count-who, id=id3) [3] (h-count-who, id=id4) [4] (h-count-who, id=id5) [5] (h-count-who, id=id6)</para>
<para>[ INFO] [1657462216.638412900]: [<ref refid="classkb__tools" kindref="compound">kb_tools</ref>] kb_tools::get_fluent( CALL SUCCESS with return 0 (success=0) [ INFO] [1657462216.638467900]: [<ref refid="classkb__tools" kindref="compound">kb_tools</ref>] <ref refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" kindref="member">kb_tools::ok( )</ref> !!! FAILURE !!! ```</para>
<para>whatever query fails with this return! beautiful ROSPlan ...</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md402">
<title>Durative Actions - the right syntax</title>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(:durative-action<sp/>???</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>???<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(<sp/>???<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>???</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md403">
<title>Issue in the problem preprocessing</title>
<para>even with a perfect PDDL code, the planner, after the preprocessing phase, could complain a mysterious syntax error...</para>
<para>maybe you wrote this in the original problem:</para>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(:goal<sp/>(my-predicate<sp/>))</highlight></codeline>
</programlisting></para>
<para>ROSPlan will process it into this:</para>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(:goal<sp/>(and<sp/>(my-predicate<sp/>)))</highlight></codeline>
</programlisting></para>
<para><emphasis>that is syntactically wrong!</emphasis> It explains the strange message.</para>
<para><bold>but notice that</bold> this is just a warning, therefore you can skip it.</para>
</sect1>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md404">
<title>ADL support</title>
<para><bold>ROSPlan doesn&apos;t have a complete support for ADL</bold>, which is definitely a bad news. Classical planning isn&apos;t supported, in particular the common actions. When you set the requirement <emphasis>ADL</emphasis>, the message is this:</para>
<para><programlisting filename=".text"><codeline><highlight class="normal">A<sp/>problem<sp/>has<sp/>been<sp/>encountered,<sp/>and<sp/>the<sp/>planner<sp/>has<sp/>to<sp/>terminate.</highlight></codeline>
<codeline><highlight class="normal">-----------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">Unfortunately,<sp/>at<sp/>present,<sp/>the<sp/>planner<sp/>does<sp/>not<sp/>fully<sp/>support<sp/>ADL</highlight></codeline>
<codeline><highlight class="normal">unless<sp/>in<sp/>the<sp/>rules<sp/>for<sp/>derived<sp/>predicates.<sp/><sp/>Only<sp/>two<sp/>aspects<sp/>of</highlight></codeline>
<codeline><highlight class="normal">ADL<sp/>can<sp/>be<sp/>used<sp/>in<sp/>action<sp/>definitions:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>forall<sp/>conditions,<sp/>containing<sp/>a<sp/>simple<sp/>conjunct<sp/>of<sp/>propositional<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>numeric<sp/>facts;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Conditional<sp/>(when...<sp/>)<sp/>effects,<sp/>and<sp/>then<sp/>only<sp/>with<sp/>numeric<sp/>conditions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>numeric<sp/>consequences<sp/>on<sp/>values<sp/>which<sp/>do<sp/>not<sp/>appear<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>preconditions<sp/>of<sp/>actions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>use<sp/>this<sp/>planner<sp/>with<sp/>your<sp/>problem,<sp/>you<sp/>will<sp/>have<sp/>to<sp/>reformulate<sp/>it<sp/>to</highlight></codeline>
<codeline><highlight class="normal">avoid<sp/>ADL.<sp/><sp/>Alternatively,<sp/>if<sp/>you<sp/>have<sp/>a<sp/>particularly<sp/>compelling<sp/>case</highlight></codeline>
<codeline><highlight class="normal">for<sp/>them,<sp/>please<sp/>contact<sp/>the<sp/>authors<sp/>to<sp/>discuss<sp/>it<sp/>with<sp/>them,<sp/>who<sp/>may<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline><highlight class="normal">extend<sp/>the<sp/>planner<sp/>to<sp/>meet<sp/>your<sp/>needs.</highlight></codeline>
</programlisting></para>
<para>the funny thing is that <emphasis>the POPF planners support ADL, but tge ROSPlan KB does not!</emphasis> And, since KB parses the problem, there&apos;s no way to parse things like classical planning, unless you don&apos;t want to throw away most of the ROS Plan framework.</para>
</sect1>
<sect1 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md405">
<title>Available Planners</title>
<para><programlisting filename=".attention"><codeline><highlight class="normal">It<sp/>is<sp/>recommended<sp/>to<sp/>use<sp/>the<sp/>POPF<sp/>planner,<sp/>as<sp/>suggested<sp/>by<sp/>the<sp/>official<sp/>tutorials<sp/>as<sp/>well.<sp/></highlight></codeline>
</programlisting></para>
<sect2 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md406">
<title>POPF help</title>
<para>see <ulink url="https://planning.wiki/ref/planners/popf">popf characteristics</ulink>.</para>
<para><bold>temporal planner (supporting durative actions only)</bold>. Supported requirements:</para>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(:requirements<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:strips<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:typing<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:equality<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:universal-preconditions<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:durative-actions</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para><bold>PLanning interface</bold> : <verbatim>`&lt;node pkg=&quot;rosplan_planning_system&quot; name=&quot;popf_planning_interface&quot; type=&quot;popf_planning_interface&quot;&gt;`
</verbatim></para>
<para>help from the program:</para>
<para><programlisting><codeline><highlight class="normal">root@dbfbde77a543:~/ros_ws/src/ROSPlan/rosplan_planning_system/common/bin#<sp/>./popf<sp/>--help</highlight></codeline>
<codeline><highlight class="normal">Unrecognised<sp/>command-line<sp/>switch<sp/>&apos;-&apos;</highlight></codeline>
<codeline><highlight class="normal">POPF,<sp/>Release<sp/>2</highlight></codeline>
<codeline><highlight class="normal">By<sp/>releasing<sp/>this<sp/>code<sp/>we<sp/>imply<sp/>no<sp/>warranty<sp/>as<sp/>to<sp/>its<sp/>reliability</highlight></codeline>
<codeline><highlight class="normal">and<sp/>its<sp/>use<sp/>is<sp/>entirely<sp/>at<sp/>your<sp/>own<sp/>risk.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Usage:<sp/>./popf<sp/>[OPTIONS]<sp/>domainfile<sp/>problemfile<sp/>[planfile,<sp/>if<sp/>-r<sp/>specified]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Options<sp/>are:<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-citation<sp/><sp/><sp/>Display<sp/>citation<sp/>to<sp/>relevant<sp/>conference<sp/>paper<sp/>(ICAPS<sp/>2010);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-b<sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>best-first<sp/>search<sp/>-<sp/>if<sp/>EHC<sp/>fails,<sp/>abort;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-E<sp/><sp/><sp/><sp/><sp/><sp/>Skip<sp/>EHC:<sp/>go<sp/>straight<sp/>to<sp/>best-first<sp/>search;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-e<sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>standard<sp/>EHC<sp/>instead<sp/>of<sp/>steepest<sp/>descent;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-h<sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>helpful-action<sp/>pruning;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-k<sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>compression-safe<sp/>action<sp/>detection;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-c<sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>the<sp/>tie-breaking<sp/>in<sp/>RPG<sp/>that<sp/>favour<sp/>actions<sp/>that<sp/>slot<sp/>into<sp/>the<sp/>partial<sp/>order<sp/>earlier;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-S<sp/><sp/><sp/><sp/><sp/><sp/>Sort<sp/>initial<sp/>layer<sp/>facts<sp/>in<sp/>RPG<sp/>by<sp/>availability<sp/>order<sp/>(only<sp/>use<sp/>if<sp/>using<sp/>-c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-m<sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>the<sp/>tie-breaking<sp/>in<sp/>search<sp/>that<sp/>favours<sp/>plans<sp/>with<sp/>shorter<sp/>makespans;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-F<sp/><sp/><sp/><sp/><sp/><sp/>Full<sp/>FF<sp/>helpful<sp/>actions<sp/>(rather<sp/>than<sp/>just<sp/>those<sp/>in<sp/>the<sp/>RP<sp/>applicable<sp/>in<sp/>the<sp/>current<sp/>state);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-r<sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>in<sp/>a<sp/>plan<sp/>instead<sp/>of<sp/>planning;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-T<sp/><sp/><sp/><sp/><sp/><sp/>Rather<sp/>than<sp/>building<sp/>a<sp/>partial<sp/>order,<sp/>build<sp/>a<sp/>total-order</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-n<sp/><sp/><sp/><sp/><sp/><sp/>Optimise,<sp/>finding<sp/>many<sp/>solutions;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-v&lt;n&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verbose<sp/>to<sp/>degree<sp/>n<sp/>(n<sp/>defaults<sp/>to<sp/>1<sp/>if<sp/>not<sp/>specified).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-L&lt;n&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>LP<sp/>verbose<sp/>to<sp/>degree<sp/>n<sp/>(n<sp/>defaults<sp/>to<sp/>1<sp/>if<sp/>not<sp/>specified).</highlight></codeline>
</programlisting></para>
<para><bold>Command line for POPF</bold> : for normal planning,</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">timeout<sp/>10<sp/>&lt;popf_path&gt;/popf<sp/>-v2<sp/>DOMAIN<sp/>PROBLEM<sp/>&gt;<sp/>plan.pddl</highlight></codeline>
</programlisting></para>
<para><emphasis>optimal planning if possible</emphasis> : (it could significantly slow down the planning workflow)</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">&lt;popf_path&gt;/popf<sp/>-n<sp/>-v2<sp/>DOMAIN<sp/>PROBLEM<sp/>&gt;<sp/>plan.pddl</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_robocluedo_rosplan__docs_pddl-and-rosplan_1autotoc_md407">
<title>Metric-ff help</title>
<para>see <ulink url="https://planning.wiki/ref/planners/metricff">Metric-FF on planning.wiki</ulink></para>
<para>see also the <ulink url="https://fai.cs.uni-saarland.de/hoffmann/metric-ff.html">official page of Metric-FF</ulink></para>
<para><bold>temporal and numerical planning (with support for ADL)</bold>. Supported requirements:</para>
<para><programlisting><codeline><highlight class="normal">(:requirements<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;;<sp/>===<sp/>PDDL1.1<sp/>===<sp/>;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:strips<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:typing<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:equality<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:existential-preconditions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:universal-preconditions<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:conditional-effects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:quantified-preconditions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;;<sp/>===<sp/>PDDL2.1<sp/>===<sp/>;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:fluents</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:durative-actions</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>help from metric-ff:</para>
<para><programlisting><codeline><highlight class="normal">root@dbfbde77a543:~/ros_ws/src/ROSPlan/rosplan_planning_system/common/bin#<sp/>./Metric-FF<sp/>--help</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">usage<sp/>of<sp/>ff:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">OPTIONS<sp/><sp/><sp/>DESCRIPTIONS</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-p<sp/>&lt;str&gt;<sp/><sp/><sp/><sp/>Path<sp/>for<sp/>operator<sp/>and<sp/>fact<sp/>file</highlight></codeline>
<codeline><highlight class="normal">-o<sp/>&lt;str&gt;<sp/><sp/><sp/><sp/>Operator<sp/>file<sp/>name</highlight></codeline>
<codeline><highlight class="normal">-f<sp/>&lt;str&gt;<sp/><sp/><sp/><sp/>Fact<sp/>file<sp/>name</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-r<sp/>&lt;int&gt;<sp/><sp/><sp/><sp/>Random<sp/>seed<sp/>[used<sp/>for<sp/>random<sp/>restarts;<sp/>preset:<sp/>0]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-s<sp/>&lt;int&gt;<sp/><sp/><sp/><sp/>Search<sp/>configuration<sp/>[preset:<sp/>s=5];<sp/>&apos;+H&apos;:<sp/>helpful<sp/>actions<sp/>pruning</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>Standard-FF:<sp/>EHC+H<sp/>then<sp/>BFS<sp/>(cost<sp/>minimization:<sp/>NO)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/>BFS<sp/>(cost<sp/>minimization:<sp/>NO)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/>BFS+H<sp/>(cost<sp/>minimization:<sp/>NO)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/>Weighted<sp/>A*<sp/>(cost<sp/>minimization:<sp/>YES)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/>A*epsilon<sp/>(cost<sp/>minimization:<sp/>YES)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/><sp/><sp/><sp/><sp/>EHC+H<sp/>then<sp/>A*epsilon<sp/>(cost<sp/>minimization:<sp/>YES)</highlight></codeline>
<codeline><highlight class="normal">-w<sp/>&lt;num&gt;<sp/><sp/><sp/><sp/>Set<sp/>weight<sp/>w<sp/>for<sp/>search<sp/>configs<sp/>3,4,5<sp/>[preset:<sp/>w=5]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Do<sp/>NOT<sp/>use<sp/>cost-minimizing<sp/>relaxed<sp/>plans<sp/>for<sp/>options<sp/>3,4,5</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-b<sp/>&lt;float&gt;<sp/><sp/>Fixed<sp/>upper<sp/>bound<sp/>on<sp/>solution<sp/>cost<sp/>(prune<sp/>based<sp/>on<sp/>g+hmax);<sp/>active<sp/>only<sp/>with<sp/>cost<sp/>minimization</highlight></codeline>
</programlisting></para>
<para><bold>Command line for Metric-FF</bold> :</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">timeout<sp/>10<sp/>&lt;metric-ff_path&gt;/Metric-FF<sp/>-o<sp/>DOMAIN<sp/>-p<sp/>PROBLEM<sp/></highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
