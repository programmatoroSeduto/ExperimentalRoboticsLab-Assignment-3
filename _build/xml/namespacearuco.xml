<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacearuco" kind="namespace" language="C++">
    <compoundname>aruco</compoundname>
    <innerclass refid="classaruco_1_1_camera_parameters" prot="public">aruco::CameraParameters</innerclass>
    <innerclass refid="classaruco_1_1_cv_drawing_utils" prot="public">aruco::CvDrawingUtils</innerclass>
    <innerclass refid="classaruco_1_1_debug" prot="public">aruco::Debug</innerclass>
    <innerclass refid="classaruco_1_1_dictionary" prot="public">aruco::Dictionary</innerclass>
    <innerclass refid="classaruco_1_1_dictionary_based" prot="public">aruco::DictionaryBased</innerclass>
    <innerclass refid="classaruco_1_1_lev_marq" prot="public">aruco::LevMarq</innerclass>
    <innerclass refid="classaruco_1_1_marker" prot="public">aruco::Marker</innerclass>
    <innerclass refid="classaruco_1_1_marker3_d_info" prot="public">aruco::Marker3DInfo</innerclass>
    <innerclass refid="classaruco_1_1_marker_detector" prot="public">aruco::MarkerDetector</innerclass>
    <innerclass refid="classaruco_1_1_marker_labeler" prot="public">aruco::MarkerLabeler</innerclass>
    <innerclass refid="classaruco_1_1_marker_map" prot="public">aruco::MarkerMap</innerclass>
    <innerclass refid="classaruco_1_1_marker_map_pose_tracker" prot="public">aruco::MarkerMapPoseTracker</innerclass>
    <innerclass refid="classaruco_1_1_marker_pose_tracker" prot="public">aruco::MarkerPoseTracker</innerclass>
    <innerclass refid="structaruco_1_1_scoped_timer_events" prot="public">aruco::ScopedTimerEvents</innerclass>
    <innerclass refid="structaruco_1_1_scope_timer" prot="public">aruco::ScopeTimer</innerclass>
    <innerclass refid="classaruco_1_1_s_v_m_markers" prot="public">aruco::SVMMarkers</innerclass>
    <innerclass refid="structaruco_1_1_timer" prot="public">aruco::Timer</innerclass>
    <innernamespace refid="namespacearuco_1_1aruco__private">aruco::aruco_private</innernamespace>
    <innernamespace refid="namespacearuco_1_1impl">aruco::impl</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacearuco_1ad3e67c58edd9a7465b69f2eae833dcbb" prot="public" static="no" strong="no">
        <type>int</type>
        <name>DetectionMode</name>
        <enumvalue id="namespacearuco_1ad3e67c58edd9a7465b69f2eae833dcbba0fa3a9e206561c5bf35d2f27bcefcd5e" prot="public">
          <name>DM_NORMAL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearuco_1ad3e67c58edd9a7465b69f2eae833dcbba500e0934d202fea26cd667a808985a58" prot="public">
          <name>DM_FAST</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearuco_1ad3e67c58edd9a7465b69f2eae833dcbba31c1159a1ac3e3550f259cd35d74212a" prot="public">
          <name>DM_VIDEO_FAST</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The DetectionMode enum defines the different possibilities for detection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/include/aruco/markerdetector.h" line="51" column="1" bodyfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/markerdetector.h" bodystart="49" bodyend="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacearuco_1a8bdf5564fc70b773ac326d5afa004b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; cv::Mat &gt;</type>
        <definition>std::vector&lt; cv::Mat &gt; aruco::solvePnP</definition>
        <argsstring>(const std::vector&lt; cv::Point3f &gt; &amp;objPoints, const std::vector&lt; cv::Point2f &gt; &amp;imgPoints, cv::InputArray cameraMatrix, cv::InputArray distCoeffs)</argsstring>
        <name>solvePnP</name>
        <param>
          <type>const std::vector&lt; cv::Point3f &gt; &amp;</type>
          <declname>objPoints</declname>
        </param>
        <param>
          <type>const std::vector&lt; cv::Point2f &gt; &amp;</type>
          <declname>imgPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>distCoeffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="95" column="13" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="95" bodyend="107" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="53" declcolumn="13"/>
        <references refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</references>
        <references refid="namespacearuco_1adccc007d4ba5d0d66831fc31c6694990" compoundref="ippe_8cpp" startline="39" endline="93">getRTMatrix</references>
        <referencedby refid="classaruco_1_1_marker_1ae79bee2e9a3cf6ae8703176154ca5610" compoundref="marker_8cpp" startline="329" endline="366">aruco::Marker::calculateExtrinsics</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ac3489ddda33f94f247d9be2e6da021f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="aruco__export_8h_1a47f9a248e0fcb66919073dec9c96dbe7" kindref="member">ARUCO_EXPORT</ref> std::vector&lt; std::pair&lt; cv::Mat, double &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; cv::Mat, double &gt; &gt; aruco::solvePnP_</definition>
        <argsstring>(float size, const std::vector&lt; cv::Point2f &gt; &amp;imgPoints, cv::InputArray cameraMatrix, cv::InputArray distCoeffs)</argsstring>
        <name>solvePnP_</name>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::vector&lt; cv::Point2f &gt; &amp;</type>
          <declname>imgPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>distCoeffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="109" column="13" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="109" bodyend="117" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="55" declcolumn="26"/>
        <references refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</references>
        <references refid="namespacearuco_1adccc007d4ba5d0d66831fc31c6694990" compoundref="ippe_8cpp" startline="39" endline="93">getRTMatrix</references>
        <referencedby refid="classaruco_1_1_marker_pose_tracker_1a8eeb8ba3c29a89c7c9c20e33197b59a7" compoundref="posetracker_8cpp" startline="368" endline="395">aruco::MarkerPoseTracker::estimatePose</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a6b478ff675559159f2300e3bd08206ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; cv::Mat, double &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; cv::Mat, double &gt; &gt; aruco::solvePnP_</definition>
        <argsstring>(const std::vector&lt; cv::Point3f &gt; &amp;objPoints, const std::vector&lt; cv::Point2f &gt; &amp;imgPoints, cv::InputArray cameraMatrix, cv::InputArray distCoeffs)</argsstring>
        <name>solvePnP_</name>
        <param>
          <type>const std::vector&lt; cv::Point3f &gt; &amp;</type>
          <declname>objPoints</declname>
        </param>
        <param>
          <type>const std::vector&lt; cv::Point2f &gt; &amp;</type>
          <declname>imgPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>distCoeffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="119" column="13" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="119" bodyend="132" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="58" declcolumn="13"/>
        <references refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</references>
        <references refid="namespacearuco_1adccc007d4ba5d0d66831fc31c6694990" compoundref="ippe_8cpp" startline="39" endline="93">getRTMatrix</references>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::solvePoseOfCentredSquare</definition>
        <argsstring>(float squareLength, cv::InputArray imagePoints, cv::InputArray cameraMatrix, cv::InputArray distCoeffs, cv::OutputArray _rvec1, cv::OutputArray _tvec1, float &amp;reprojErr1, cv::OutputArray _rvec2, cv::OutputArray _tvec2, float &amp;reprojErr2)</argsstring>
        <name>solvePoseOfCentredSquare</name>
        <param>
          <type>float</type>
          <declname>squareLength</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_rvec1</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_tvec1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>reprojErr1</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_rvec2</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_tvec2</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>reprojErr2</declname>
        </param>
        <briefdescription>
<para>Finds the two possible poses of a square planar object given its four corner correspondences in an image using IPPE. These poses are sorted so that the first one is the one with the lowest reprojection error. The second pose is needed if the problem is ambiguous. The problem is ambiguous when the projection of the model is close to affine, which in practice happens if it is small or viewed from a large distance. In these cases there are two pose solutions that can correctly align the correspondences (up to noise), so it is impossible to select the right one from just the reprojection error. IPPE gives you both the solutions, rather than just a single solution (which in ambiguous cases would be wrong 50% of the time). Geometrically, the two poses roughly correspond to a reflection of the model about a plane whose normal passes through the line-of-sight from the camera center to the model&apos;s center. For more details about these ambiguities, please refer to the IPPE paper. </para>
        </briefdescription>
        <detaileddescription>
<para>It is possible to reject the second pose if its reprojection error is significantly worse than the first pose. The correct way to do this is with a likelihood ratio test (<ulink url="https://en.wikipedia.org/wiki/Likelihood-ratio_test">https://en.wikipedia.org/wiki/Likelihood-ratio_test</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>squareLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the squares&apos;s length (which is also it&apos;s width) in object coordinate units (e.g. millimeters, meters, etc.) The square is defined in object coordinates on the plane z=0 and centered at the origin. Therefore its four points in object coordinates are given by: point 0: [-squareLength / 2.0, squareLength / 2.0, 0] point 1: [squareLength / 2.0, squareLength / 2.0, 0] point 2: [squareLength / 2.0, -squareLength / 2.0, 0] point 3: [-squareLength / 2.0, -squareLength / 2.0, 0] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imagePoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of four corresponding image points, 1x4/4x1 2-channel. Note that the points should be ordered to correspond with points 0, 1, 2 and 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cameraMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Input camera matrix <formula id="0">$A = \vecthreethree{fx}{0}{cx}{0}{fy}{cy}{0}{0}{1}$</formula> . </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector of distortion coefficients <formula id="1">$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])$</formula> of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_rvec1</parametername>
</parameternamelist>
<parameterdescription>
<para>Output rotation vector (see Rodrigues ) for first pose. That, together with tvec , brings points from the model coordinate system to the camera coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tvec1</parametername>
</parameternamelist>
<parameterdescription>
<para>Output translation vector for first pose. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reprojErr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Output reprojection error of first pose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_rvec2</parametername>
</parameternamelist>
<parameterdescription>
<para>Output rotation vector (see Rodrigues ) for second pose. That, together with tvec , brings points from the model coordinate system to the camera coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tvec2</parametername>
</parameternamelist>
<parameterdescription>
<para>Output translation vector for second pose. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reprojErr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Output reprojection error of second pose </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="134" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="134" bodyend="216" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="99" declcolumn="6"/>
        <references refid="namespacearuco_1a8cd5a905cfcdfe4362406b9c7a6ab079" compoundref="ippe_8cpp" startline="533" endline="578">homographyFromSquarePoints</references>
        <references refid="namespacearuco_1a1a2dce405304f7f7d28f52059283ce41" compoundref="ippe_8cpp" startline="422" endline="531">IPPComputeRotations</references>
        <references refid="namespacearuco_1a27a1e84cb92d795c0bd4361e99db5843" compoundref="ippe_8cpp" startline="341" endline="420">IPPComputeTranslation</references>
        <references refid="namespacearuco_1a4627c757960af459bd688e3ad4639e6f" compoundref="ippe_8cpp" startline="282" endline="315">IPPEvalReprojectionError</references>
        <references refid="namespacearuco_1a154d65249cb00ec52ea85b4d656befcd" compoundref="ippe_8cpp" startline="317" endline="339">IPPERot2vec</references>
        <referencedby refid="namespacearuco_1a8bdf5564fc70b773ac326d5afa004b47" compoundref="ippe_8cpp" startline="95" endline="107">solvePnP</referencedby>
        <referencedby refid="namespacearuco_1ac3489ddda33f94f247d9be2e6da021f9" compoundref="ippe_8cpp" startline="109" endline="117">solvePnP_</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a2433e7d2d8c4d30e0c37e1f6913fff4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aruco::IPPEvalBestPose</definition>
        <argsstring>(cv::InputArray _R1, cv::InputArray _R2, cv::InputArray _t1, cv::InputArray _t2, cv::InputArray _objectPoints, cv::InputArray _undistortedPoints)</argsstring>
        <name>IPPEvalBestPose</name>
        <param>
          <type>cv::InputArray</type>
          <declname>_R1</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_R2</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_t1</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_t2</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_objectPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_undistortedPoints</declname>
        </param>
        <briefdescription>
<para>Determines which of the two pose solutions from IPPE has the lowest reprojection error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_R1</parametername>
</parameternamelist>
<parameterdescription>
<para>First rotation solution from IPPE, 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_R2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second rotation solution from IPPE 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_t1</parametername>
</parameternamelist>
<parameterdescription>
<para>First translation solution from IPPE 3x1 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_t2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second translation solution from IPPE 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_t2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second translation solution from IPPE 3x1 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_objectPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of corresponding model points, 1xN/Nx1 3-channel where N is the number of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_undistortedPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of corresponding image points (undistorted and normalize), 1xN/Nx1 2-channel where N is the number of points </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="218" column="5" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="218" bodyend="280" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a4627c757960af459bd688e3ad4639e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float aruco::IPPEvalReprojectionError</definition>
        <argsstring>(cv::InputArray _R, cv::InputArray _t, cv::InputArray _objectPoints, cv::InputArray _undistortedPoints)</argsstring>
        <name>IPPEvalReprojectionError</name>
        <param>
          <type>cv::InputArray</type>
          <declname>_R</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_t</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_objectPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_undistortedPoints</declname>
        </param>
        <briefdescription>
<para>Determines the reprojection error of a pose solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_R1</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation solution from IPPE, 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Translation solution from IPPE 3x1 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_objectPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of corresponding model points, 1xN/Nx1 3-channel where N is the number of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_undistortedPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of corresponding image points (undistorted and normalized), 1xN/Nx1 2-channel where N is the number of points </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pose solution with the lowest reprojection error. This is either 1 (first pose) or 2 (second pose) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="282" column="7" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="282" bodyend="315" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="126" declcolumn="7"/>
        <referencedby refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a154d65249cb00ec52ea85b4d656befcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::IPPERot2vec</definition>
        <argsstring>(cv::InputArray _R, cv::OutputArray _r)</argsstring>
        <name>IPPERot2vec</name>
        <param>
          <type>cv::InputArray</type>
          <declname>_R</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_r</declname>
        </param>
        <briefdescription>
<para>Fast conversion from a rotation matrix to a rotation vector using Rodrigues&apos; formula. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_R</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix, 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_r</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation vector, 3x1/1x3 1-channel float </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="317" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="317" bodyend="339" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="134" declcolumn="6"/>
        <references refid="namespacesetup_1aa2586b6c4dd84a0aaaf49cb1565cee6e" compoundref="cv__bridge_2setup_8py" startline="5">setup.d</references>
        <referencedby refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a27a1e84cb92d795c0bd4361e99db5843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::IPPComputeTranslation</definition>
        <argsstring>(cv::InputArray _objectPoints, cv::InputArray _imgPoints, cv::InputArray _R, cv::OutputArray _t)</argsstring>
        <name>IPPComputeTranslation</name>
        <param>
          <type>cv::InputArray</type>
          <declname>_objectPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_imgPoints</declname>
        </param>
        <param>
          <type>cv::InputArray</type>
          <declname>_R</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_t</declname>
        </param>
        <briefdescription>
<para>Computes the translation solution for a given rotation solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_objectPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of corresponding model points, 1xN/Nx1 3-channel where N is the number of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_undistortedPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of corresponding image points (undistorted), 1xN/Nx1 2-channel where N is the number of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_R1</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation solution from IPPE, 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Translation solution, 3x1 1-channel float </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="341" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="341" bodyend="420" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="144" declcolumn="6"/>
        <referencedby refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a1a2dce405304f7f7d28f52059283ce41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::IPPComputeRotations</definition>
        <argsstring>(double j00, double j01, double j10, double j11, double p, double q, cv::OutputArray _R1, cv::OutputArray _R2)</argsstring>
        <name>IPPComputeRotations</name>
        <param>
          <type>double</type>
          <declname>j00</declname>
        </param>
        <param>
          <type>double</type>
          <declname>j01</declname>
        </param>
        <param>
          <type>double</type>
          <declname>j10</declname>
        </param>
        <param>
          <type>double</type>
          <declname>j11</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_R1</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_R2</declname>
        </param>
        <briefdescription>
<para>Computes the two rotation solutions from the Jacobian of a homography matrix H. For highest accuracy the Jacobian should be computed at the centroid of the point correspondences (see the IPPE paper for the explanation of this). For a point (ux, uy) on the model plane, suppose the homography H maps (ux, uy) to a point (p,q) in the image (in normalized pixel coordinates). The Jacobian matrix [J00, J01; J10,J11] is the Jacobian of the mapping evaluated at (ux, uy). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j00</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian coefficient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j01</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian coefficient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j10</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian coefficient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j11</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian coefficient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the x coordinate of point (ux, uy) mapped into the image (undistorted and normalized position) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>the y coordinate of point (ux, uy) mapped into the image (undistorted and normalized position) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="422" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="422" bodyend="531" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="160" declcolumn="6"/>
        <referencedby refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a8cd5a905cfcdfe4362406b9c7a6ab079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::homographyFromSquarePoints</definition>
        <argsstring>(cv::InputArray _targetPts, double halfLength, cv::OutputArray _H)</argsstring>
        <name>homographyFromSquarePoints</name>
        <param>
          <type>cv::InputArray</type>
          <declname>_targetPts</declname>
        </param>
        <param>
          <type>double</type>
          <declname>halfLength</declname>
        </param>
        <param>
          <type>cv::OutputArray</type>
          <declname>_H</declname>
        </param>
        <briefdescription>
<para>Closed-form solution for the homography mapping with four corner correspondences of a square (it maps source points to target points). The source points are the four corners of a zero-centered squared defined by: point 0: [-squareLength / 2.0, squareLength / 2.0] point 1: [squareLength / 2.0, squareLength / 2.0] point 2: [squareLength / 2.0, -squareLength / 2.0] point 3: [-squareLength / 2.0, -squareLength / 2.0]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_targetPts</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of four corresponding target points, 1x4/4x1 2-channel. Note that the points should be ordered to correspond with points 0, 1, 2 and 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the square&apos;s half length (i.e. squareLength/2.0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_R1</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation solution from IPPE, 3x3 1-channel float </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_H</parametername>
</parameternamelist>
<parameterdescription>
<para>Homography mapping the source points to the target points, 3x3 single channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="533" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="533" bodyend="578" declfile="robocluedo_dependencies/aruco_ros/aruco/include/aruco/ippe.h" declline="177" declcolumn="6"/>
        <referencedby refid="namespacearuco_1ada065824d7de806dcd082f8a8ebd1e75" compoundref="ippe_8cpp" startline="134" endline="216">solvePoseOfCentredSquare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1aea554c19cc5919cc0838e1cedbe60a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; aruco::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;str, const CameraParameters &amp;cp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classaruco_1_1_camera_parameters" kindref="compound">CameraParameters</ref> &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/cameraparameters.cpp" line="529" column="1" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/cameraparameters.cpp" bodystart="529" bodyend="541"/>
        <references refid="classaruco_1_1_camera_parameters_1a08fdd4888daf7140cf31bdd341c3f303" compoundref="cameraparameters_8h" startline="53">aruco::CameraParameters::CamSize</references>
        <references refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" compoundref="cameraparameters_8h" startline="47">aruco::CameraParameters::CameraMatrix</references>
        <references refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" compoundref="cameraparameters_8h" startline="50">aruco::CameraParameters::Distorsion</references>
        <references refid="classaruco_1_1_camera_parameters_1aceb1bd577d65e459a8946e44b04e6c99" compoundref="cameraparameters_8h" startline="56">aruco::CameraParameters::ExtrinsicMatrix</references>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a0b0389f46ca190a6e2d363db666ff8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; aruco::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;str, CameraParameters &amp;cp)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classaruco_1_1_camera_parameters" kindref="compound">CameraParameters</ref> &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/cameraparameters.cpp" line="543" column="14" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/cameraparameters.cpp" bodystart="543" bodyend="558"/>
        <references refid="classaruco_1_1_camera_parameters_1a08fdd4888daf7140cf31bdd341c3f303" compoundref="cameraparameters_8h" startline="53">aruco::CameraParameters::CamSize</references>
        <references refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" compoundref="cameraparameters_8h" startline="47">aruco::CameraParameters::CameraMatrix</references>
        <references refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" compoundref="cameraparameters_8h" startline="50">aruco::CameraParameters::Distorsion</references>
        <references refid="classaruco_1_1_camera_parameters_1aceb1bd577d65e459a8946e44b04e6c99" compoundref="cameraparameters_8h" startline="56">aruco::CameraParameters::ExtrinsicMatrix</references>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1adccc007d4ba5d0d66831fc31c6694990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cv::Mat</type>
        <definition>cv::Mat aruco::getRTMatrix</definition>
        <argsstring>(const cv::Mat &amp;R_, const cv::Mat &amp;T_, int forceType)</argsstring>
        <name>getRTMatrix</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>R_</declname>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>T_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>forceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" line="39" column="9" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/ippe.cpp" bodystart="39" bodyend="93"/>
        <referencedby refid="namespacearuco_1a8bdf5564fc70b773ac326d5afa004b47" compoundref="ippe_8cpp" startline="95" endline="107">solvePnP</referencedby>
        <referencedby refid="namespacearuco_1ac3489ddda33f94f247d9be2e6da021f9" compoundref="ippe_8cpp" startline="109" endline="117">solvePnP_</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a2b40362ac4f2994c0e05ca7bcb0e93f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::print</definition>
        <argsstring>(cv::Point3f p, std::string cad)</argsstring>
        <name>print</name>
        <param>
          <type>cv::Point3f</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>cad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/marker.cpp" line="322" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/marker.cpp" bodystart="322" bodyend="325"/>
        <referencedby refid="classexample__py_1_1image__converter_1a8eb0095c652c0dd58e92dbfa3831bcea" compoundref="example__py_8py" startline="21" endline="39">example_py.image_converter.callback</referencedby>
        <referencedby refid="namespaceexample__py_1aae694318dd62975323ca7eda7f0b8723" compoundref="example__py_8py" startline="40" endline="49">example_py.main</referencedby>
        <referencedby refid="classexample__t_1_1image__feature_1a60a162ed0cac939db1c2bccd3d884ca6" compoundref="example__t_8py" startline="38" endline="64">example_t.image_feature.callback</referencedby>
        <referencedby refid="namespacebroadcast_1a10d4a996118c49e1060f176a450b03bf" compoundref="broadcast_8py" startline="65" endline="76">broadcast.main</referencedby>
        <referencedby refid="namespacesource_1a360a184dc1e165da484ea28730165fff" compoundref="source_8py" startline="82" endline="93">source.main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a146cb9112b4ee5af5f5981dbd78b88d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::addToImageHist</definition>
        <argsstring>(cv::Mat &amp;im, std::vector&lt; float &gt; &amp;hist)</argsstring>
        <name>addToImageHist</name>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>im</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markerdetector.cpp" line="498" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markerdetector.cpp" bodystart="498" bodyend="506"/>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a2f82cd5f2a14b7605818ee4df8fef0fe" compoundref="erl2-oracle-user-manual_8md_8txt" startline="111">y</references>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a16754163197eb074b61db8a8c354ccaf" compoundref="erl2-oracle-user-manual_8md_8txt" startline="110">x</references>
        <referencedby refid="classaruco_1_1_marker_detector_1aa5ef3d6b8aadedfc41ad55dca2d3801f" compoundref="markerdetector_8cpp" startline="552" endline="866">aruco::MarkerDetector::detect</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ace63f972e86ac736bd95d0bb4e5c2bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aruco::Otsu</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;hist)</argsstring>
        <name>Otsu</name>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markerdetector.cpp" line="508" column="5" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markerdetector.cpp" bodystart="508" bodyend="547"/>
        <referencedby refid="classaruco_1_1_marker_detector_1aa5ef3d6b8aadedfc41ad55dca2d3801f" compoundref="markerdetector_8cpp" startline="552" endline="866">aruco::MarkerDetector::detect</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a15c77d407ba8e62d8a0b08728ecabbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aruco::hamm_distance</definition>
        <argsstring>(uint64_t a, uint64_t b)</argsstring>
        <name>hamm_distance</name>
        <param>
          <type>uint64_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markerlabelers/dictionary_based.cpp" line="79" column="5" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markerlabelers/dictionary_based.cpp" bodystart="79" bodyend="82"/>
        <references refid="erl2-oracle-user-manual_8md_8txt_1ad06afa07b0e26dd80f556e318c747644" compoundref="erl2-oracle-user-manual_8md_8txt" startline="130">a</references>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a9e32a79e1fd44a43bcbc5ab3cf66b552" compoundref="erl2-oracle-user-manual_8md_8txt" startline="129">b</references>
        <referencedby refid="classaruco_1_1_dictionary_based_1a52bdd094306122899e0bb545563e8b4b" compoundref="dictionary__based_8cpp" startline="84" endline="160">aruco::DictionaryBased::detect</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ad759f5744ed84933588772d5c01b789f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::__glGetModelViewMatrix</definition>
        <argsstring>(double modelview_matrix[16], const cv::Mat &amp;Rvec, const cv::Mat &amp;Tvec)</argsstring>
        <name>__glGetModelViewMatrix</name>
        <param>
          <type>double</type>
          <declname>modelview_matrix</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>Rvec</declname>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>Tvec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markermap.cpp" line="174" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markermap.cpp" bodystart="174" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1a3197db6116a3222abc76fd147c4c90ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aruco::__OgreGetPoseParameters</definition>
        <argsstring>(double position[3], double orientation[4], const cv::Mat &amp;Rvec, const cv::Mat &amp;Tvec)</argsstring>
        <name>__OgreGetPoseParameters</name>
        <param>
          <type>double</type>
          <declname>position</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>orientation</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>Rvec</declname>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>Tvec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markermap.cpp" line="235" column="6" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/markermap.cpp" bodystart="235" bodyend="323"/>
        <references refid="robocluedo_8md_8txt_1a35abdf7c70a49b9ea28041fbfe4afe02">position</references>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ad7304e2d05b6357cf4d6b52af12b430c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double aruco::hubber</definition>
        <argsstring>(double e, double _delta)</argsstring>
        <name>hubber</name>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" line="252" column="15" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" bodystart="252" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ad2f9415a52ce3017fd1c46faec6fae58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double aruco::hubberMono</definition>
        <argsstring>(double e)</argsstring>
        <name>hubberMono</name>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" line="268" column="15" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" bodystart="268" bodyend="278"/>
        <referencedby refid="namespacearuco_1acc51a603e2a95802d9958821317d4fc1" compoundref="posetracker_8cpp" startline="280" endline="283">getHubberMonoWeight</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1acc51a603e2a95802d9958821317d4fc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double aruco::getHubberMonoWeight</definition>
        <argsstring>(double SqErr, double Information)</argsstring>
        <name>getHubberMonoWeight</name>
        <param>
          <type>double</type>
          <declname>SqErr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Information</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" line="280" column="15" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" bodystart="280" bodyend="283"/>
        <references refid="namespacearuco_1ad2f9415a52ce3017fd1c46faec6fae58" compoundref="posetracker_8cpp" startline="268" endline="278">hubberMono</references>
        <referencedby refid="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" compoundref="posetracker_8cpp" startline="285" endline="354">__aruco_solve_pnp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double aruco::__aruco_solve_pnp</definition>
        <argsstring>(const std::vector&lt; cv::Point3f &gt; &amp;p3d, const std::vector&lt; cv::Point2f &gt; &amp;p2d, const cv::Mat &amp;cam_matrix, const cv::Mat &amp;dist, cv::Mat &amp;r_io, cv::Mat &amp;t_io)</argsstring>
        <name>__aruco_solve_pnp</name>
        <param>
          <type>const std::vector&lt; cv::Point3f &gt; &amp;</type>
          <declname>p3d</declname>
        </param>
        <param>
          <type>const std::vector&lt; cv::Point2f &gt; &amp;</type>
          <declname>p2d</declname>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>cam_matrix</declname>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>r_io</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>t_io</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" line="285" column="8" bodyfile="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp" bodystart="285" bodyend="354"/>
        <references refid="erl2-oracle-user-manual_8md_8txt_1a060ea53faa9c0b619cd0d5ccec07b0fe" compoundref="erl2-oracle-user-manual_8md_8txt" startline="127">r</references>
        <references refid="namespacearuco_1acc51a603e2a95802d9958821317d4fc1" compoundref="posetracker_8cpp" startline="280" endline="283">getHubberMonoWeight</references>
        <references refid="classaruco_1_1_lev_marq_1a7b5b41aa09da3fcd3cd0c5f3eec62c43" compoundref="levmarq_8h" startline="219" endline="226">aruco::LevMarq&lt; T &gt;::setParams</references>
        <references refid="classaruco_1_1_lev_marq_1a28534e8cd28e3ec8ad36201082a9a891" compoundref="levmarq_8h" startline="342" endline="385">aruco::LevMarq&lt; T &gt;::solve</references>
        <referencedby refid="classaruco_1_1_marker_pose_tracker_1a8eeb8ba3c29a89c7c9c20e33197b59a7" compoundref="posetracker_8cpp" startline="368" endline="395">aruco::MarkerPoseTracker::estimatePose</referencedby>
        <referencedby refid="classaruco_1_1_marker_map_pose_tracker_1abd678d2bb687984bfb13cea41ae59b0b" compoundref="posetracker_8cpp" startline="523" endline="564">aruco::MarkerMapPoseTracker::estimatePose</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Copyright 2017 Rafael Muñoz Salinas. All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY Rafael Muñoz Salinas &apos;&apos;AS IS&apos;&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Rafael Muñoz Salinas OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
<para>The views and conclusions contained in the software and documentation are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of Rafael Muñoz Salinas. </para>
    </detaileddescription>
    <location file="robocluedo_dependencies/aruco_ros/aruco/include/aruco/cameraparameters.h" line="38" column="1"/>
  </compounddef>
</doxygen>
