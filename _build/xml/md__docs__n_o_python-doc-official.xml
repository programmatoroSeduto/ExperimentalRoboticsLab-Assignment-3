<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__docs__n_o_python-doc-official" kind="page">
    <compoundname>md__docs_NO_python-doc-official</compoundname>
    <title>Python Google Docstring â€“ an official example</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>```python </para>
<sect1 id="md__docs__n_o_python-doc-official_1autotoc_md100">
<title>-*- coding: utf-8 -*-</title>
<para>&quot;&quot;"Example Google style docstrings.</para>
<para>This module demonstrates documentation as specified by the <computeroutput>Google Python Style Guide</computeroutput>_. Docstrings may extend over multiple lines. Sections are created with a section header and a colon followed by a block of indented text.</para>
<para>Example: Examples can be given using either the <computeroutput>Example</computeroutput> or <computeroutput>Examples</computeroutput> sections. Sections support any reStructuredText formatting, including literal blocks:: <verbatim>$ python example_google.py
</verbatim></para>
<para>Section breaks are created by resuming unindented text. Section breaks are also implicitly created anytime a new section starts.</para>
<para>Attributes: module_level_variable1 (int): Module level variables may be documented in either the <computeroutput>Attributes</computeroutput> section of the module docstring, or in an inline docstring immediately following the variable.</para>
<para>Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it.</para>
<para>Todo:<itemizedlist>
<listitem><para>For module TODOs</para>
</listitem><listitem><para>You have to also use <computeroutput>sphinx.ext.todo</computeroutput> extension</para>
</listitem></itemizedlist>
</para>
<para>.. _Google Python Style Guide: <ulink url="http://google.github.io/styleguide/pyguide.html">http://google.github.io/styleguide/pyguide.html</ulink></para>
<para>&quot;&quot;"</para>
<para>module_level_variable1 = 12345</para>
<para>module_level_variable2 = 98765 &quot;&quot;"int: Module level variable documented inline.</para>
<para>The docstring may span multiple lines. The type may optionally be specified on the first line, separated by a colon. &quot;&quot;"</para>
<para>def function_with_types_in_docstring(param1, param2): &quot;&quot;"Example function with types documented in the docstring.</para>
<para><computeroutput>PEP 484</computeroutput>_ type annotations are supported. If attribute, parameter, and return types are annotated according to <computeroutput>PEP 484</computeroutput>_, they do not need to be included in the docstring:</para>
<para>Args: param1 (int): The first parameter. param2 (str): The second parameter.</para>
<para>Returns: bool: The return value. True for success, False otherwise.</para>
<para>.. _PEP 484: <ulink url="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</ulink></para>
<para>&quot;&quot;"</para>
<para>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool: &quot;&quot;"Example function with PEP 484 type annotations.</para>
<para>Args: param1: The first parameter. param2: The second parameter.</para>
<para>Returns: The return value. True for success, False otherwise.</para>
<para>&quot;&quot;"</para>
<para>def module_level_function(param1, param2=None, *args, **kwargs): &quot;&quot;"This is an example of a module level function.</para>
<para>Function parameters should be documented in the <computeroutput>Args</computeroutput> section. The name of each parameter is required. The type and description of each parameter is optional, but should be included if not obvious.</para>
<para>If *args or **kwargs are accepted, they should be listed as <computeroutput>*args</computeroutput> and <computeroutput>**kwargs</computeroutput>.</para>
<para>The format for a parameter is:: <verbatim>name (type): description
    The description may span multiple lines. Following
    lines should be indented. The &quot;(type)&quot; is optional.

    Multiple paragraphs are supported in parameter
    descriptions.
</verbatim></para>
<para>Args: param1 (int): The first parameter. param2 (:obj:<computeroutput>str</computeroutput>, optional): The second parameter. Defaults to None. Second line of description should be indented. *args: Variable length argument list. **kwargs: Arbitrary keyword arguments.</para>
<para>Returns: bool: True if successful, False otherwise.</para>
<para>The return type is optional and may be specified at the beginning of the <computeroutput>Returns</computeroutput> section followed by a colon.</para>
<para>The <computeroutput>Returns</computeroutput> section may span multiple lines and paragraphs. Following lines should be indented to match the first line.</para>
<para>The <computeroutput>Returns</computeroutput> section supports any reStructuredText formatting, including literal blocks:: <verbatim>{
    &apos;param1&apos;: param1,
    &apos;param2&apos;: param2
}
</verbatim></para>
<para>Raises: AttributeError: The <computeroutput>Raises</computeroutput> section is a list of all exceptions that are relevant to the interface. ValueError: If <computeroutput>param2</computeroutput> is equal to <computeroutput>param1</computeroutput>.</para>
<para>&quot;&quot;" if param1 == param2: raise ValueError(&apos;param1 may not be equal to param2&apos;) return True</para>
<para>def example_generator(n): &quot;&quot;"Generators have a <computeroutput>Yields</computeroutput> section instead of a <computeroutput>Returns</computeroutput> section.</para>
<para>Args: n (int): The upper limit of the range to generate, from 0 to <computeroutput>n</computeroutput> - 1.</para>
<para>Yields: int: The next number in the range of 0 to <computeroutput>n</computeroutput> - 1.</para>
<para>Examples: Examples should be written in doctest format, and should illustrate how to use the function.</para>
<para>&gt;&gt;&gt; print([i for i in example_generator(4)]) [0, 1, 2, 3]</para>
<para>&quot;&quot;" for i in range(n): yield i</para>
<para>class ExampleError(Exception): &quot;&quot;"Exceptions are documented in the same way as classes.</para>
<para>The <bold>init</bold> method may be documented in either the class level docstring, or as a docstring on the <bold>init</bold> method itself.</para>
<para>Either form is acceptable, but the two should not be mixed. Choose one convention to document the <bold>init</bold> method and be consistent with it.</para>
<para>Note: Do not include the <computeroutput>self</computeroutput> parameter in the <computeroutput>Args</computeroutput> section.</para>
<para>Args: msg (str): Human readable string describing the exception. code (:obj:<computeroutput>int</computeroutput>, optional): Error code.</para>
<para>Attributes: msg (str): Human readable string describing the exception. code (int): Exception error code.</para>
<para>&quot;&quot;"</para>
<para>def <bold>init</bold>(self, msg, code): self.msg = msg self.code = code</para>
<para>class ExampleClass(object): &quot;&quot;"The summary line for a class docstring should fit on one line.</para>
<para>If the class has public attributes, they may be documented here in an <computeroutput>Attributes</computeroutput> section and follow the same formatting as a function&apos;s <computeroutput>Args</computeroutput> section. Alternatively, attributes may be documented inline with the attribute&apos;s declaration (see <bold>init</bold> method below).</para>
<para>Properties created with the <computeroutput>@property</computeroutput> decorator should be documented in the property&apos;s getter method.</para>
<para>Attributes: attr1 (str): Description of <computeroutput>attr1</computeroutput>. attr2 (:obj:<computeroutput>int</computeroutput>, optional): Description of <computeroutput>attr2</computeroutput>.</para>
<para>&quot;&quot;"</para>
<para>def <bold>init</bold>(self, param1, param2, param3): &quot;&quot;"Example of docstring on the <bold>init</bold> method.</para>
<para>The <bold>init</bold> method may be documented in either the class level docstring, or as a docstring on the <bold>init</bold> method itself.</para>
<para>Either form is acceptable, but the two should not be mixed. Choose one convention to document the <bold>init</bold> method and be consistent with it.</para>
<para>Note: Do not include the <computeroutput>self</computeroutput> parameter in the <computeroutput>Args</computeroutput> section.</para>
<para>Args: param1 (str): Description of <computeroutput>param1</computeroutput>. param2 (:obj:<computeroutput>int</computeroutput>, optional): Description of <computeroutput>param2</computeroutput>. Multiple lines are supported. param3 (:obj:<computeroutput>list</computeroutput> of :obj:<computeroutput>str</computeroutput>): Description of <computeroutput>param3</computeroutput>.</para>
<para>&quot;&quot;" self.attr1 = param1 self.attr2 = param2 self.attr3 = param3 #: Doc comment <emphasis>inline</emphasis> with attribute</para>
<para>#: list of str: Doc comment <emphasis>before</emphasis> attribute, with type specified self.attr4 = [&apos;attr4&apos;]</para>
<para>self.attr5 = None &quot;&quot;&quot;str: Docstring *after* attribute, with type specified.&quot;&quot;&quot; </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
