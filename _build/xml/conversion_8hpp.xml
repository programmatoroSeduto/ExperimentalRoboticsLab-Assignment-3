<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="conversion_8hpp" kind="file" language="C++">
    <compoundname>conversion.hpp</compoundname>
    <includes local="no">boost/config.hpp</includes>
    <includes refid="endian__compat_8h" local="no">boost/predef/detail/endian_compat.h</includes>
    <includes local="no">boost/cstdint.hpp</includes>
    <includes refid="intrinsic_8hpp" local="no">boost/endian/detail/intrinsic.hpp</includes>
    <includes refid="scoped__enum_8hpp" local="no">boost/core/scoped_enum.hpp</includes>
    <includes local="no">boost/static_assert.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstring</includes>
    <includedby refid="cv__bridge_8cpp" local="yes">robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp</includedby>
    <includedby refid="test__endian_8cpp" local="yes">robocluedo_dependencies/vision_opencv/cv_bridge/test/test_endian.cpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>boost/predef/os/ios.h</label>
        <link refid="ios_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>boost/predef/os/bsd/open.h</label>
        <link refid="open_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>boost/predef/detail/_cassert.h</label>
        <link refid="__cassert_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>assert.h</label>
      </node>
      <node id="24">
        <label>boost/core/scoped_enum.hpp</label>
        <link refid="scoped__enum_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>boost/predef/architecture.h</label>
      </node>
      <node id="25">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="8">
        <label>boost/predef/library/c/gnu.h</label>
        <link refid="gnu_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>boost/predef/make.h</label>
        <link refid="make_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>boost/predef/detail/endian_compat.h</label>
        <link refid="endian__compat_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>boost/predef/os/bsd.h</label>
        <link refid="bsd_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>boost/predef/os/bsd/free.h</label>
        <link refid="free_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>boost/endian/detail/intrinsic.hpp</label>
        <link refid="intrinsic_8hpp"/>
      </node>
      <node id="22">
        <label>boost/cstdint.hpp</label>
      </node>
      <node id="15">
        <label>boost/predef/os/bsd/bsdi.h</label>
        <link refid="bsdi_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>boost/predef/os/bsd/net.h</label>
        <link refid="net_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>boost/predef/other/endian.h</label>
        <link refid="endian_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>boost/predef/os/android.h</label>
        <link refid="android_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/src/boost/endian/conversion.hpp</label>
        <link refid="conversion_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>boost/predef/os/macos.h</label>
        <link refid="macos_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>boost/config.hpp</label>
      </node>
      <node id="5">
        <label>boost/predef/version_number.h</label>
        <link refid="version__number_8h"/>
      </node>
      <node id="9">
        <label>boost/predef/library/c/_prefix.h</label>
        <link refid="__prefix_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>boost/predef/detail/test.h</label>
        <link refid="test_8h"/>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>cstring</label>
      </node>
      <node id="16">
        <label>boost/predef/os/bsd/dragonfly.h</label>
        <link refid="dragonfly_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/src/cv_bridge.cpp</label>
        <link refid="cv__bridge_8cpp"/>
      </node>
      <node id="3">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/test/test_endian.cpp</label>
        <link refid="test__endian_8cpp"/>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/vision_opencv/cv_bridge/src/boost/endian/conversion.hpp</label>
        <link refid="conversion_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1value__converter" prot="public">boost::endian::detail::value_converter</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4" prot="public">boost::endian::detail::value_converter&lt; order::big, order::big, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4" prot="public">boost::endian::detail::value_converter&lt; order::little, order::little, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4" prot="public">boost::endian::detail::value_converter&lt; order::big, order::little, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4" prot="public">boost::endian::detail::value_converter&lt; order::little, order::big, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1converter" prot="public">boost::endian::detail::converter</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4" prot="public">boost::endian::detail::converter&lt; order::big, order::big, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4" prot="public">boost::endian::detail::converter&lt; order::little, order::little, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4" prot="public">boost::endian::detail::converter&lt; order::big, order::little, T &gt;</innerclass>
    <innerclass refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4" prot="public">boost::endian::detail::converter&lt; order::little, order::big, T &gt;</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1endian">boost::endian</innernamespace>
    <innernamespace refid="namespaceboost_1_1endian_1_1detail">boost::endian::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>boost/endian/conversion.hpp<sp/><sp/>-------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>Beman<sp/>Dawes<sp/>2010,<sp/>2011,<sp/>2014</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>http://www.boost.org/LICENSE_1_0.txt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOST_ENDIAN_CONVERSION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_ENDIAN_CONVERSION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="endian__compat_8h" kindref="compound">boost/predef/detail/endian_compat.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/cstdint.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="intrinsic_8hpp" kindref="compound">boost/endian/detail/intrinsic.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="scoped__enum_8hpp" kindref="compound">boost/core/scoped_enum.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/static_assert.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------<sp/>synopsis<sp/>---------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost" kindref="compound">boost</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24" refid="namespaceboost_1_1endian" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">endian</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26" refid="namespaceboost_1_1endian_1afa153687462a9b78131f2da81835ce2d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceboost_1_1endian_1afa153687462a9b78131f2da81835ce2d" kindref="member">BOOST_SCOPED_ENUM_START</ref>(order)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>big,<sp/>little,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/><sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>native<sp/>=<sp/>big</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>native<sp/>=<sp/>little</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>};<sp/><ref refid="scoped__enum_8hpp_1a2f9c1d8d5f0459631963cf2e7f048cca" kindref="member">BOOST_SCOPED_ENUM_END</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return-by-value<sp/>interfaces<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suggested<sp/>by<sp/>Phil<sp/>Endecott<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user-defined<sp/>types<sp/>(UDTs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>All<sp/>return-by-value<sp/>conversion<sp/>function<sp/>templates<sp/>are<sp/>required<sp/>to<sp/>be<sp/>implemented<sp/>in<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>terms<sp/>of<sp/>an<sp/>unqualified<sp/>call<sp/>to<sp/>&quot;endian_reverse(x)&quot;,<sp/>a<sp/>function<sp/>returning<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>value<sp/>of<sp/>x<sp/>with<sp/>endianness<sp/>reversed.<sp/>This<sp/>provides<sp/>a<sp/>customization<sp/>point<sp/>for<sp/>any<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>UDT<sp/>that<sp/>provides<sp/>a<sp/>&quot;endian_reverse&quot;<sp/>free-function<sp/>meeting<sp/>the<sp/>requirements.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>It<sp/>must<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>same<sp/>namespace<sp/>as<sp/>the<sp/>UDT<sp/>itself<sp/>so<sp/>that<sp/>it<sp/>will<sp/>be<sp/>found<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>by<sp/>argument<sp/>dependent<sp/>lookup<sp/>(ADL).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>customization<sp/>for<sp/>exact-length<sp/>arithmetic<sp/>types.<sp/>See<sp/>doc/conversion.html/#FAQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Note:<sp/>The<sp/>omission<sp/>of<sp/>an<sp/>overloads<sp/>for<sp/>the<sp/>arithmetic<sp/>type<sp/>(typically<sp/>long,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>long<sp/>long)<sp/>not<sp/>assigned<sp/>to<sp/>one<sp/>of<sp/>the<sp/>exact<sp/>length<sp/>typedefs<sp/>is<sp/>a<sp/>deliberate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>design<sp/>decision.<sp/>Such<sp/>overloads<sp/>would<sp/>be<sp/>non-portable<sp/>and<sp/>thus<sp/>error<sp/>prone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int8_t<sp/><sp/><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int8_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int16_t<sp/><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int16_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int32_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int64_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint8_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint16_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint32_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint64_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>reverse<sp/>byte<sp/>order<sp/>unless<sp/>native<sp/>endianness<sp/>is<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a7506b7b362ed917c3be111f3c017f5f7" kindref="member">big_to_native</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Returns:<sp/>x<sp/>if<sp/>native<sp/>endian<sp/>order<sp/>is<sp/>big,<sp/>otherwise<sp/>endian_reverse(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a0a885a71d7b5f0c6e6d6b67b67a8c1d5" kindref="member">native_to_big</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Returns:<sp/>x<sp/>if<sp/>native<sp/>endian<sp/>order<sp/>is<sp/>big,<sp/>otherwise<sp/>endian_reverse(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>reverse<sp/>byte<sp/>order<sp/>unless<sp/>native<sp/>endianness<sp/>is<sp/>little</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1af8276009ac68a49ab6b71251e3dedf85" kindref="member">little_to_native</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Returns:<sp/>x<sp/>if<sp/>native<sp/>endian<sp/>order<sp/>is<sp/>little,<sp/>otherwise<sp/>endian_reverse(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a4540ff464f1b77d7d06dc48641f43fc3" kindref="member">native_to_little</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Returns:<sp/>x<sp/>if<sp/>native<sp/>endian<sp/>order<sp/>is<sp/>little,<sp/>otherwise<sp/>endian_reverse(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>generic<sp/>conditional<sp/>reverse<sp/>byte<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>From,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>To,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndianReversible&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a9d2bdbc3ca7f0fc52f4e20f068a971da" kindref="member">conditional_reverse</ref>(EndianReversible<sp/>from)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Returns:<sp/>If<sp/>From<sp/>==<sp/>To<sp/>have<sp/>different<sp/>values,<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Otherwise<sp/>endian_reverse(from).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Remarks:<sp/>The<sp/>From<sp/>==<sp/>To<sp/>test,<sp/>and<sp/>as<sp/>a<sp/>consequence<sp/>which<sp/>form<sp/>the<sp/>return<sp/>takes,<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>determined<sp/>at<sp/>compile<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>runtime<sp/>conditional<sp/>reverse<sp/>byte<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a9d2bdbc3ca7f0fc52f4e20f068a971da" kindref="member">conditional_reverse</ref>(EndianReversible<sp/>from,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>from_order,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>to_order)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Returns:<sp/>from_order<sp/>==<sp/>to_order<sp/>?<sp/>from<sp/>:<sp/>endian_reverse(from).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Q:<sp/>What<sp/>happended<sp/>to<sp/>bswap,<sp/>htobe,<sp/>and<sp/>the<sp/>other<sp/>synonym<sp/>functions<sp/>based<sp/>on<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>popularized<sp/>by<sp/>BSD,<sp/>OS<sp/>X,<sp/>and<sp/>Linux?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>A:<sp/>Turned<sp/>out<sp/>these<sp/>may<sp/>be<sp/>implemented<sp/>as<sp/>macros<sp/>on<sp/>some<sp/>systems.<sp/>Ditto<sp/>POSIX<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>such<sp/>functionality.<sp/>Since<sp/>macros<sp/>would<sp/>cause<sp/>endless<sp/>problems<sp/>with<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>same<sp/>names,<sp/>and<sp/>these<sp/>functions<sp/>are<sp/>just<sp/>synonyms<sp/>anyhow,<sp/>they<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse<sp/>in<sp/>place<sp/>interfaces<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user-defined<sp/>types<sp/>(UDTs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>All<sp/>reverse<sp/>in<sp/>place<sp/>function<sp/>templates<sp/>are<sp/>required<sp/>to<sp/>be<sp/>implemented<sp/>in<sp/>terms<sp/><sp/><sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>of<sp/>an<sp/>unqualified<sp/>call<sp/>to<sp/>&quot;endian_reverse_inplace(x)&quot;,<sp/>a<sp/>function<sp/>reversing<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>the<sp/>endianness<sp/>of<sp/>x,<sp/>which<sp/>is<sp/>a<sp/>non-const<sp/>reference.<sp/>This<sp/>provides<sp/>a<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>customization<sp/>point<sp/>for<sp/>any<sp/>UDT<sp/>that<sp/>provides<sp/>a<sp/>&quot;reverse_inplace&quot;<sp/>free-function<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>meeting<sp/>the<sp/>requirements.<sp/>The<sp/>free-function<sp/>must<sp/>be<sp/>declared<sp/>in<sp/>the<sp/>same<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>namespace<sp/>as<sp/>the<sp/>UDT<sp/>itself<sp/>so<sp/>that<sp/>it<sp/>will<sp/>be<sp/>found<sp/>by<sp/>argument-dependent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>lookup<sp/>(ADL).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>reverse<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(EndianReversible&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Effects:<sp/>x<sp/>=<sp/>endian_reverse(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>reverse<sp/>in<sp/>place<sp/>unless<sp/>native<sp/>endianness<sp/>is<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a7baf2592065767d95c104efe56f86834" kindref="member">big_to_native_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Effects:<sp/>none<sp/>if<sp/>native<sp/>byte-order<sp/>is<sp/>big,<sp/>otherwise<sp/>endian_reverse_inplace(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a4719077e096c1187f1bd276fb2cba1bd" kindref="member">native_to_big_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Effects:<sp/>none<sp/>if<sp/>native<sp/>byte-order<sp/>is<sp/>big,<sp/>otherwise<sp/>endian_reverse_inplace(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>reverse<sp/>in<sp/>place<sp/>unless<sp/>native<sp/>endianness<sp/>is<sp/>little</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1aef6f28f9eeb2463fcd6ef7c39e767141" kindref="member">little_to_native_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Effects:<sp/>none<sp/>if<sp/>native<sp/>byte-order<sp/>is<sp/>little,<sp/>otherwise<sp/>endian_reverse_inplace(x);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a27a57e3b8af8f90d0a3065f941622971" kindref="member">native_to_little_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Effects:<sp/>none<sp/>if<sp/>native<sp/>byte-order<sp/>is<sp/>little,<sp/>otherwise<sp/>endian_reverse_inplace(x);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>generic<sp/>conditional<sp/>reverse<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>From,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>To,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a5aa6c2fa28759e8595e2ef5dc0397cba" kindref="member">conditional_reverse_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT;<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>runtime<sp/>reverse<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a5aa6c2fa28759e8595e2ef5dc0397cba" kindref="member">conditional_reverse_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>from_order,<sp/><sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>to_order)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------<sp/>end<sp/>synopsis<sp/>-------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="namespaceboost_1_1endian_1_1detail" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>generic<sp/>reverse<sp/>function<sp/>template<sp/>implementation<sp/>approach<sp/>using<sp/>std::reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>suggested<sp/>by<sp/>Mathias<sp/>Gaunard.<sp/>Primary<sp/>motivation<sp/>for<sp/>inclusion<sp/>is<sp/>to<sp/>have<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>independent<sp/>implementation<sp/>to<sp/>test<sp/>against.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="166" refid="namespaceboost_1_1endian_1_1detail_1a2580bbef8bbaa6692bc7c3514395abea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a2580bbef8bbaa6692bc7c3514395abea" kindref="member">std_endian_reverse</ref>(T<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>tmp(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;tmp),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;tmp)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>conditional<sp/>unaligned<sp/>reverse<sp/>copy,<sp/>patterned<sp/>after<sp/>std::reverse_copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a7ea37c68200019f8a3f06f3568d2228d" kindref="member">big_reverse_copy</ref>(T<sp/>from,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>to)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a7ea37c68200019f8a3f06f3568d2228d" kindref="member">big_reverse_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>from,<sp/>T&amp;<sp/>to)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a68253296d8369b59b1bdb10dc8bb7471" kindref="member">little_reverse_copy</ref>(T<sp/>from,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>to)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a68253296d8369b59b1bdb10dc8bb7471" kindref="member">little_reverse_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>from,<sp/>T&amp;<sp/>to)<sp/>BOOST_NOEXCEPT;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return-by-value<sp/>implementation<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>--<sp/>portable<sp/>approach<sp/>suggested<sp/>by<sp/>tymofey,<sp/>with<sp/>avoidance<sp/>of<sp/>undefined<sp/>behavior<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>suggested<sp/>by<sp/>Giovanni<sp/>Piero<sp/>Deretta,<sp/>with<sp/>a<sp/>further<sp/>refinement<sp/>suggested<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>Pyry<sp/>Jahkola.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>--<sp/>intrinsic<sp/>approach<sp/>suggested<sp/>by<sp/>reviewers,<sp/>and<sp/>by<sp/>David<sp/>Stone,<sp/>who<sp/>provided<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>his<sp/>Boost<sp/>licensed<sp/>macro<sp/>implementation<sp/>(detail/intrinsic.hpp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int8_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int8_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203" refid="namespaceboost_1_1endian_1a96400c769b9703487093bb6862651144" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int16_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BOOST_ENDIAN_NO_INTRINSICS<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_2(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="namespaceboost_1_1endian_1a65f739e7e7f8eb259f4c02115d127755" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int32_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BOOST_ENDIAN_NO_INTRINSICS<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>step16;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>step16<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>&lt;&lt;<sp/>16<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(step16)<sp/>&lt;&lt;<sp/>8)<sp/>&amp;<sp/>0xff00ff00)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(step16)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0x00ff00ff);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_4(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="namespaceboost_1_1endian_1a674292553fbda2ca64a39fe292db02b3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(int64_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BOOST_ENDIAN_NO_INTRINSICS<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>step32,<sp/>step16;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>step32<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>&lt;&lt;<sp/>32<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>step16<sp/>=<sp/>(step32<sp/>&amp;<sp/>0x0000FFFF0000FFFFULL)<sp/>&lt;&lt;<sp/>16</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(step32<sp/>&amp;<sp/>0xFFFF0000FFFF0000ULL)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((step16<sp/>&amp;<sp/>0x00FF00FF00FF00FFULL)<sp/>&lt;&lt;<sp/>8</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(step16<sp/>&amp;<sp/>0xFF00FF00FF00FF00ULL)<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_8(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="240" refid="namespaceboost_1_1endian_1ab038e1498a15fcd57a495b4ae11f76d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint8_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="namespaceboost_1_1endian_1a426692324f58f6c9b792016253b64193" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint16_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BOOST_ENDIAN_NO_INTRINSICS<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref><sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_2(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="namespaceboost_1_1endian_1a5ced0af69d06c12543d16ebf2214be84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint32_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BOOST_ENDIAN_NO_INTRINSICS<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>step16;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>step16<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>16<sp/>|<sp/>x<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((step16<sp/>&lt;&lt;<sp/>8)<sp/>&amp;<sp/>0xff00ff00)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((step16<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0x00ff00ff);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_4(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="namespaceboost_1_1endian_1a0ef893ea2d6444c62fc789683d5910d7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(uint64_t<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BOOST_ENDIAN_NO_INTRINSICS<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>step32,<sp/>step16;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>step32<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>32<sp/>|<sp/>x<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>step16<sp/>=<sp/>(step32<sp/>&amp;<sp/>0x0000FFFF0000FFFFULL)<sp/>&lt;&lt;<sp/>16</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(step32<sp/>&amp;<sp/>0xFFFF0000FFFF0000ULL)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(step16<sp/>&amp;<sp/>0x00FF00FF00FF00FFULL)<sp/>&lt;&lt;<sp/>8</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(step16<sp/>&amp;<sp/>0xFF00FF00FF00FF00ULL)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_8(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="283" refid="namespaceboost_1_1endian_1a7506b7b362ed917c3be111f3c017f5f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a7506b7b362ed917c3be111f3c017f5f7" kindref="member">big_to_native</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="293" refid="namespaceboost_1_1endian_1a0a885a71d7b5f0c6e6d6b67b67a8c1d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a0a885a71d7b5f0c6e6d6b67b67a8c1d5" kindref="member">native_to_big</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="303" refid="namespaceboost_1_1endian_1af8276009ac68a49ab6b71251e3dedf85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1af8276009ac68a49ab6b71251e3dedf85" kindref="member">little_to_native</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="313" refid="namespaceboost_1_1endian_1a4540ff464f1b77d7d06dc48641f43fc3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a4540ff464f1b77d7d06dc48641f43fc3" kindref="member">native_to_little</ref>(EndianReversible<sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Primary<sp/>template<sp/>and<sp/>specializations<sp/>to<sp/>support<sp/>endian_reverse().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>See<sp/>rationale<sp/>in<sp/>endian_reverse()<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>From,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>To,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndianReversible&gt;</highlight></codeline>
<codeline lineno="328" refid="classboost_1_1endian_1_1detail_1_1value__converter" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1value__converter" kindref="compound">value_converter</ref><sp/>;<sp/><sp/></highlight><highlight class="comment">//<sp/>primary<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1value__converter" kindref="compound">value_converter</ref><sp/>&lt;order::big,<sp/>order::big,<sp/>T&gt;</highlight></codeline>
<codeline lineno="330" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4_1a0277a336c2edf9385ab2bdf8542444f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/>T<sp/><ref refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4_1a0277a336c2edf9385ab2bdf8542444f8" kindref="member">operator()</ref>(T<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;}};</highlight></codeline>
<codeline lineno="331" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1value__converter" kindref="compound">value_converter</ref><sp/>&lt;order::little,<sp/>order::little,<sp/>T&gt;</highlight></codeline>
<codeline lineno="332" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4_1a7b7e086587f99638d7b3237990dbf18e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/>T<sp/><ref refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4_1a7b7e086587f99638d7b3237990dbf18e" kindref="member">operator()</ref>(T<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>;}};</highlight></codeline>
<codeline lineno="333" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1value__converter" kindref="compound">value_converter</ref><sp/>&lt;order::big,<sp/>order::little,<sp/>T&gt;</highlight></codeline>
<codeline lineno="334" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4_1a1e9000117a07c42e330512e87fac524e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/>T<sp/><ref refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4_1a1e9000117a07c42e330512e87fac524e" kindref="member">operator()</ref>(T<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);}};</highlight></codeline>
<codeline lineno="335" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1value__converter" kindref="compound">value_converter</ref><sp/>&lt;order::little,<sp/>order::big,<sp/>T&gt;</highlight></codeline>
<codeline lineno="336" refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4_1ab4d9ea62ce9d4e77c9041d50e2c21046" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/>T<sp/><ref refid="classboost_1_1endian_1_1detail_1_1value__converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4_1ab4d9ea62ce9d4e77c9041d50e2c21046" kindref="member">operator()</ref>(T<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);}};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>generic<sp/>conditional<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>From,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>To,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndianReversible&gt;</highlight></codeline>
<codeline lineno="342" refid="namespaceboost_1_1endian_1a9d2bdbc3ca7f0fc52f4e20f068a971da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a9d2bdbc3ca7f0fc52f4e20f068a971da" kindref="member">conditional_reverse</ref>(EndianReversible<sp/>from)<sp/>BOOST_NOEXCEPT<sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>work<sp/>around<sp/>lack<sp/>of<sp/>function<sp/>template<sp/>partial<sp/>specialization<sp/>by<sp/>instantiating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>a<sp/>function<sp/>object<sp/>of<sp/>a<sp/>class<sp/>that<sp/>is<sp/>partially<sp/>specialized<sp/>on<sp/>the<sp/>two<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>template<sp/>parameters,<sp/>and<sp/>then<sp/>calling<sp/>its<sp/>operator().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classboost_1_1endian_1_1detail_1_1value__converter" kindref="compound">detail::value_converter &lt;From, To, EndianReversible&gt;</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp(from);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>runtime<sp/>conditional<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible<sp/>&gt;</highlight></codeline>
<codeline lineno="352" refid="namespaceboost_1_1endian_1ab4a34f7dcdbdbfaa512e1a7e26ed24b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>EndianReversible<sp/><sp/><ref refid="namespaceboost_1_1endian_1a9d2bdbc3ca7f0fc52f4e20f068a971da" kindref="member">conditional_reverse</ref>(EndianReversible<sp/><sp/>from,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>from_order,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>to_order)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_order<sp/>==<sp/>to_order<sp/>?<sp/>from<sp/>:<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(from);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse-in-place<sp/>implementation<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>reverse<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversible&gt;</highlight></codeline>
<codeline lineno="364" refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(EndianReversible&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref><sp/>=<sp/><ref refid="namespaceboost_1_1endian_1a26cd3b0243832d97d56f4b062270d3f3" kindref="member">endian_reverse</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a7baf2592065767d95c104efe56f86834" kindref="member">big_to_native_inplace</ref>(EndianReversibleInplace&amp;)<sp/>BOOST_NOEXCEPT<sp/>{}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="namespaceboost_1_1endian_1a7baf2592065767d95c104efe56f86834" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a7baf2592065767d95c104efe56f86834" kindref="member">big_to_native_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);<sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a4719077e096c1187f1bd276fb2cba1bd" kindref="member">native_to_big_inplace</ref>(EndianReversibleInplace&amp;)<sp/>BOOST_NOEXCEPT<sp/>{}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="namespaceboost_1_1endian_1a4719077e096c1187f1bd276fb2cba1bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a4719077e096c1187f1bd276fb2cba1bd" kindref="member">native_to_big_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1aef6f28f9eeb2463fcd6ef7c39e767141" kindref="member">little_to_native_inplace</ref>(EndianReversibleInplace&amp;)<sp/>BOOST_NOEXCEPT<sp/>{}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="namespaceboost_1_1endian_1aef6f28f9eeb2463fcd6ef7c39e767141" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1aef6f28f9eeb2463fcd6ef7c39e767141" kindref="member">little_to_native_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>BOOST_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a27a57e3b8af8f90d0a3065f941622971" kindref="member">native_to_little_inplace</ref>(EndianReversibleInplace&amp;)<sp/>BOOST_NOEXCEPT<sp/>{}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="namespaceboost_1_1endian_1a27a57e3b8af8f90d0a3065f941622971" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a27a57e3b8af8f90d0a3065f941622971" kindref="member">native_to_little_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Primary<sp/>template<sp/>and<sp/>specializations<sp/>support<sp/>generic<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>endian_reverse_inplace().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>See<sp/>rationale<sp/>in<sp/>endian_reverse_inplace()<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>From,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>To,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="410" refid="classboost_1_1endian_1_1detail_1_1converter" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1converter" kindref="compound">converter</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>primary<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1converter" kindref="compound">converter</ref>&lt;order::big,<sp/>order::big,<sp/>T&gt;</highlight></codeline>
<codeline lineno="412" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4_1a14ec5856d1f688f2a1ad09a5016877a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1big_00_01_t_01_4_1a14ec5856d1f688f2a1ad09a5016877a7" kindref="member">operator()</ref>(T&amp;)<sp/>BOOST_NOEXCEPT<sp/>{</highlight><highlight class="comment">/*no<sp/>effect*/</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="413" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1converter" kindref="compound">converter</ref>&lt;order::little,<sp/>order::little,<sp/>T&gt;</highlight></codeline>
<codeline lineno="414" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4_1abf3f932be2a089160433052f8dab8865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1little_00_01_t_01_4_1abf3f932be2a089160433052f8dab8865" kindref="member">operator()</ref>(T&amp;)<sp/>BOOST_NOEXCEPT<sp/>{</highlight><highlight class="comment">/*no<sp/>effect*/</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="415" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1converter" kindref="compound">converter</ref>&lt;order::big,<sp/>order::little,<sp/>T&gt;</highlight></codeline>
<codeline lineno="416" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4_1a0a5998d1785b02bc99974cbc8d01b35d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1big_00_01order_1_1little_00_01_t_01_4_1a0a5998d1785b02bc99974cbc8d01b35d" kindref="member">operator()</ref>(T&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/>{<sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);<sp/>}};</highlight></codeline>
<codeline lineno="417" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1endian_1_1detail_1_1converter" kindref="compound">converter</ref>&lt;order::little,<sp/>order::big,<sp/>T&gt;</highlight></codeline>
<codeline lineno="418" refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4_1a2e0efe4bbaf4aaa936bd9a665e1dbaf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1endian_1_1detail_1_1converter_3_01order_1_1little_00_01order_1_1big_00_01_t_01_4_1a2e0efe4bbaf4aaa936bd9a665e1dbaf1" kindref="member">operator()</ref>(T&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT<sp/>{<sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);<sp/>}};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>generic<sp/>conditional<sp/>reverse<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>From,<sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>To,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="424" refid="namespaceboost_1_1endian_1a5aa6c2fa28759e8595e2ef5dc0397cba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a5aa6c2fa28759e8595e2ef5dc0397cba" kindref="member">conditional_reverse_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>work<sp/>around<sp/>lack<sp/>of<sp/>function<sp/>template<sp/>partial<sp/>specialization<sp/>by<sp/>instantiating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>a<sp/>function<sp/>object<sp/>of<sp/>a<sp/>class<sp/>that<sp/>is<sp/>partially<sp/>specialized<sp/>on<sp/>the<sp/>two<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>template<sp/>parameters,<sp/>and<sp/>then<sp/>calling<sp/>its<sp/>operator().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classboost_1_1endian_1_1detail_1_1converter" kindref="compound">detail::converter&lt;From, To, EndianReversibleInplace&gt;</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>operator<sp/>()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>runtime<sp/>reverse<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EndianReversibleInplace&gt;</highlight></codeline>
<codeline lineno="435" refid="namespaceboost_1_1endian_1a197432ee7e630ddff8e09834226b3fa6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1a5aa6c2fa28759e8595e2ef5dc0397cba" kindref="member">conditional_reverse_inplace</ref>(EndianReversibleInplace&amp;<sp/><ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>from_order,<sp/><sp/><ref refid="scoped__enum_8hpp_1ab4a8e63ed521953694c7a789f14fb9fd" kindref="member">BOOST_SCOPED_ENUM</ref>(order)<sp/>to_order)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_order<sp/>!=<sp/>to_order)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceboost_1_1endian_1a8f0cde80b0c6e1d75b7e255f9152ad0e" kindref="member">endian_reverse_inplace</ref>(<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="447" refid="namespaceboost_1_1endian_1_1detail_1a7ea37c68200019f8a3f06f3568d2228d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a7ea37c68200019f8a3f06f3568d2228d" kindref="member">big_reverse_copy</ref>(T<sp/>from,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>to)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>ifdef<sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(to,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse_copy(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from),</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>to);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="457" refid="namespaceboost_1_1endian_1_1detail_1af703a32968c25880720c2c58979e51d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a7ea37c68200019f8a3f06f3568d2228d" kindref="member">big_reverse_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>from,<sp/>T&amp;<sp/>to)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>ifdef<sp/>BOOST_BIG_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;to),<sp/>from,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse_copy(from,<sp/>from<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;to));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="466" refid="namespaceboost_1_1endian_1_1detail_1a68253296d8369b59b1bdb10dc8bb7471" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a68253296d8369b59b1bdb10dc8bb7471" kindref="member">little_reverse_copy</ref>(T<sp/>from,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>to)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>ifdef<sp/>BOOST_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(to,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse_copy(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from),</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;from)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>to);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="476" refid="namespaceboost_1_1endian_1_1detail_1ac2312532c62f8a40880947b2fd73882d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceboost_1_1endian_1_1detail_1a68253296d8369b59b1bdb10dc8bb7471" kindref="member">little_reverse_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>from,<sp/>T&amp;<sp/>to)<sp/>BOOST_NOEXCEPT</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>ifdef<sp/>BOOST_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;to),<sp/>from,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse_copy(from,<sp/>from<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;to));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOOST_ENDIAN_CONVERSION_HPP</highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/vision_opencv/cv_bridge/src/boost/endian/conversion.hpp"/>
  </compounddef>
</doxygen>
