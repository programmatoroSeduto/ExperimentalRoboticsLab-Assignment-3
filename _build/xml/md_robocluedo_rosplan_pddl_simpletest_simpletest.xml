<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md_robocluedo_rosplan_pddl_simpletest_simpletest" kind="page">
    <compoundname>md_robocluedo_rosplan_pddl_simpletest_simpletest</compoundname>
    <title>Simple Test</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A PDDL2.1 domain to test the ROSplan in a very simple case.</para>
<sect1 id="md_robocluedo_rosplan_pddl_simpletest_simpletest_1autotoc_md516">
<title>First version â€“ very simple</title>
<sect2 id="md_robocluedo_rosplan_pddl_simpletest_simpletest_1autotoc_md517">
<title>Domanin</title>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(define<sp/>(domain<sp/>dom)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:requirements<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:typing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:adl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:durative-actions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:disjunctive-preconditions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:universal-preconditions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:fluents</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:types<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>boolobj</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:predicates</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-not-true<sp/>?b<sp/>-<sp/>boolobj)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>?b<sp/>-<sp/>boolobj)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:functions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>make-true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>?b<sp/>-<sp/>boolobj<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(b-not-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(b-not-true<sp/>?b)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(b-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>make-false</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>?b<sp/>-<sp/>boolobj<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(b-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(b-true<sp/>?b)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(b-not-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_robocluedo_rosplan_pddl_simpletest_simpletest_1autotoc_md518">
<title>Problem</title>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(define<sp/>(problem<sp/>task)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:domain<sp/>dom)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:objects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>b2<sp/>b3<sp/>-<sp/>boolobj</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:init</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-not-true<sp/>b2)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:goal<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b1)<sp/>(not<sp/>(b-not-true<sp/>b1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b2)<sp/>(not<sp/>(b-not-true<sp/>b2))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-not-true<sp/>b3)<sp/>(not<sp/>(b-true<sp/>b3))</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_robocluedo_rosplan_pddl_simpletest_simpletest_1autotoc_md519">
<title>A more sophisticated version of the problem</title>
<sect2 id="md_robocluedo_rosplan_pddl_simpletest_simpletest_1autotoc_md520">
<title>Domain file</title>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(define<sp/>(domain<sp/>dom)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:requirements<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:strips<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:typing<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:equality<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:universal-preconditions<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:fluents</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:durative-actions</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:types<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>boolobj</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:predicates</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-not-true<sp/>?b<sp/>-<sp/>boolobj)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>?b<sp/>-<sp/>boolobj)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(start<sp/>)<sp/>(stop<sp/>)<sp/>(signal-stop<sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:functions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(f-non-zero)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(f-zero)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>set-start</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(at<sp/>start<sp/>(stop<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(stop<sp/>)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(start<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>make-true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(?b<sp/>-<sp/>boolobj)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(b-not-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(start))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(b-not-true<sp/>?b)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(b-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>make-false</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>?b<sp/>-<sp/>boolobj<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(b-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(start))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(b-true<sp/>?b)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(b-not-true<sp/>?b))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>set-signal-stop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(at<sp/>start<sp/>(start<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(signal-stop<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(:durative-action<sp/>set-stop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:parameters<sp/>(<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:duration<sp/>(=<sp/>?duration<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:condition<sp/>(and<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(start<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>start<sp/>(signal-stop<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:effect<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(start<sp/>)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(stop<sp/>))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>end<sp/>(not<sp/>(signal-stop<sp/>)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_robocluedo_rosplan_pddl_simpletest_simpletest_1autotoc_md521">
<title>Problem file</title>
<para><programlisting filename=".lisp"><codeline><highlight class="normal">(define<sp/>(problem<sp/>task)</highlight></codeline>
<codeline><highlight class="normal">(:domain<sp/>dom)</highlight></codeline>
<codeline><highlight class="normal">(:objects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>b2<sp/>b3<sp/>-<sp/>boolobj</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">(:init</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-not-true<sp/>b2)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b3)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(stop)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(=<sp/>(f-non-zero)<sp/>5)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(=<sp/>(f-zero)<sp/>0)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">(:goal<sp/>(and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;;<sp/>(not(b-not-true<sp/>b1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-true<sp/>b2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;;<sp/>(not(b-not-true<sp/>b2))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(b-not-true<sp/>b3)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;;<sp/>(not(b-true<sp/>b3))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(stop)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;;<sp/>(not(start))</highlight></codeline>
<codeline><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
