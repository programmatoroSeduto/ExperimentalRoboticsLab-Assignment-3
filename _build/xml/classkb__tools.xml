<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classkb__tools" kind="class" language="C++" prot="public">
    <compoundname>kb_tools</compoundname>
    <derivedcompoundref refid="classkb__interface" prot="private" virt="non-virtual">kb_interface</derivedcompoundref>
    <includes refid="kb__tools_8h" local="no">kb_tools.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classkb__tools_1a8ace0d8aefb4528d49284a31021d7f2b" prot="protected" static="no" mutable="no">
        <type>ros::NodeHandle</type>
        <definition>ros::NodeHandle kb_tools::nh</definition>
        <argsstring></argsstring>
        <name>nh</name>
        <briefdescription>
<para>node handle reference </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="199" column="17" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkb__tools_1aef928170758f6785ee44daf81c814cc6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool kb_tools::debug_mode</definition>
        <argsstring></argsstring>
        <name>debug_mode</name>
        <briefdescription>
<para>debug mode status, </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classkb__tools_1a8e669891a5a1483f4c40642a17ac3c5a" kindref="member">set_debug_mode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="202" column="6" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="202" bodyend="-1"/>
        <referencedby refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" compoundref="kb__tools_8cpp" startline="38" endline="49">ok</referencedby>
        <referencedby refid="classkb__tools_1a8e669891a5a1483f4c40642a17ac3c5a" compoundref="kb__tools_8cpp" startline="53" endline="61">set_debug_mode</referencedby>
        <referencedby refid="classkb__tools_1afcdd633b556099168c1c97df9923e33d" compoundref="kb__tools_8cpp" startline="69" endline="101">get_predicate</referencedby>
        <referencedby refid="classkb__tools_1a28db234bb29bece4e83b7a27201fa013" compoundref="kb__tools_8cpp" startline="109" endline="141">set_predicate</referencedby>
        <referencedby refid="classkb__tools_1a7fb58239d1af820464b79c37ed7baa54" compoundref="kb__tools_8cpp" startline="145" endline="176">set_goal</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classkb__tools_1a25b2a84da20ed8d1bb6cea6f07ef45f1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool kb_tools::success</definition>
        <argsstring></argsstring>
        <name>success</name>
        <briefdescription>
<para>last action success or not, </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" kindref="member">ok</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="205" column="6" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="205" bodyend="-1"/>
        <referencedby refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" compoundref="kb__tools_8cpp" startline="38" endline="49">ok</referencedby>
        <referencedby refid="classkb__tools_1afcdd633b556099168c1c97df9923e33d" compoundref="kb__tools_8cpp" startline="69" endline="101">get_predicate</referencedby>
        <referencedby refid="classkb__tools_1a28db234bb29bece4e83b7a27201fa013" compoundref="kb__tools_8cpp" startline="109" endline="141">set_predicate</referencedby>
        <referencedby refid="classkb__tools_1a7fb58239d1af820464b79c37ed7baa54" compoundref="kb__tools_8cpp" startline="145" endline="176">set_goal</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classkb__tools_1a390ed9fa0dd2f3040bb9b68b6ddacc64" prot="private" static="no" mutable="no">
        <type>ros::ServiceClient</type>
        <definition>ros::ServiceClient kb_tools::cl_query</definition>
        <argsstring></argsstring>
        <name>cl_query</name>
        <briefdescription>
<para>predicates query client handle </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="267" column="20" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkb__tools_1a5acd0b9499c152a88178d9d440855f3e" prot="private" static="no" mutable="no">
        <type>ros::ServiceClient</type>
        <definition>ros::ServiceClient kb_tools::cl_query_2</definition>
        <argsstring></argsstring>
        <name>cl_query_2</name>
        <briefdescription>
<para>another query client handle </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="270" column="20" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkb__tools_1a43e96579ec72e7c1e69addb92ac32bb9" prot="private" static="no" mutable="no">
        <type>ros::ServiceClient</type>
        <definition>ros::ServiceClient kb_tools::cl_kb_update</definition>
        <argsstring></argsstring>
        <name>cl_kb_update</name>
        <briefdescription>
<para>update clent handle </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="273" column="20" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkb__tools_1a5e11278de7c22d50cd185f21e46f3ccc" prot="private" static="no" mutable="no">
        <type>ros::ServiceClient</type>
        <definition>ros::ServiceClient kb_tools::cl_kb_get_fluent</definition>
        <argsstring></argsstring>
        <name>cl_kb_get_fluent</name>
        <briefdescription>
<para>fluents query client handle </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="276" column="20" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkb__tools_1a785a2d86d2fb4c7ea199527425c2600d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>kb_tools::kb_tools</definition>
        <argsstring>()</argsstring>
        <name>kb_tools</name>
        <briefdescription>
<para>class constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="84" column="1" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="19" bodyend="27"/>
        <references refid="classkb__tools_1a8e669891a5a1483f4c40642a17ac3c5a" compoundref="kb__tools_8cpp" startline="53" endline="61">set_debug_mode</references>
        <references refid="kb__tools_8h_1a35867bb3311de7b885b59b9d27705a5a" compoundref="kb__tools_8h" startline="30">DEBUG_MODE_ENABLED</references>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1a07d99e246e9d60f9c2bdbcd60b626294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>kb_tools::~kb_tools</definition>
        <argsstring>()</argsstring>
        <name>~kb_tools</name>
        <briefdescription>
<para>class destructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="87" column="1" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kb_tools::ok</definition>
        <argsstring>()</argsstring>
        <name>ok</name>
        <briefdescription>
<para>check if the last action succeeded or not </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this function should be called every time you perform a call to any service. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="97" column="6" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="38" bodyend="49"/>
        <references refid="classkb__tools_1aef928170758f6785ee44daf81c814cc6" compoundref="kb__tools_8h" startline="202">debug_mode</references>
        <references refid="classkb__tools_1a25b2a84da20ed8d1bb6cea6f07ef45f1" compoundref="kb__tools_8h" startline="205">success</references>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1a8e669891a5a1483f4c40642a17ac3c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kb_tools::set_debug_mode</definition>
        <argsstring>(bool dbmode)</argsstring>
        <name>set_debug_mode</name>
        <param>
          <type>bool</type>
          <declname>dbmode</declname>
        </param>
        <briefdescription>
<para>set the log verbosity level </para>
        </briefdescription>
        <detaileddescription>
<para>with the debug mode disabled, the class will notify only the opening of the services; otherwise, each method contains a lot of printable messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbmode</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the class will print on the log/shell <emphasis>every operations</emphasis> the system will perform. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="111" column="6" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="53" bodyend="61"/>
        <references refid="classkb__tools_1aef928170758f6785ee44daf81c814cc6" compoundref="kb__tools_8h" startline="202">debug_mode</references>
        <referencedby refid="classkb__tools_1a785a2d86d2fb4c7ea199527425c2600d" compoundref="kb__tools_8cpp" startline="19" endline="27">kb_tools</referencedby>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1afcdd633b556099168c1c97df9923e33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kb_tools::get_predicate</definition>
        <argsstring>(const std::string &amp;pname, std::map&lt; std::string, std::string &gt; params)</argsstring>
        <name>get_predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>get value of a predicate </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the predicate to get</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the map of the parameters of the predicate to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem>
<para><bold>true</bold> if the predicate is true (and the call succeeded) </para>
</listitem>
<listitem>
<para><bold>false</bold> if the predicate is false OR if the service call failed, see <ref refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" kindref="member">ok</ref></para>
<para></para>
</listitem>
</itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>the boolean &apos;false&apos; is returned also when the call fails, so remember to check the valdity of the value using <ref refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" kindref="member">ok</ref></para>
</simplesect>
<xrefsect id="todo_1_todo000037"><xreftitle>Todo</xreftitle><xrefdescription><para>the method assumes that only one result is returned, which is true for fully defined queries, but what about partial queries?</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="139" column="6" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="69" bodyend="101"/>
        <references refid="classkb__tools_1a1b5b559fba6923f0e73b426a0144c5a7" compoundref="kb__tools_8cpp" startline="184" endline="206">request_query</references>
        <references refid="classkb__tools_1aef928170758f6785ee44daf81c814cc6" compoundref="kb__tools_8h" startline="202">debug_mode</references>
        <references refid="kb__tools_8h_1a14480e81381e195709ebd903dedd6c60" compoundref="kb__tools_8h" startline="35">SERVICE_QUERY</references>
        <references refid="classkb__tools_1a25b2a84da20ed8d1bb6cea6f07ef45f1" compoundref="kb__tools_8h" startline="205">success</references>
        <referencedby refid="classkb__interface_1a339f9f7ba3d53f3f8e1143d6dbb6148b" compoundref="kb__interface_8cpp" startline="204" endline="255">kb_interface::cbk_replan</referencedby>
        <referencedby refid="classkb__interface_1a974022d8c24dc668a7a4563ec9dfdc18" compoundref="kb__interface_8cpp" startline="290" endline="371">kb_interface::cbk_update_goal</referencedby>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1a28db234bb29bece4e83b7a27201fa013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kb_tools::set_predicate</definition>
        <argsstring>(const std::string &amp;pname, std::map&lt; std::string, std::string &gt; params, bool pvalue)</argsstring>
        <name>set_predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pvalue</declname>
        </param>
        <briefdescription>
<para>set the truth value of a predicate </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the predicate to get</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the map of the parameters of the predicate to check</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>the boolean value to set for that predicate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(bool) <bold>true</bold> if the operation has gone well, <bold>false</bold> otherwise.</para>
</simplesect>
<simplesect kind="note"><para>no need here to check the success of the call using ok: the return value is sufficient to understand what&apos;s going on. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="166" column="6" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="109" bodyend="141"/>
        <references refid="classkb__tools_1a2687b3d61e2e8abe4469ed3011c75320" compoundref="kb__tools_8cpp" startline="210" endline="235">request_update</references>
        <references refid="classkb__tools_1aef928170758f6785ee44daf81c814cc6" compoundref="kb__tools_8h" startline="202">debug_mode</references>
        <references refid="kb__tools_8h_1ac9ef9cc1af3aeeacaf4b06f1b54ece3a" compoundref="kb__tools_8h" startline="43">SERVICE_KB_UPDATE</references>
        <references refid="classkb__tools_1a25b2a84da20ed8d1bb6cea6f07ef45f1" compoundref="kb__tools_8h" startline="205">success</references>
        <referencedby refid="classkb__interface_1a339f9f7ba3d53f3f8e1143d6dbb6148b" compoundref="kb__interface_8cpp" startline="204" endline="255">kb_interface::cbk_replan</referencedby>
        <referencedby refid="classkb__interface_1a974022d8c24dc668a7a4563ec9dfdc18" compoundref="kb__interface_8cpp" startline="290" endline="371">kb_interface::cbk_update_goal</referencedby>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1a7fb58239d1af820464b79c37ed7baa54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kb_tools::set_goal</definition>
        <argsstring>(const std::string &amp;pname, std::map&lt; std::string, std::string &gt; params, bool pvalue)</argsstring>
        <name>set_goal</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pvalue</declname>
        </param>
        <briefdescription>
<para>set the truth value of a goal predicate </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the goal predicate to get</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the map of the parameters of the goal predicate to check</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>the boolean value to set for that goal predicate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(bool) <bold>true</bold> if the operation has gone well, <bold>false</bold> otherwise.</para>
</simplesect>
<simplesect kind="note"><para>no need here to check the success of the call using ok: the return value is sufficient to understand what&apos;s going on. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="189" column="6" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="145" bodyend="176"/>
        <references refid="classkb__tools_1a2687b3d61e2e8abe4469ed3011c75320" compoundref="kb__tools_8cpp" startline="210" endline="235">request_update</references>
        <references refid="classkb__tools_1aef928170758f6785ee44daf81c814cc6" compoundref="kb__tools_8h" startline="202">debug_mode</references>
        <references refid="kb__tools_8h_1ac9ef9cc1af3aeeacaf4b06f1b54ece3a" compoundref="kb__tools_8h" startline="43">SERVICE_KB_UPDATE</references>
        <references refid="classkb__tools_1a25b2a84da20ed8d1bb6cea6f07ef45f1" compoundref="kb__tools_8h" startline="205">success</references>
        <referencedby refid="classkb__interface_1a974022d8c24dc668a7a4563ec9dfdc18" compoundref="kb__interface_8cpp" startline="290" endline="371">kb_interface::cbk_update_goal</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classkb__tools_1a1b5b559fba6923f0e73b426a0144c5a7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>rosplan_knowledge_msgs::KnowledgeQueryService</type>
        <definition>rosplan_knowledge_msgs::KnowledgeQueryService kb_tools::request_query</definition>
        <argsstring>(const std::string &amp;pname, std::map&lt; std::string, std::string &gt; &amp;params)</argsstring>
        <name>request_query</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>build a query message (predicates only) </para>
        </briefdescription>
        <detaileddescription>
<para>the method returns a message ready for a simple predicate query. just give the name of the predicate you&apos;re searching, and its parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>(string) the name of the predicate</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::map&lt;std::string, std::string&gt;&amp;) the map of parameters for the predicate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of the message <emphasis>rosplan_knowledge_msgs::KnowledgeQueryService</emphasis>, with the <emphasis>.request</emphasis> field ready for the service request. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="224" column="47" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="184" bodyend="206"/>
        <references refid="kb__tools_8h_1a4fe1e5d1ed4ba3fd4237490006e06dd2" compoundref="kb__tools_8h" startline="60">KB_KTYPE_PREDICATE</references>
        <referencedby refid="classkb__tools_1afcdd633b556099168c1c97df9923e33d" compoundref="kb__tools_8cpp" startline="69" endline="101">get_predicate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1a2687b3d61e2e8abe4469ed3011c75320" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>rosplan_knowledge_msgs::KnowledgeUpdateService</type>
        <definition>rosplan_knowledge_msgs::KnowledgeUpdateService kb_tools::request_update</definition>
        <argsstring>(const std::string pname, std::map&lt; std::string, std::string &gt; &amp;params, bool value, bool is_goal=false)</argsstring>
        <name>request_update</name>
        <param>
          <type>const std::string</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_goal</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>build a update message for predicates </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>(string) the name of the predicate</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::map&lt;std::string, std::string&gt;&amp;) the map of parameters for the predicate</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) the new value of the predicate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of the message <emphasis>rosplan_knowledge_msgs::KnowledgeUpdateService</emphasis>, with the <emphasis>.request</emphasis> field ready for the service request. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="243" column="48" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="210" bodyend="235"/>
        <references refid="kb__tools_8h_1ae383a0070aad6f5b5ff2e0e8ecc57980" compoundref="kb__tools_8h" startline="53">KB_ADD_KNOWLEDGE</references>
        <references refid="kb__tools_8h_1a3fc8fe8eaf6f19d6e73eb762b5608590" compoundref="kb__tools_8h" startline="54">KB_DEL_KNOWLEDGE</references>
        <references refid="kb__tools_8h_1acf652202a3134c42f03042569520a219" compoundref="kb__tools_8h" startline="55">KB_ADD_GOAL</references>
        <references refid="kb__tools_8h_1a74bc32467d212c3b7b1af62e36e6174a" compoundref="kb__tools_8h" startline="56">KB_DEL_GOAL</references>
        <references refid="kb__tools_8h_1a4fe1e5d1ed4ba3fd4237490006e06dd2" compoundref="kb__tools_8h" startline="60">KB_KTYPE_PREDICATE</references>
        <referencedby refid="classkb__tools_1a28db234bb29bece4e83b7a27201fa013" compoundref="kb__tools_8cpp" startline="109" endline="141">set_predicate</referencedby>
        <referencedby refid="classkb__tools_1a7fb58239d1af820464b79c37ed7baa54" compoundref="kb__tools_8cpp" startline="145" endline="176">set_goal</referencedby>
      </memberdef>
      <memberdef kind="function" id="classkb__tools_1ac39559c5414b4254d13d61fca5c3f6a5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt; std::string, std::string &gt; kb_tools::keyvalue2map</definition>
        <argsstring>(const std::vector&lt; diagnostic_msgs::KeyValue &gt; &amp;kv)</argsstring>
        <name>keyvalue2map</name>
        <param>
          <type>const std::vector&lt; diagnostic_msgs::KeyValue &gt; &amp;</type>
          <declname>kv</declname>
        </param>
        <briefdescription>
<para>cast a KeyValue message into a simple map </para>
        </briefdescription>
        <detaileddescription>
<para>this function is often useful, since the messages of the knowledge base use a lot the message type diagnostic_msgs::KeyValue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kv</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of messages diagnostic_msgs::KeyValue</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a map from that vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="261" column="10" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classkb__tools_1a72c124c0a09d80f93d43a015d1d26d0e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kb_tools::open_services</definition>
        <argsstring>()</argsstring>
        <name>open_services</name>
        <briefdescription>
<para>open the services with the knowledge base </para>
        </briefdescription>
        <detaileddescription>
<para>here is the list of the services opened by this function: <itemizedlist>
<listitem>
<para><ref refid="kb__tools_8h_1a14480e81381e195709ebd903dedd6c60" kindref="member">SERVICE_QUERY</ref> : rosplan_knowledge_msgs::KnowledgeQueryService&gt;  </para>
</listitem>
<listitem>
<para><ref refid="kb__tools_8h_1ac9ef9cc1af3aeeacaf4b06f1b54ece3a" kindref="member">SERVICE_KB_UPDATE</ref> : rosplan_knowledge_msgs::KnowledgeUpdateService  </para>
</listitem>
<listitem>
<para>??? : ???  </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="290" column="6" bodyfile="robocluedo_rosplan/src/knowledge_base_tools/kb_tools.cpp" bodystart="256" bodyend="282"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>base interface with the ROS plan knowledge base </para>
    </briefdescription>
    <detaileddescription>
<para>this interface can be considered a abstraction of the ROS plan knowledge base. the knowledge base is seen as a database containing predicates and fluents, which can be obtaine by GET methods, and set using SET methods.</para>
<para>Moreover, the class opens and manages all the services needed to perform such communication with the database, hence the node using this kind of functonality doesn&apos;t need to manually open the required interfaces. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>kb_tools</label>
        <link refid="classkb__tools"/>
      </node>
      <node id="2">
        <label>kb_interface</label>
        <link refid="classkb__interface"/>
        <childnode refid="1" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" line="80" column="1" bodyfile="robocluedo_rosplan/include/knowledge_base_tools/kb_tools.h" bodystart="79" bodyend="292"/>
    <listofallmembers>
      <member refid="classkb__tools_1a5e11278de7c22d50cd185f21e46f3ccc" prot="private" virt="non-virtual"><scope>kb_tools</scope><name>cl_kb_get_fluent</name></member>
      <member refid="classkb__tools_1a43e96579ec72e7c1e69addb92ac32bb9" prot="private" virt="non-virtual"><scope>kb_tools</scope><name>cl_kb_update</name></member>
      <member refid="classkb__tools_1a390ed9fa0dd2f3040bb9b68b6ddacc64" prot="private" virt="non-virtual"><scope>kb_tools</scope><name>cl_query</name></member>
      <member refid="classkb__tools_1a5acd0b9499c152a88178d9d440855f3e" prot="private" virt="non-virtual"><scope>kb_tools</scope><name>cl_query_2</name></member>
      <member refid="classkb__tools_1aef928170758f6785ee44daf81c814cc6" prot="protected" virt="non-virtual"><scope>kb_tools</scope><name>debug_mode</name></member>
      <member refid="classkb__tools_1afcdd633b556099168c1c97df9923e33d" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>get_predicate</name></member>
      <member refid="classkb__tools_1a785a2d86d2fb4c7ea199527425c2600d" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>kb_tools</name></member>
      <member refid="classkb__tools_1ac39559c5414b4254d13d61fca5c3f6a5" prot="protected" virt="non-virtual"><scope>kb_tools</scope><name>keyvalue2map</name></member>
      <member refid="classkb__tools_1a8ace0d8aefb4528d49284a31021d7f2b" prot="protected" virt="non-virtual"><scope>kb_tools</scope><name>nh</name></member>
      <member refid="classkb__tools_1a84232df0b5e76bad833c8f617abccf30" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>ok</name></member>
      <member refid="classkb__tools_1a72c124c0a09d80f93d43a015d1d26d0e" prot="private" virt="non-virtual"><scope>kb_tools</scope><name>open_services</name></member>
      <member refid="classkb__tools_1a1b5b559fba6923f0e73b426a0144c5a7" prot="protected" virt="non-virtual"><scope>kb_tools</scope><name>request_query</name></member>
      <member refid="classkb__tools_1a2687b3d61e2e8abe4469ed3011c75320" prot="protected" virt="non-virtual"><scope>kb_tools</scope><name>request_update</name></member>
      <member refid="classkb__tools_1a8e669891a5a1483f4c40642a17ac3c5a" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>set_debug_mode</name></member>
      <member refid="classkb__tools_1a7fb58239d1af820464b79c37ed7baa54" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>set_goal</name></member>
      <member refid="classkb__tools_1a28db234bb29bece4e83b7a27201fa013" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>set_predicate</name></member>
      <member refid="classkb__tools_1a25b2a84da20ed8d1bb6cea6f07ef45f1" prot="protected" virt="non-virtual"><scope>kb_tools</scope><name>success</name></member>
      <member refid="classkb__tools_1a07d99e246e9d60f9c2bdbcd60b626294" prot="public" virt="non-virtual"><scope>kb_tools</scope><name>~kb_tools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
