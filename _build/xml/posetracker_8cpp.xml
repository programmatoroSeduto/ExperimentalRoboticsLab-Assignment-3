<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="posetracker_8cpp" kind="file" language="C++">
    <compoundname>posetracker.cpp</compoundname>
    <includes refid="posetracker_8h" local="yes">posetracker.h</includes>
    <includes refid="ippe_8h" local="yes">ippe.h</includes>
    <includes local="no">set</includes>
    <includes refid="levmarq_8h" local="yes">levmarq.h</includes>
    <includes local="no">opencv2/calib3d.hpp</includes>
    <incdepgraph>
      <node id="24">
        <label>iomanip</label>
      </node>
      <node id="19">
        <label>functional</label>
      </node>
      <node id="12">
        <label>markermap.h</label>
        <link refid="markermap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Eigen/Cholesky</label>
      </node>
      <node id="14">
        <label>ippe.h</label>
        <link refid="ippe_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>stdexcept</label>
      </node>
      <node id="17">
        <label>Eigen/Core</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="16">
        <label>levmarq.h</label>
        <link refid="levmarq_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="25">
        <label>opencv2/calib3d.hpp</label>
      </node>
      <node id="2">
        <label>posetracker.h</label>
        <link refid="posetracker_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>aruco_export.h</label>
        <link refid="aruco__export_8h"/>
      </node>
      <node id="4">
        <label>cameraparameters.h</label>
        <link refid="cameraparameters_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ctime</label>
      </node>
      <node id="5">
        <label>opencv2/core.hpp</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="8">
        <label>marker.h</label>
        <link refid="marker_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp</label>
        <link refid="posetracker_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>chrono</label>
      </node>
      <node id="15">
        <label>set</label>
      </node>
      <node id="22">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacearuco">aruco</innernamespace>
    <innernamespace refid="namespacearuco_1_1aruco__private">aruco::aruco_private</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="29"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="posetracker_8h" kindref="compound">posetracker.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ippe_8h" kindref="compound">ippe.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="levmarq_8h" kindref="compound">levmarq.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/calib3d.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearuco" kindref="compound">aruco</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespacearuco_1_1aruco__private" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">aruco_private</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespacearuco_1_1aruco__private_1ad99ffa19151b36b7e5d3984429019c2e" refkind="member"><highlight class="normal">cv::Mat<sp/><ref refid="namespacearuco_1_1aruco__private_1ad99ffa19151b36b7e5d3984429019c2e" kindref="member">impl__aruco_getRTMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>_rvec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>_tvec)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>assert(_rvec.type()<sp/>==<sp/>CV_32F<sp/>&amp;&amp;<sp/>_rvec.total()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert(_tvec.type()<sp/>==<sp/>CV_32F<sp/>&amp;&amp;<sp/>_tvec.total()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Matrix(4,<sp/>4,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*rt_44<sp/>=<sp/>Matrix.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>makes<sp/>a<sp/>fast<sp/>conversion<sp/>to<sp/>the<sp/>4x4<sp/>array<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rx<sp/>=<sp/>_rvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[0];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ry<sp/>=<sp/>_rvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[1];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rz<sp/>=<sp/>_rvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[2];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tx<sp/>=<sp/>_tvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[0];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ty<sp/>=<sp/>_tvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[1];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tz<sp/>=<sp/>_tvec.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[2];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>nsqa<sp/>=<sp/>rx<sp/>*<sp/>rx<sp/>+<sp/>ry<sp/>*<sp/>ry<sp/>+<sp/>rz<sp/>*<sp/>rz;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>std::sqrt(nsqa);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>i_a<sp/>=<sp/>a<sp/>?<sp/>1.<sp/>/<sp/>a<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rnx<sp/>=<sp/>rx<sp/>*<sp/>i_a;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rny<sp/>=<sp/>ry<sp/>*<sp/>i_a;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rnz<sp/>=<sp/>rz<sp/>*<sp/>i_a;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cos_a<sp/>=<sp/>cos(a);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sin_a<sp/>=<sp/>sin(a);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_1_cos_a<sp/>=<sp/>1.<sp/>-<sp/>cos_a;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>rt_44[0]<sp/>=<sp/>cos_a<sp/>+<sp/>rnx<sp/>*<sp/>rnx<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>rt_44[1]<sp/>=<sp/>rnx<sp/>*<sp/>rny<sp/>*<sp/>_1_cos_a<sp/>-<sp/>rnz<sp/>*<sp/>sin_a;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>rt_44[2]<sp/>=<sp/>rny<sp/>*<sp/>sin_a<sp/>+<sp/>rnx<sp/>*<sp/>rnz<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>rt_44[3]<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>rt_44[4]<sp/>=<sp/>rnz<sp/>*<sp/>sin_a<sp/>+<sp/>rnx<sp/>*<sp/>rny<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>rt_44[5]<sp/>=<sp/>cos_a<sp/>+<sp/>rny<sp/>*<sp/>rny<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>rt_44[6]<sp/>=<sp/>-rnx<sp/>*<sp/>sin_a<sp/>+<sp/>rny<sp/>*<sp/>rnz<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>rt_44[7]<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>rt_44[8]<sp/>=<sp/>-rny<sp/>*<sp/>sin_a<sp/>+<sp/>rnx<sp/>*<sp/>rnz<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>rt_44[9]<sp/>=<sp/>rnx<sp/>*<sp/>sin_a<sp/>+<sp/>rny<sp/>*<sp/>rnz<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>rt_44[10]<sp/>=<sp/>cos_a<sp/>+<sp/>rnz<sp/>*<sp/>rnz<sp/>*<sp/>_1_cos_a;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>rt_44[11]<sp/>=<sp/>tz;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>rt_44[12]<sp/>=<sp/>rt_44[13]<sp/>=<sp/>rt_44[14]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>rt_44[15]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matrix;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="namespacearuco_1_1aruco__private_1ae3d3e913cfca024f2bb948b44496fa1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1_1aruco__private_1ae3d3e913cfca024f2bb948b44496fa1d" kindref="member">impl__aruco_getRTfromMatrix44</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>M,<sp/>cv::Mat&amp;<sp/>R,<sp/>cv::Mat&amp;<sp/>T)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>assert(M.cols<sp/>==<sp/>M.rows<sp/>&amp;&amp;<sp/>M.cols<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>assert(M.type()<sp/>==<sp/>CV_32F<sp/>||<sp/>M.type()<sp/>==<sp/>CV_64F);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>the<sp/>rotation<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>r33<sp/>=<sp/>cv::Mat(M,<sp/>cv::Rect(0,<sp/>0,<sp/>3,<sp/>3));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>cv::SVD<sp/>svd(r33);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Rpure<sp/>=<sp/>svd.u<sp/>*<sp/>svd.vt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>cv::Rodrigues(Rpure,<sp/>R);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>T.create(1,<sp/>3,<sp/>M.type());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M.type()<sp/>==<sp/>CV_32F)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i]<sp/>=<sp/>M.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>3);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T.ptr&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0)[i]<sp/>=<sp/>M.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(i,<sp/>3);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="namespacearuco_1_1aruco__private_1a321d43080bd7449ae0d8448b9bbdd4c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1_1aruco__private_1a321d43080bd7449ae0d8448b9bbdd4c3" kindref="member">reprj_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point3f&gt;<sp/>&amp;objPoints,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point2f&gt;<sp/>points2d,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_camera_parameters" kindref="compound">CameraParameters</ref><sp/>&amp;imp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>&amp;rt44)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Point2f&gt;<sp/>prepj;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>rv,<sp/>tv;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="namespacearuco_1_1aruco__private_1ae3d3e913cfca024f2bb948b44496fa1d" kindref="member">impl__aruco_getRTfromMatrix44</ref>(rt44,<sp/>rv,<sp/>tv);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>cv::projectPoints(objPoints,<sp/>rv,<sp/>tv,<sp/>imp.<ref refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" kindref="member">CameraMatrix</ref>,<sp/>imp.<ref refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" kindref="member">Distorsion</ref>,<sp/>prepj);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvalid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>prepj.size();<sp/>i++)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isnan(objPoints[i].<ref refid="namespacebug__m_1af10f89c7f929c9babce108f5d7382996" kindref="member">x</ref>))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>cv::norm(points2d[i]<sp/>-<sp/>prepj[i]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nvalid++;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>/<sp/>double(nvalid);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="namespacearuco_1_1aruco__private_1aeb25dcbda31030c3dd21e248324ff981" refkind="member"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1_1aruco__private_1aeb25dcbda31030c3dd21e248324ff981" kindref="member">rigidBodyTransformation_Horn1987</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point3f&gt;&amp;<sp/>POrg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point3f&gt;&amp;<sp/>PDst,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat&amp;<sp/>RT_4x4)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Quaternion</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>Quaternion(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q3)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q[0]<sp/>=<sp/>q0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q[1]<sp/>=<sp/>q1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q[2]<sp/>=<sp/>q2;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q[3]<sp/>=<sp/>q3;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>getRotation()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="138"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>R(3,<sp/>3,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)<sp/>=<sp/>q[0]<sp/>*<sp/>q[0]<sp/>+<sp/>q[1]<sp/>*<sp/>q[1]<sp/>-<sp/>q[2]<sp/>*<sp/>q[2]<sp/>-<sp/>q[3]<sp/>*<sp/>q[3];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>1)<sp/>=<sp/>2.f<sp/>*<sp/>(q[1]<sp/>*<sp/>q[2]<sp/>-<sp/>q[0]<sp/>*<sp/>q[3]);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>2)<sp/>=<sp/>2.f<sp/>*<sp/>(q[1]<sp/>*<sp/>q[3]<sp/>+<sp/>q[0]<sp/>*<sp/>q[2]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>0)<sp/>=<sp/>2.f<sp/>*<sp/>(q[1]<sp/>*<sp/>q[2]<sp/>+<sp/>q[0]<sp/>*<sp/>q[3]);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>1)<sp/>=<sp/>q[0]<sp/>*<sp/>q[0]<sp/>+<sp/>q[2]<sp/>*<sp/>q[2]<sp/>-<sp/>q[1]<sp/>*<sp/>q[1]<sp/>-<sp/>q[3]<sp/>*<sp/>q[3];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>2)<sp/>=<sp/>2.f<sp/>*<sp/>(q[2]<sp/>*<sp/>q[3]<sp/>-<sp/>q[0]<sp/>*<sp/>q[1]);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>0)<sp/>=<sp/>2.f<sp/>*<sp/>(q[1]<sp/>*<sp/>q[3]<sp/>-<sp/>q[0]<sp/>*<sp/>q[2]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>1)<sp/>=<sp/>2.f<sp/>*<sp/>(q[2]<sp/>*<sp/>q[3]<sp/>+<sp/>q[0]<sp/>*<sp/>q[1]);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>2)<sp/>=<sp/>q[0]<sp/>*<sp/>q[0]<sp/>+<sp/>q[3]<sp/>*<sp/>q[3]<sp/>-<sp/>q[1]<sp/>*<sp/>q[1]<sp/>-<sp/>q[2]<sp/>*<sp/>q[2];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q[4];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>assert(POrg.size()<sp/>==<sp/>PDst.size());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>_org(POrg.size(),<sp/>3,<sp/>CV_32F,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;POrg[0]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>_dst(PDst.size(),<sp/>3,<sp/>CV_32F,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;PDst[0]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>_org<sp/>=<sp/>_org.reshape(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>_dst<sp/>=<sp/>_dst.reshape(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Mu_s<sp/>=<sp/>cv::Mat::zeros(1,<sp/>3,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Mu_m<sp/>=<sp/>cv::Mat::zeros(1,<sp/>3,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>_s<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>_m<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>means</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_org.rows;<sp/>i++)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Mu_s<sp/>+=<sp/>_org(cv::Range(i,<sp/>i<sp/>+<sp/>1),<sp/>cv::Range(0,<sp/>3));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Mu_m<sp/>+=<sp/>_dst(cv::Range(i,<sp/>i<sp/>+<sp/>1),<sp/>cv::Range(0,<sp/>3));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>divide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>Mu_s.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i]<sp/>/=<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(_org.rows);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>Mu_m.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i]<sp/>/=<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(_dst.rows);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Mu_s<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>Mu_s<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Mu_m<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>Mu_m<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Mu_st<sp/>=<sp/>Mu_s.t()<sp/>*<sp/>Mu_m;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Mu_st<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>Mu_st<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Var_sm<sp/>=<sp/>cv::Mat::zeros(3,<sp/>3,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_org.rows;<sp/>i++)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Var_sm<sp/>+=<sp/>(_org(cv::Range(i,<sp/>i<sp/>+<sp/>1),<sp/>cv::Range(0,<sp/>3)).t()<sp/>*<sp/>_dst(cv::Range(i,<sp/>i<sp/>+<sp/>1),<sp/>cv::Range(0,<sp/>3)))<sp/>-<sp/>Mu_st;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Var_sm=&quot;<sp/>&lt;&lt;<sp/>Var_sm<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Var_sm.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>j)<sp/>/=<sp/>float(_org.rows);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Var_sm<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>Var_sm<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>AA<sp/>=<sp/>Var_sm<sp/>-<sp/>Var_sm.t();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;AA<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>AA<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>A(3,<sp/>1,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>A.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)<sp/>=<sp/>AA.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>A.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>0)<sp/>=<sp/>AA.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>A.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(2,<sp/>0)<sp/>=<sp/>AA.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>1);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;A<sp/>=&quot;<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Q_Var_sm(4,<sp/>4,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>Q_Var_sm.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(trace(Var_sm)[0]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_Var_sm.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>i)<sp/>=<sp/>A.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_Var_sm.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>=<sp/>A.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>q33<sp/>=<sp/>Var_sm<sp/>+<sp/>Var_sm.t()<sp/>-<sp/>(trace(Var_sm)[0]<sp/>*<sp/>cv::Mat::eye(3,<sp/>3,<sp/>CV_32F));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Q33<sp/>=<sp/>Q_Var_sm(cv::Range(1,<sp/>4),<sp/>cv::Range(1,<sp/>4));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>q33.copyTo(Q33);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Q_Var_sm&quot;<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>Q_Var_sm<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>eigenvalues,<sp/>eigenvectors;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>eigen(Q_Var_sm,<sp/>eigenvalues,<sp/>eigenvectors);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;EEI<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>eigenvalues<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;V<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>(eigenvectors.type()<sp/>==<sp/>CV_32F)<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>eigenvectors<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>Quaternion<sp/>rot(eigenvectors.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0),<sp/>eigenvectors.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>1),<sp/>eigenvectors.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>2),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenvectors.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>3));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>RR<sp/>=<sp/>rot.getRotation();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;RESULT<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>RR<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>T<sp/>=<sp/>Mu_m.t()<sp/>-<sp/>RR<sp/>*<sp/>Mu_s.t();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;T<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>T<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>RT_4x4<sp/>=<sp/>cv::Mat::eye(4,<sp/>4,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>r33<sp/>=<sp/>RT_4x4(cv::Range(0,<sp/>3),<sp/>cv::Range(0,<sp/>3));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>RR.copyTo(r33);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>RT_4x4.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>3)<sp/>=<sp/>T.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i];</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;RESS<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>RT<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>average<sp/>transform<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>matrix<sp/>=<sp/>RT_4x4.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>POrg.size();<sp/>i++)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point3f<sp/>org<sp/>=<sp/>POrg[i];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point3f<sp/>dest_est;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_est.x<sp/>=<sp/>matrix[0]<sp/>*<sp/>org.x<sp/>+<sp/>matrix[1]<sp/>*<sp/>org.y<sp/>+<sp/>matrix[2]<sp/>*<sp/>org.z<sp/>+<sp/>matrix[3];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_est.y<sp/>=<sp/>matrix[4]<sp/>*<sp/>org.x<sp/>+<sp/>matrix[5]<sp/>*<sp/>org.y<sp/>+<sp/>matrix[6]<sp/>*<sp/>org.z<sp/>+<sp/>matrix[7];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_est.z<sp/>=<sp/>matrix[8]<sp/>*<sp/>org.x<sp/>+<sp/>matrix[9]<sp/>*<sp/>org.y<sp/>+<sp/>matrix[10]<sp/>*<sp/>org.z<sp/>+<sp/>matrix[11];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point3f<sp/>dest_real<sp/>=<sp/>PDst[i];</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cv::norm(dest_est<sp/>-<sp/>dest_real));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err<sp/>/<sp/>float(POrg.size());;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>aruco_private</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="namespacearuco_1ad7304e2d05b6357cf4d6b52af12b430c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1ad7304e2d05b6357cf4d6b52af12b430c" kindref="member">hubber</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_delta)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dsqr<sp/>=<sp/>_delta<sp/>*<sp/>_delta;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&lt;=<sp/>dsqr)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sqrte<sp/>=<sp/>sqrt(e);<sp/></highlight><highlight class="comment">//<sp/>absolute<sp/>value<sp/>of<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>sqrte<sp/>*<sp/>_delta<sp/>-<sp/>dsqr;<sp/></highlight><highlight class="comment">//<sp/>rho(e)<sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>delta<sp/>*<sp/>e^(1/2)<sp/>-<sp/>delta^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="namespacearuco_1ad2f9415a52ce3017fd1c46faec6fae58" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1ad2f9415a52ce3017fd1c46faec6fae58" kindref="member">hubberMono</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&lt;=<sp/>5.991)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4.895303872<sp/>*<sp/>sqrt(e)<sp/>-<sp/>5.991;<sp/></highlight><highlight class="comment">//<sp/>rho(e)<sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>delta<sp/>*<sp/>e^(1/2)<sp/>-<sp/>delta^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="namespacearuco_1acc51a603e2a95802d9958821317d4fc1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1acc51a603e2a95802d9958821317d4fc1" kindref="member">getHubberMonoWeight</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SqErr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Information)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(<ref refid="namespacearuco_1ad2f9415a52ce3017fd1c46faec6fae58" kindref="member">hubberMono</ref>(Information<sp/>*<sp/>SqErr)<sp/>/<sp/>SqErr);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="285" refid="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" kindref="member">__aruco_solve_pnp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point3f&gt;&amp;<sp/>p3d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point2f&gt;&amp;<sp/>p2d,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>cam_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>dist,<sp/>cv::Mat&amp;<sp/>r_io,<sp/>cv::Mat&amp;<sp/>t_io)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>assert(r_io.type()<sp/>==<sp/>CV_32F);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>assert(t_io.type()<sp/>==<sp/>CV_32F);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>assert(t_io.total()<sp/>==<sp/>r_io.total());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>assert(t_io.total()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toSol<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>t)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_lev_marq_1a747c31d8687661c91ef882e8b7d075c8" kindref="member">LevMarq&lt;T&gt;::eVector</ref><sp/>sol(6);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sol(i)<sp/>=<sp/>r.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sol(i<sp/>+<sp/>3)<sp/>=<sp/>t.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sol;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fromSol<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_lev_marq_1a747c31d8687661c91ef882e8b7d075c8" kindref="member">LevMarq&lt;T&gt;::eVector</ref>&amp;<sp/>sol,<sp/>cv::Mat&amp;<sp/>r,<sp/>cv::Mat&amp;<sp/>t)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>r.create(1,<sp/>3,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>t.create(1,<sp/>3,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i]<sp/>=<sp/>sol(i);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t.ptr&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0)[i]<sp/>=<sp/>sol(i<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>Jacb;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_f<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_lev_marq_1a747c31d8687661c91ef882e8b7d075c8" kindref="member">LevMarq&lt;T&gt;::eVector</ref>&amp;<sp/>sol,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_lev_marq_1a747c31d8687661c91ef882e8b7d075c8" kindref="member">LevMarq&lt;T&gt;::eVector</ref>&amp;<sp/>err)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cv::Point2f&gt;<sp/>p2d_rej;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>r,<sp/>t;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fromSol(sol,<sp/>r,<sp/>t);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::projectPoints(p3d,<sp/>r,<sp/>t,<sp/>cam_matrix,<sp/>dist,<sp/>p2d_rej,<sp/>Jacb);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>err.resize(p3d.size()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>p3d.size();<sp/>i++)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point2f<sp/>errP=p2d_rej[i]<sp/>-p2d[i];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SqErr=(errP.x*errP.x+<sp/>errP.y*errP.y);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>robuse_weight=<sp/><ref refid="namespacearuco_1acc51a603e2a95802d9958821317d4fc1" kindref="member">getHubberMonoWeight</ref>(SqErr,1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(err_idx++)<sp/>=<sp/>robuse_weight*<sp/>errP.x;<sp/></highlight><highlight class="comment">//<sp/>p2d_rej[i].x<sp/>-<sp/>p2d[i].x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(err_idx++)<sp/>=<sp/>robuse_weight*<sp/>errP.y;<sp/></highlight><highlight class="comment">//<sp/>p2d_rej[i].y<sp/>-<sp/>p2d[i].y;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>jac_f<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_lev_marq_1a747c31d8687661c91ef882e8b7d075c8" kindref="member">LevMarq&lt;T&gt;::eVector</ref>&amp;<sp/>sol,<sp/>Eigen::Matrix&lt;T,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;&amp;<sp/>J)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(sol);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>J.resize(p3d.size()<sp/>*<sp/>2,<sp/>6);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>p3d.size()<sp/>*<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>jacb<sp/>=<sp/>Jacb.ptr&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(i);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>6;<sp/>j++)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>J(i,<sp/>j)<sp/>=<sp/>jacb[j];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="classaruco_1_1_lev_marq" kindref="compound">LevMarq&lt;T&gt;</ref><sp/>solver;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>solver.<ref refid="classaruco_1_1_lev_marq_1a7b5b41aa09da3fcd3cd0c5f3eec62c43" kindref="member">setParams</ref>(100,<sp/>0.01,<sp/>0.01);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>solver.verbose()<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_lev_marq_1a747c31d8687661c91ef882e8b7d075c8" kindref="member">LevMarq&lt;T&gt;::eVector</ref><sp/>sol<sp/>=<sp/>toSol(r_io,<sp/>t_io);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>solver.<ref refid="classaruco_1_1_lev_marq_1a28534e8cd28e3ec8ad36201082a9a891" kindref="member">solve</ref>(sol,<sp/>err_f,<sp/>jac_f);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>fromSol(sol,<sp/>r_io,<sp/>t_io);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" kindref="member">__aruco_solve_pnp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point3f&gt;&amp;<sp/>p3d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cv::Point2f&gt;&amp;<sp/>p2d,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>cam_matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat&amp;<sp/>dist,<sp/>cv::Mat&amp;<sp/>r_io,<sp/>cv::Mat&amp;<sp/>t_io)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOUBLE_PRECISION_PNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__aruco_solve_pnp&lt;double&gt;(p3d,<sp/>p2d,<sp/>cam_matrix,<sp/>dist,<sp/>r_io,<sp/>t_io);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__aruco_solve_pnp&lt;float&gt;(p3d,<sp/>p2d,<sp/>cam_matrix,<sp/>dist,<sp/>r_io,<sp/>t_io);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="classaruco_1_1_marker_pose_tracker_1a8eeb8ba3c29a89c7c9c20e33197b59a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_pose_tracker_1a8eeb8ba3c29a89c7c9c20e33197b59a7" kindref="member">MarkerPoseTracker::estimatePose</ref>(<ref refid="classaruco_1_1_marker" kindref="compound">Marker</ref>&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_camera_parameters" kindref="compound">CameraParameters</ref>&amp;<sp/>_cam_params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_msize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minerrorRatio)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rvec.empty())</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>previous<sp/>data,<sp/>use<sp/>from<sp/>scratch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>rv,<sp/>tv;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>solutions<sp/>=<sp/><ref refid="namespacearuco_1ac3489ddda33f94f247d9be2e6da021f9" kindref="member">solvePnP_</ref>(<ref refid="classaruco_1_1_marker_1a047a6cfac4e5bbca087273618ac1fd52" kindref="member">Marker::get3DPoints</ref>(_msize),<sp/>m,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" kindref="member">CameraMatrix</ref>,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" kindref="member">Distorsion</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errorRatio<sp/>=<sp/>solutions[1].second<sp/>/<sp/>solutions[0].second;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errorRatio<sp/>&lt;<sp/>minerrorRatio)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>is<sp/>the<sp/>error<sp/>ratio<sp/>big<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cv::solvePnP(Marker::get3DPoints(_msize),<sp/>m,<sp/>_cam_params.CameraMatrix,<sp/>_cam_params.Distorsion,<sp/>rv,<sp/>tv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>__aruco_solve_pnp(Marker::get3DPoints(_msize),<sp/>m,<sp/>_cam_params.CameraMatrix,<sp/>_cam_params.Distorsion,<sp/>_rvec,<sp/>_tvec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>rv.convertTo(_rvec,<sp/>CV_32F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tv.convertTo(_tvec,<sp/>CV_32F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>aruco_private::impl__aruco_getRTfromMatrix44(solutions[0].first,<sp/>_rvec,<sp/>_tvec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" kindref="member">__aruco_solve_pnp</ref>(<ref refid="classaruco_1_1_marker_1a047a6cfac4e5bbca087273618ac1fd52" kindref="member">Marker::get3DPoints</ref>(_msize),<sp/>m,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" kindref="member">CameraMatrix</ref>,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" kindref="member">Distorsion</ref>,<sp/>_rvec,<sp/>_tvec);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>_rvec.convertTo(m.<ref refid="classaruco_1_1_marker_1a5f31be5060bf2a6762890a1a54c98cfd" kindref="member">Rvec</ref>,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>_tvec.convertTo(m.<ref refid="classaruco_1_1_marker_1a14068630efdf1a5f665a2dcb34e496d0" kindref="member">Tvec</ref>,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>m.<ref refid="classaruco_1_1_marker_1ac5df65736cc539e78d6620307739b5b1" kindref="member">ssize</ref><sp/>=<sp/>_msize;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classaruco_1_1_marker_map_pose_tracker_1a4cd411e3c8a1bbd724ef8956faa37f35" refkind="member"><highlight class="normal"><ref refid="classaruco_1_1_marker_map_pose_tracker_1a4cd411e3c8a1bbd724ef8956faa37f35" kindref="member">MarkerMapPoseTracker::MarkerMapPoseTracker</ref>()</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>_isValid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>aruco_minerrratio_valid<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classaruco_1_1_marker_map_pose_tracker_1a60cba24ce68b8fb99b1fd15c83003069" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_pose_tracker_1a60cba24ce68b8fb99b1fd15c83003069" kindref="member">MarkerMapPoseTracker::setParams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_camera_parameters" kindref="compound">CameraParameters</ref>&amp;<sp/>cam_params,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map" kindref="compound">MarkerMap</ref>&amp;<sp/>msconf,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>markerSize)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>_msconf<sp/>=<sp/>msconf;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>_cam_params<sp/>=<sp/>cam_params;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cam_params.<ref refid="classaruco_1_1_camera_parameters_1ab5ff265805e264fb13f119b97e0597f7" kindref="member">isValid</ref>())</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(9001,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>camera<sp/>parameters&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMapPoseTracker::setParams&quot;</highlight><highlight class="normal">,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>__LINE__);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_msconf.<ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>==<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a4e2a453d5f8a044dce3ec9586b30d0e8" kindref="member">MarkerMap::PIX</ref><sp/>&amp;&amp;<sp/>markerSize<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(9001,<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>should<sp/>indicate<sp/>the<sp/>markersize<sp/>since<sp/>the<sp/>MarkerMap<sp/>is<sp/>in<sp/>pixels&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MarkerMapPoseTracker::setParams&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_msconf.<ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>==<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a76aa2534eb74133e8b71ecc1d9aa7153" kindref="member">MarkerMap::NONE</ref>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>cv::Exception(9001,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>MarkerMap&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MarkerMapPoseTracker::setParams&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_msconf.<ref refid="classaruco_1_1_marker_map_1aee23774bb36c828c351c5c09f6e76c80" kindref="member">mInfoType</ref><sp/>==<sp/><ref refid="classaruco_1_1_marker_map_1a9736596e94b88d0e5d3ee231c8983058a4e2a453d5f8a044dce3ec9586b30d0e8" kindref="member">MarkerMap::PIX</ref>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>_msconf<sp/>=<sp/>_msconf.<ref refid="classaruco_1_1_marker_map_1a351d1a005e3795cc2ce19ab63f5b12fc" kindref="member">convertToMeters</ref>(markerSize);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>_isValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>map<sp/>for<sp/>fast<sp/>access<sp/>to<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>_map_mm.clear();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>:<sp/>msconf)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>_map_mm.insert(std::make_pair(m.id,<sp/>m));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>compute<sp/>the<sp/>marker_m2g<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>:<sp/>_map_mm)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker3_d_info" kindref="compound">Marker3DInfo</ref><sp/>&amp;m3dinfo<sp/>=<sp/>m.second;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3d_marker<sp/>=<sp/><ref refid="classaruco_1_1_marker_1a047a6cfac4e5bbca087273618ac1fd52" kindref="member">Marker::get3DPoints</ref>(m3dinfo.<ref refid="classaruco_1_1_marker3_d_info_1a46d81a658c18e4880e9e145c312a780e" kindref="member">getMarkerSize</ref>());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>transform<sp/>going<sp/>from<sp/>global<sp/>to<sp/>marker<sp/>to<sp/>using<sp/>Horn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>RT;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacearuco_1_1aruco__private_1aeb25dcbda31030c3dd21e248324ff981" kindref="member">aruco_private::rigidBodyTransformation_Horn1987</ref>(m3dinfo.<ref refid="classaruco_1_1_marker3_d_info_1a5b70ac856ba4865f6faedb235a7f6a65" kindref="member">points</ref>,<sp/>p3d_marker,<sp/>RT);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>marker_m2g[m.first]<sp/>=<sp/>RT;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">cv::Mat<sp/>MarkerMapPoseTracker::relocalization(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Marker&gt;&amp;<sp/>v_m)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>markers<sp/>in<sp/>v_m<sp/>that<sp/>are<sp/>in<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>std::vector&lt;Marker&gt;<sp/>mapMarkers;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>marker<sp/>:<sp/>v_m)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_map_mm.find(marker.id)<sp/>!=<sp/>_map_mm.end())</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapMarkers.push_back(marker);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapMarkers.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cv::Mat();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">minfo</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>rt_f2m;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">se3</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rt[6];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>pose_f2g_out;<sp/></highlight><highlight class="comment">//result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>estimate<sp/>the<sp/>markers<sp/>locations<sp/>and<sp/>see<sp/>if<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>good<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>std::vector&lt;minfo&gt;<sp/>good_marker_locations;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>std::vector&lt;minfo&gt;<sp/>all_marker_locations;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Marker<sp/>&amp;marker<sp/>:<sp/>mapMarkers)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>visible<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mpi<sp/>=<sp/><ref refid="namespacearuco_1ac3489ddda33f94f247d9be2e6da021f9" kindref="member">solvePnP_</ref>(_map_mm[marker.id].getMarkerSize(),<sp/>marker,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" kindref="member">CameraMatrix</ref>,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" kindref="member">Distorsion</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>minfo<sp/>mi;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>mi.id<sp/>=<sp/>marker.id;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>mi.err<sp/>=<sp/>mpi[0].second;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>mi.rt_f2m<sp/>=<sp/>mpi[0].first;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>all_marker_locations.push_back(mi);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mpi[1].second<sp/>/<sp/>mpi[0].second<sp/>&gt;<sp/>aruco_minerrratio_valid)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>good_marker_locations.push_back(mi);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>mi.rt_f2m<sp/>=<sp/>mpi[1].first;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>mi.err<sp/>=<sp/>mpi[1].second;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>all_marker_locations.push_back(mi);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>using<sp/>more<sp/>than<sp/>one<sp/>marker<sp/>approach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapMarkers.size()<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collect<sp/>all<sp/>the<sp/>markers<sp/>3D<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cv::Point2f&gt;<sp/>markerPoints2d;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cv::Point3f&gt;<sp/>markerPoints3d;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Marker<sp/>&amp;marker<sp/>:<sp/>mapMarkers)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markerPoints2d.insert(markerPoints2d.end(),<sp/>marker.begin(),<sp/>marker.end());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3d<sp/>=<sp/>_map_mm[marker.id].points;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markerPoints3d.insert(markerPoints3d.end(),<sp/>p3d.begin(),<sp/>p3d.end());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>take<sp/>the<sp/>all<sp/>poses<sp/>and<sp/>select<sp/>the<sp/>one<sp/>that<sp/>minimizes<sp/>the<sp/>global<sp/>reproj<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>ml<sp/>:<sp/>all_marker_locations)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose<sp/>=<sp/>ml.rt_f2m<sp/>*<sp/>marker_m2g[ml.id];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>compute<sp/>the<sp/>repj<sp/>error<sp/>of<sp/>all<sp/>markers<sp/>using<sp/>this<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ml.err<sp/>=<sp/><ref refid="namespacearuco_1_1aruco__private_1a321d43080bd7449ae0d8448b9bbdd4c3" kindref="member">aruco_private::reprj_error</ref>(markerPoints3d,<sp/>markerPoints2d,<sp/>_cam_params,<sp/>pose);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>and<sp/>get<sp/>the<sp/>best</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(all_marker_locations.begin(),<sp/>all_marker_locations.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>minfo<sp/>&amp;a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>minfo<sp/>&amp;b)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>return<sp/>a.err&lt;b.err;});</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;err<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>all_marker_locations.front().err<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;best<sp/>=<sp/>all_marker_locations.front();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>pose_f2g_out<sp/>=<sp/>best.rt_f2m<sp/>*<sp/>marker_m2g[best.id];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_f2g_out.empty()<sp/>&amp;&amp;<sp/>good_marker_locations.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(good_marker_locations.begin(),<sp/>good_marker_locations.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>minfo<sp/>&amp;a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>minfo<sp/>&amp;b)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>return<sp/>a.err<sp/>&lt;<sp/>b.err;});</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>best<sp/>=<sp/>good_marker_locations[0];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>estimate<sp/>current<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>pose_f2g_out<sp/>=<sp/>best.rt_f2m<sp/>*<sp/>marker_m2g[best.id];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pose_f2g_out;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="classaruco_1_1_marker_map_pose_tracker_1abd678d2bb687984bfb13cea41ae59b0b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classaruco_1_1_marker_map_pose_tracker_1abd678d2bb687984bfb13cea41ae59b0b" kindref="member">MarkerMapPoseTracker::estimatePose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Marker&gt;&amp;<sp/>v_m)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Point2f&gt;<sp/>p2d;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Point3f&gt;<sp/>p3d;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>marker<sp/>:<sp/>v_m)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_map_mm.find(marker.id)<sp/>!=<sp/>_map_mm.end())</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>marker<sp/>part<sp/>of<sp/>the<sp/>map?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>marker)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2d.push_back(p);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>_map_mm[marker.id].points)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3d.push_back(p);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p2d.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>points<sp/>in<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>_rvec<sp/>=<sp/>cv::Mat();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>_tvec<sp/>=<sp/>cv::Mat();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rvec.empty())</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>requires<sp/>relocalization<sp/>since<sp/>past<sp/>pose<sp/>is<sp/>ALL_DICTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relocalization<sp/>provides<sp/>an<sp/>initial<sp/>position<sp/>that<sp/>will<sp/>be<sp/>further<sp/>refined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>InitialPose<sp/>=<sp/>relocalization(v_m);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InitialPose.empty())</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacearuco_1_1aruco__private_1ae3d3e913cfca024f2bb948b44496fa1d" kindref="member">aruco_private::impl__aruco_getRTfromMatrix44</ref>(InitialPose,<sp/>_rvec,<sp/>_tvec);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacearuco_1ae8d524654335c8fa03df067db2d6e3f0" kindref="member">__aruco_solve_pnp</ref>(p3d,<sp/>p2d,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a5210f7dd5f0f4f0fea728357005d6bcd" kindref="member">CameraMatrix</ref>,<sp/>_cam_params.<ref refid="classaruco_1_1_camera_parameters_1a33a5ab0b2f00a4753a2fda307e24360a" kindref="member">Distorsion</ref>,<sp/>_rvec,<sp/>_tvec);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classaruco_1_1_marker_map_pose_tracker_1a30d84078a230ea6bbb99ee266399efb1" refkind="member"><highlight class="normal">cv::Mat<sp/><ref refid="classaruco_1_1_marker_map_pose_tracker_1a30d84078a230ea6bbb99ee266399efb1" kindref="member">MarkerMapPoseTracker::getRTMatrix</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="567"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rvec.empty()<sp/>||<sp/>_tvec.empty())</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cv::Mat();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1_1aruco__private_1ad99ffa19151b36b7e5d3984429019c2e" kindref="member">aruco_private::impl__aruco_getRTMatrix</ref>(_rvec,<sp/>_tvec);</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="classaruco_1_1_marker_pose_tracker_1a9b84a982a094e9315e7fe59d1c4ebe81" refkind="member"><highlight class="normal">cv::Mat<sp/><ref refid="classaruco_1_1_marker_pose_tracker_1a9b84a982a094e9315e7fe59d1c4ebe81" kindref="member">MarkerPoseTracker::getRTMatrix</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="574"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rvec.empty()<sp/>||<sp/>_tvec.empty())</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cv::Mat();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearuco_1_1aruco__private_1ad99ffa19151b36b7e5d3984429019c2e" kindref="member">aruco_private::impl__aruco_getRTMatrix</ref>(_rvec,<sp/>_tvec);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>aruco</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="robocluedo_dependencies/aruco_ros/aruco/src/aruco/posetracker.cpp"/>
  </compounddef>
</doxygen>
